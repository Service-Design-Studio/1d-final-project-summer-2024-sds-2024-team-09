{"ast":null,"code":"function _classPrivateGetter(s, r, a) { return a(_assertClassBrand(s, r)); }\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*!\nTurbo 8.0.4\nCopyright Â© 2024 37signals LLC\n */\n/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2019 Javan Makhmali\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function (prototype) {\n  if (typeof prototype.requestSubmit == \"function\") return;\n  prototype.requestSubmit = function (submitter) {\n    if (submitter) {\n      validateSubmitter(submitter, this);\n      submitter.click();\n    } else {\n      submitter = document.createElement(\"input\");\n      submitter.type = \"submit\";\n      submitter.hidden = true;\n      this.appendChild(submitter);\n      submitter.click();\n      this.removeChild(submitter);\n    }\n  };\n  function validateSubmitter(submitter, form) {\n    submitter instanceof HTMLElement || raise(TypeError, \"parameter 1 is not of type 'HTMLElement'\");\n    submitter.type == \"submit\" || raise(TypeError, \"The specified element is not a submit button\");\n    submitter.form == form || raise(DOMException, \"The specified element is not owned by this form element\", \"NotFoundError\");\n  }\n  function raise(errorConstructor, message, name) {\n    throw new errorConstructor(\"Failed to execute 'requestSubmit' on 'HTMLFormElement': \" + message + \".\", name);\n  }\n})(HTMLFormElement.prototype);\nconst submittersByForm = new WeakMap();\nfunction findSubmitterFromClickTarget(target) {\n  const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;\n  const candidate = element ? element.closest(\"input, button\") : null;\n  return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == \"submit\" ? candidate : null;\n}\nfunction clickCaptured(event) {\n  const submitter = findSubmitterFromClickTarget(event.target);\n  if (submitter && submitter.form) {\n    submittersByForm.set(submitter.form, submitter);\n  }\n}\n(function () {\n  if (\"submitter\" in Event.prototype) return;\n  let prototype = window.Event.prototype;\n  // Certain versions of Safari 15 have a bug where they won't\n  // populate the submitter. This hurts TurboDrive's enable/disable detection.\n  // See https://bugs.webkit.org/show_bug.cgi?id=229660\n  if (\"SubmitEvent\" in window) {\n    const prototypeOfSubmitEvent = window.SubmitEvent.prototype;\n    if (/Apple Computer/.test(navigator.vendor) && !(\"submitter\" in prototypeOfSubmitEvent)) {\n      prototype = prototypeOfSubmitEvent;\n    } else {\n      return; // polyfill not needed\n    }\n  }\n  addEventListener(\"click\", clickCaptured, true);\n  Object.defineProperty(prototype, \"submitter\", {\n    get() {\n      if (this.type == \"submit\" && this.target instanceof HTMLFormElement) {\n        return submittersByForm.get(this.target);\n      }\n    }\n  });\n})();\nconst FrameLoadingStyle = {\n  eager: \"eager\",\n  lazy: \"lazy\"\n};\n\n/**\n * Contains a fragment of HTML which is updated based on navigation within\n * it (e.g. via links or form submissions).\n *\n * @customElement turbo-frame\n * @example\n *   <turbo-frame id=\"messages\">\n *     <a href=\"/messages/expanded\">\n *       Show all expanded messages in this frame.\n *     </a>\n *\n *     <form action=\"/messages\">\n *       Show response from this form within this frame.\n *     </form>\n *   </turbo-frame>\n */\nclass FrameElement extends HTMLElement {\n  static get observedAttributes() {\n    return [\"disabled\", \"loading\", \"src\"];\n  }\n  constructor() {\n    super();\n    _defineProperty(this, \"loaded\", Promise.resolve());\n    this.delegate = new FrameElement.delegateConstructor(this);\n  }\n  connectedCallback() {\n    this.delegate.connect();\n  }\n  disconnectedCallback() {\n    this.delegate.disconnect();\n  }\n  reload() {\n    return this.delegate.sourceURLReloaded();\n  }\n  attributeChangedCallback(name) {\n    if (name == \"loading\") {\n      this.delegate.loadingStyleChanged();\n    } else if (name == \"src\") {\n      this.delegate.sourceURLChanged();\n    } else if (name == \"disabled\") {\n      this.delegate.disabledChanged();\n    }\n  }\n\n  /**\n   * Gets the URL to lazily load source HTML from\n   */\n  get src() {\n    return this.getAttribute(\"src\");\n  }\n\n  /**\n   * Sets the URL to lazily load source HTML from\n   */\n  set src(value) {\n    if (value) {\n      this.setAttribute(\"src\", value);\n    } else {\n      this.removeAttribute(\"src\");\n    }\n  }\n\n  /**\n   * Gets the refresh mode for the frame.\n   */\n  get refresh() {\n    return this.getAttribute(\"refresh\");\n  }\n\n  /**\n   * Sets the refresh mode for the frame.\n   */\n  set refresh(value) {\n    if (value) {\n      this.setAttribute(\"refresh\", value);\n    } else {\n      this.removeAttribute(\"refresh\");\n    }\n  }\n\n  /**\n   * Determines if the element is loading\n   */\n  get loading() {\n    return frameLoadingStyleFromString(this.getAttribute(\"loading\") || \"\");\n  }\n\n  /**\n   * Sets the value of if the element is loading\n   */\n  set loading(value) {\n    if (value) {\n      this.setAttribute(\"loading\", value);\n    } else {\n      this.removeAttribute(\"loading\");\n    }\n  }\n\n  /**\n   * Gets the disabled state of the frame.\n   *\n   * If disabled, no requests will be intercepted by the frame.\n   */\n  get disabled() {\n    return this.hasAttribute(\"disabled\");\n  }\n\n  /**\n   * Sets the disabled state of the frame.\n   *\n   * If disabled, no requests will be intercepted by the frame.\n   */\n  set disabled(value) {\n    if (value) {\n      this.setAttribute(\"disabled\", \"\");\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n  }\n\n  /**\n   * Gets the autoscroll state of the frame.\n   *\n   * If true, the frame will be scrolled into view automatically on update.\n   */\n  get autoscroll() {\n    return this.hasAttribute(\"autoscroll\");\n  }\n\n  /**\n   * Sets the autoscroll state of the frame.\n   *\n   * If true, the frame will be scrolled into view automatically on update.\n   */\n  set autoscroll(value) {\n    if (value) {\n      this.setAttribute(\"autoscroll\", \"\");\n    } else {\n      this.removeAttribute(\"autoscroll\");\n    }\n  }\n\n  /**\n   * Determines if the element has finished loading\n   */\n  get complete() {\n    return !this.delegate.isLoading;\n  }\n\n  /**\n   * Gets the active state of the frame.\n   *\n   * If inactive, source changes will not be observed.\n   */\n  get isActive() {\n    return this.ownerDocument === document && !this.isPreview;\n  }\n\n  /**\n   * Sets the active state of the frame.\n   *\n   * If inactive, source changes will not be observed.\n   */\n  get isPreview() {\n    var _this$ownerDocument, _this$ownerDocument$d;\n    return (_this$ownerDocument = this.ownerDocument) === null || _this$ownerDocument === void 0 ? void 0 : (_this$ownerDocument$d = _this$ownerDocument.documentElement) === null || _this$ownerDocument$d === void 0 ? void 0 : _this$ownerDocument$d.hasAttribute(\"data-turbo-preview\");\n  }\n}\n_defineProperty(FrameElement, \"delegateConstructor\", undefined);\nfunction frameLoadingStyleFromString(style) {\n  switch (style.toLowerCase()) {\n    case \"lazy\":\n      return FrameLoadingStyle.lazy;\n    default:\n      return FrameLoadingStyle.eager;\n  }\n}\nfunction expandURL(locatable) {\n  return new URL(locatable.toString(), document.baseURI);\n}\nfunction getAnchor(url) {\n  let anchorMatch;\n  if (url.hash) {\n    return url.hash.slice(1);\n    // eslint-disable-next-line no-cond-assign\n  } else if (anchorMatch = url.href.match(/#(.*)$/)) {\n    return anchorMatch[1];\n  }\n}\nfunction getAction$1(form, submitter) {\n  const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"formaction\")) || form.getAttribute(\"action\") || form.action;\n  return expandURL(action);\n}\nfunction getExtension(url) {\n  return (getLastPathComponent(url).match(/\\.[^.]*$/) || [])[0] || \"\";\n}\nfunction isHTML(url) {\n  return !!getExtension(url).match(/^(?:|\\.(?:htm|html|xhtml|php))$/);\n}\nfunction isPrefixedBy(baseURL, url) {\n  const prefix = getPrefix(url);\n  return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);\n}\nfunction locationIsVisitable(location, rootLocation) {\n  return isPrefixedBy(location, rootLocation) && isHTML(location);\n}\nfunction getRequestURL(url) {\n  const anchor = getAnchor(url);\n  return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;\n}\nfunction toCacheKey(url) {\n  return getRequestURL(url);\n}\nfunction urlsAreEqual(left, right) {\n  return expandURL(left).href == expandURL(right).href;\n}\nfunction getPathComponents(url) {\n  return url.pathname.split(\"/\").slice(1);\n}\nfunction getLastPathComponent(url) {\n  return getPathComponents(url).slice(-1)[0];\n}\nfunction getPrefix(url) {\n  return addTrailingSlash(url.origin + url.pathname);\n}\nfunction addTrailingSlash(value) {\n  return value.endsWith(\"/\") ? value : value + \"/\";\n}\nclass FetchResponse {\n  constructor(response) {\n    this.response = response;\n  }\n  get succeeded() {\n    return this.response.ok;\n  }\n  get failed() {\n    return !this.succeeded;\n  }\n  get clientError() {\n    return this.statusCode >= 400 && this.statusCode <= 499;\n  }\n  get serverError() {\n    return this.statusCode >= 500 && this.statusCode <= 599;\n  }\n  get redirected() {\n    return this.response.redirected;\n  }\n  get location() {\n    return expandURL(this.response.url);\n  }\n  get isHTML() {\n    return this.contentType && this.contentType.match(/^(?:text\\/([^\\s;,]+\\b)?html|application\\/xhtml\\+xml)\\b/);\n  }\n  get statusCode() {\n    return this.response.status;\n  }\n  get contentType() {\n    return this.header(\"Content-Type\");\n  }\n  get responseText() {\n    return this.response.clone().text();\n  }\n  get responseHTML() {\n    if (this.isHTML) {\n      return this.response.clone().text();\n    } else {\n      return Promise.resolve(undefined);\n    }\n  }\n  header(name) {\n    return this.response.headers.get(name);\n  }\n}\nfunction activateScriptElement(element) {\n  if (element.getAttribute(\"data-turbo-eval\") == \"false\") {\n    return element;\n  } else {\n    const createdScriptElement = document.createElement(\"script\");\n    const cspNonce = getMetaContent(\"csp-nonce\");\n    if (cspNonce) {\n      createdScriptElement.nonce = cspNonce;\n    }\n    createdScriptElement.textContent = element.textContent;\n    createdScriptElement.async = false;\n    copyElementAttributes(createdScriptElement, element);\n    return createdScriptElement;\n  }\n}\nfunction copyElementAttributes(destinationElement, sourceElement) {\n  for (const {\n    name,\n    value\n  } of sourceElement.attributes) {\n    destinationElement.setAttribute(name, value);\n  }\n}\nfunction createDocumentFragment(html) {\n  const template = document.createElement(\"template\");\n  template.innerHTML = html;\n  return template.content;\n}\nfunction dispatch(eventName) {\n  let {\n    target,\n    cancelable,\n    detail\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const event = new CustomEvent(eventName, {\n    cancelable,\n    bubbles: true,\n    composed: true,\n    detail\n  });\n  if (target && target.isConnected) {\n    target.dispatchEvent(event);\n  } else {\n    document.documentElement.dispatchEvent(event);\n  }\n  return event;\n}\nfunction nextRepaint() {\n  if (document.visibilityState === \"hidden\") {\n    return nextEventLoopTick();\n  } else {\n    return nextAnimationFrame();\n  }\n}\nfunction nextAnimationFrame() {\n  return new Promise(resolve => requestAnimationFrame(() => resolve()));\n}\nfunction nextEventLoopTick() {\n  return new Promise(resolve => setTimeout(() => resolve(), 0));\n}\nfunction nextMicrotask() {\n  return Promise.resolve();\n}\nfunction parseHTMLDocument() {\n  let html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return new DOMParser().parseFromString(html, \"text/html\");\n}\nfunction unindent(strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n  const lines = interpolate(strings, values).replace(/^\\n/, \"\").split(\"\\n\");\n  const match = lines[0].match(/^\\s+/);\n  const indent = match ? match[0].length : 0;\n  return lines.map(line => line.slice(indent)).join(\"\\n\");\n}\nfunction interpolate(strings, values) {\n  return strings.reduce((result, string, i) => {\n    const value = values[i] == undefined ? \"\" : values[i];\n    return result + string + value;\n  }, \"\");\n}\nfunction uuid() {\n  return Array.from({\n    length: 36\n  }).map((_, i) => {\n    if (i == 8 || i == 13 || i == 18 || i == 23) {\n      return \"-\";\n    } else if (i == 14) {\n      return \"4\";\n    } else if (i == 19) {\n      return (Math.floor(Math.random() * 4) + 8).toString(16);\n    } else {\n      return Math.floor(Math.random() * 15).toString(16);\n    }\n  }).join(\"\");\n}\nfunction getAttribute(attributeName) {\n  for (var _len2 = arguments.length, elements = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    elements[_key2 - 1] = arguments[_key2];\n  }\n  for (const value of elements.map(element => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {\n    if (typeof value == \"string\") return value;\n  }\n  return null;\n}\nfunction hasAttribute(attributeName) {\n  for (var _len3 = arguments.length, elements = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    elements[_key3 - 1] = arguments[_key3];\n  }\n  return elements.some(element => element && element.hasAttribute(attributeName));\n}\nfunction markAsBusy() {\n  for (var _len4 = arguments.length, elements = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    elements[_key4] = arguments[_key4];\n  }\n  for (const element of elements) {\n    if (element.localName == \"turbo-frame\") {\n      element.setAttribute(\"busy\", \"\");\n    }\n    element.setAttribute(\"aria-busy\", \"true\");\n  }\n}\nfunction clearBusyState() {\n  for (var _len5 = arguments.length, elements = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    elements[_key5] = arguments[_key5];\n  }\n  for (const element of elements) {\n    if (element.localName == \"turbo-frame\") {\n      element.removeAttribute(\"busy\");\n    }\n    element.removeAttribute(\"aria-busy\");\n  }\n}\nfunction waitForLoad(element) {\n  let timeoutInMilliseconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;\n  return new Promise(resolve => {\n    const onComplete = () => {\n      element.removeEventListener(\"error\", onComplete);\n      element.removeEventListener(\"load\", onComplete);\n      resolve();\n    };\n    element.addEventListener(\"load\", onComplete, {\n      once: true\n    });\n    element.addEventListener(\"error\", onComplete, {\n      once: true\n    });\n    setTimeout(resolve, timeoutInMilliseconds);\n  });\n}\nfunction getHistoryMethodForAction(action) {\n  switch (action) {\n    case \"replace\":\n      return history.replaceState;\n    case \"advance\":\n    case \"restore\":\n      return history.pushState;\n  }\n}\nfunction isAction(action) {\n  return action == \"advance\" || action == \"replace\" || action == \"restore\";\n}\nfunction getVisitAction() {\n  for (var _len6 = arguments.length, elements = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    elements[_key6] = arguments[_key6];\n  }\n  const action = getAttribute(\"data-turbo-action\", ...elements);\n  return isAction(action) ? action : null;\n}\nfunction getMetaElement(name) {\n  return document.querySelector(`meta[name=\"${name}\"]`);\n}\nfunction getMetaContent(name) {\n  const element = getMetaElement(name);\n  return element && element.content;\n}\nfunction setMetaContent(name, content) {\n  let element = getMetaElement(name);\n  if (!element) {\n    element = document.createElement(\"meta\");\n    element.setAttribute(\"name\", name);\n    document.head.appendChild(element);\n  }\n  element.setAttribute(\"content\", content);\n  return element;\n}\nfunction findClosestRecursively(element, selector) {\n  if (element instanceof Element) {\n    var _element$getRootNode;\n    return element.closest(selector) || findClosestRecursively(element.assignedSlot || ((_element$getRootNode = element.getRootNode()) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.host), selector);\n  }\n}\nfunction elementIsFocusable(element) {\n  const inertDisabledOrHidden = \"[inert], :disabled, [hidden], details:not([open]), dialog:not([open])\";\n  return !!element && element.closest(inertDisabledOrHidden) == null && typeof element.focus == \"function\";\n}\nfunction queryAutofocusableElement(elementOrDocumentFragment) {\n  return Array.from(elementOrDocumentFragment.querySelectorAll(\"[autofocus]\")).find(elementIsFocusable);\n}\nasync function around(callback, reader) {\n  const before = reader();\n  callback();\n  await nextAnimationFrame();\n  const after = reader();\n  return [before, after];\n}\nfunction doesNotTargetIFrame(anchor) {\n  if (anchor.hasAttribute(\"target\")) {\n    for (const element of document.getElementsByName(anchor.target)) {\n      if (element instanceof HTMLIFrameElement) return false;\n    }\n  }\n  return true;\n}\nfunction findLinkFromClickTarget(target) {\n  return findClosestRecursively(target, \"a[href]:not([target^=_]):not([download])\");\n}\nfunction getLocationForLink(link) {\n  return expandURL(link.getAttribute(\"href\") || \"\");\n}\nfunction debounce(fn, delay) {\n  var _this = this;\n  let timeoutId = null;\n  return function () {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    const callback = () => fn.apply(_this, args);\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(callback, delay);\n  };\n}\nclass LimitedSet extends Set {\n  constructor(maxSize) {\n    super();\n    this.maxSize = maxSize;\n  }\n  add(value) {\n    if (this.size >= this.maxSize) {\n      const iterator = this.values();\n      const oldestValue = iterator.next().value;\n      this.delete(oldestValue);\n    }\n    super.add(value);\n  }\n}\nconst recentRequests = new LimitedSet(20);\nconst nativeFetch = window.fetch;\nfunction fetchWithTurboHeaders(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const modifiedHeaders = new Headers(options.headers || {});\n  const requestUID = uuid();\n  recentRequests.add(requestUID);\n  modifiedHeaders.append(\"X-Turbo-Request-Id\", requestUID);\n  return nativeFetch(url, {\n    ...options,\n    headers: modifiedHeaders\n  });\n}\nfunction fetchMethodFromString(method) {\n  switch (method.toLowerCase()) {\n    case \"get\":\n      return FetchMethod.get;\n    case \"post\":\n      return FetchMethod.post;\n    case \"put\":\n      return FetchMethod.put;\n    case \"patch\":\n      return FetchMethod.patch;\n    case \"delete\":\n      return FetchMethod.delete;\n  }\n}\nconst FetchMethod = {\n  get: \"get\",\n  post: \"post\",\n  put: \"put\",\n  patch: \"patch\",\n  delete: \"delete\"\n};\nfunction fetchEnctypeFromString(encoding) {\n  switch (encoding.toLowerCase()) {\n    case FetchEnctype.multipart:\n      return FetchEnctype.multipart;\n    case FetchEnctype.plain:\n      return FetchEnctype.plain;\n    default:\n      return FetchEnctype.urlEncoded;\n  }\n}\nconst FetchEnctype = {\n  urlEncoded: \"application/x-www-form-urlencoded\",\n  multipart: \"multipart/form-data\",\n  plain: \"text/plain\"\n};\nvar _resolveRequestPromise = /*#__PURE__*/new WeakMap();\nvar _FetchRequest_brand = /*#__PURE__*/new WeakSet();\nclass FetchRequest {\n  constructor(delegate, method, location) {\n    var _this$delegate$referr;\n    let requestBody = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new URLSearchParams();\n    let target = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let enctype = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : FetchEnctype.urlEncoded;\n    _classPrivateMethodInitSpec(this, _FetchRequest_brand);\n    _defineProperty(this, \"abortController\", new AbortController());\n    _classPrivateFieldInitSpec(this, _resolveRequestPromise, _value => {});\n    const [url, body] = buildResourceAndBody(expandURL(location), method, requestBody, enctype);\n    this.delegate = delegate;\n    this.url = url;\n    this.target = target;\n    this.fetchOptions = {\n      credentials: \"same-origin\",\n      redirect: \"follow\",\n      method: method,\n      headers: {\n        ...this.defaultHeaders\n      },\n      body: body,\n      signal: this.abortSignal,\n      referrer: (_this$delegate$referr = this.delegate.referrer) === null || _this$delegate$referr === void 0 ? void 0 : _this$delegate$referr.href\n    };\n    this.enctype = enctype;\n  }\n  get method() {\n    return this.fetchOptions.method;\n  }\n  set method(value) {\n    const fetchBody = this.isSafe ? this.url.searchParams : this.fetchOptions.body || new FormData();\n    const fetchMethod = fetchMethodFromString(value) || FetchMethod.get;\n    this.url.search = \"\";\n    const [url, body] = buildResourceAndBody(this.url, fetchMethod, fetchBody, this.enctype);\n    this.url = url;\n    this.fetchOptions.body = body;\n    this.fetchOptions.method = fetchMethod;\n  }\n  get headers() {\n    return this.fetchOptions.headers;\n  }\n  set headers(value) {\n    this.fetchOptions.headers = value;\n  }\n  get body() {\n    if (this.isSafe) {\n      return this.url.searchParams;\n    } else {\n      return this.fetchOptions.body;\n    }\n  }\n  set body(value) {\n    this.fetchOptions.body = value;\n  }\n  get location() {\n    return this.url;\n  }\n  get params() {\n    return this.url.searchParams;\n  }\n  get entries() {\n    return this.body ? Array.from(this.body.entries()) : [];\n  }\n  cancel() {\n    this.abortController.abort();\n  }\n  async perform() {\n    const {\n      fetchOptions\n    } = this;\n    this.delegate.prepareRequest(this);\n    const event = await _assertClassBrand(_FetchRequest_brand, this, _allowRequestToBeIntercepted).call(this, fetchOptions);\n    try {\n      this.delegate.requestStarted(this);\n      if (event.detail.fetchRequest) {\n        this.response = event.detail.fetchRequest.response;\n      } else {\n        this.response = fetchWithTurboHeaders(this.url.href, fetchOptions);\n      }\n      const response = await this.response;\n      return await this.receive(response);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        if (_assertClassBrand(_FetchRequest_brand, this, _willDelegateErrorHandling).call(this, error)) {\n          this.delegate.requestErrored(this, error);\n        }\n        throw error;\n      }\n    } finally {\n      this.delegate.requestFinished(this);\n    }\n  }\n  async receive(response) {\n    const fetchResponse = new FetchResponse(response);\n    const event = dispatch(\"turbo:before-fetch-response\", {\n      cancelable: true,\n      detail: {\n        fetchResponse\n      },\n      target: this.target\n    });\n    if (event.defaultPrevented) {\n      this.delegate.requestPreventedHandlingResponse(this, fetchResponse);\n    } else if (fetchResponse.succeeded) {\n      this.delegate.requestSucceededWithResponse(this, fetchResponse);\n    } else {\n      this.delegate.requestFailedWithResponse(this, fetchResponse);\n    }\n    return fetchResponse;\n  }\n  get defaultHeaders() {\n    return {\n      Accept: \"text/html, application/xhtml+xml\"\n    };\n  }\n  get isSafe() {\n    return isSafe(this.method);\n  }\n  get abortSignal() {\n    return this.abortController.signal;\n  }\n  acceptResponseType(mimeType) {\n    this.headers[\"Accept\"] = [mimeType, this.headers[\"Accept\"]].join(\", \");\n  }\n}\nasync function _allowRequestToBeIntercepted(fetchOptions) {\n  const requestInterception = new Promise(resolve => _classPrivateFieldSet(_resolveRequestPromise, this, resolve));\n  const event = dispatch(\"turbo:before-fetch-request\", {\n    cancelable: true,\n    detail: {\n      fetchOptions,\n      url: this.url,\n      resume: _classPrivateFieldGet(_resolveRequestPromise, this)\n    },\n    target: this.target\n  });\n  this.url = event.detail.url;\n  if (event.defaultPrevented) await requestInterception;\n  return event;\n}\nfunction _willDelegateErrorHandling(error) {\n  const event = dispatch(\"turbo:fetch-request-error\", {\n    target: this.target,\n    cancelable: true,\n    detail: {\n      request: this,\n      error: error\n    }\n  });\n  return !event.defaultPrevented;\n}\nfunction isSafe(fetchMethod) {\n  return fetchMethodFromString(fetchMethod) == FetchMethod.get;\n}\nfunction buildResourceAndBody(resource, method, requestBody, enctype) {\n  const searchParams = Array.from(requestBody).length > 0 ? new URLSearchParams(entriesExcludingFiles(requestBody)) : resource.searchParams;\n  if (isSafe(method)) {\n    return [mergeIntoURLSearchParams(resource, searchParams), null];\n  } else if (enctype == FetchEnctype.urlEncoded) {\n    return [resource, searchParams];\n  } else {\n    return [resource, requestBody];\n  }\n}\nfunction entriesExcludingFiles(requestBody) {\n  const entries = [];\n  for (const [name, value] of requestBody) {\n    if (value instanceof File) continue;else entries.push([name, value]);\n  }\n  return entries;\n}\nfunction mergeIntoURLSearchParams(url, requestBody) {\n  const searchParams = new URLSearchParams(entriesExcludingFiles(requestBody));\n  url.search = searchParams.toString();\n  return url;\n}\nclass AppearanceObserver {\n  constructor(delegate, element) {\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"intersect\", entries => {\n      const lastEntry = entries.slice(-1)[0];\n      if (lastEntry !== null && lastEntry !== void 0 && lastEntry.isIntersecting) {\n        this.delegate.elementAppearedInViewport(this.element);\n      }\n    });\n    this.delegate = delegate;\n    this.element = element;\n    this.intersectionObserver = new IntersectionObserver(this.intersect);\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this.intersectionObserver.observe(this.element);\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this.intersectionObserver.unobserve(this.element);\n    }\n  }\n}\nclass StreamMessage {\n  static wrap(message) {\n    if (typeof message == \"string\") {\n      return new this(createDocumentFragment(message));\n    } else {\n      return message;\n    }\n  }\n  constructor(fragment) {\n    this.fragment = importStreamElements(fragment);\n  }\n}\n_defineProperty(StreamMessage, \"contentType\", \"text/vnd.turbo-stream.html\");\nfunction importStreamElements(fragment) {\n  for (const element of fragment.querySelectorAll(\"turbo-stream\")) {\n    const streamElement = document.importNode(element, true);\n    for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll(\"script\")) {\n      inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));\n    }\n    element.replaceWith(streamElement);\n  }\n  return fragment;\n}\nconst PREFETCH_DELAY = 100;\nvar _prefetchTimeout = /*#__PURE__*/new WeakMap();\nvar _prefetched = /*#__PURE__*/new WeakMap();\nclass PrefetchCache {\n  constructor() {\n    _classPrivateFieldInitSpec(this, _prefetchTimeout, null);\n    _classPrivateFieldInitSpec(this, _prefetched, null);\n  }\n  get(url) {\n    if (_classPrivateFieldGet(_prefetched, this) && _classPrivateFieldGet(_prefetched, this).url === url && _classPrivateFieldGet(_prefetched, this).expire > Date.now()) {\n      return _classPrivateFieldGet(_prefetched, this).request;\n    }\n  }\n  setLater(url, request, ttl) {\n    this.clear();\n    _classPrivateFieldSet(_prefetchTimeout, this, setTimeout(() => {\n      request.perform();\n      this.set(url, request, ttl);\n      _classPrivateFieldSet(_prefetchTimeout, this, null);\n    }, PREFETCH_DELAY));\n  }\n  set(url, request, ttl) {\n    _classPrivateFieldSet(_prefetched, this, {\n      url,\n      request,\n      expire: new Date(new Date().getTime() + ttl)\n    });\n  }\n  clear() {\n    if (_classPrivateFieldGet(_prefetchTimeout, this)) clearTimeout(_classPrivateFieldGet(_prefetchTimeout, this));\n    _classPrivateFieldSet(_prefetched, this, null);\n  }\n}\nconst cacheTtl = 10 * 1000;\nconst prefetchCache = new PrefetchCache();\nconst FormSubmissionState = {\n  initialized: \"initialized\",\n  requesting: \"requesting\",\n  waiting: \"waiting\",\n  receiving: \"receiving\",\n  stopping: \"stopping\",\n  stopped: \"stopped\"\n};\nclass FormSubmission {\n  static confirmMethod(message, _element, _submitter) {\n    return Promise.resolve(confirm(message));\n  }\n  constructor(delegate, formElement, submitter) {\n    let mustRedirect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    _defineProperty(this, \"state\", FormSubmissionState.initialized);\n    const method = getMethod(formElement, submitter);\n    const action = getAction(getFormAction(formElement, submitter), method);\n    const body = buildFormData(formElement, submitter);\n    const enctype = getEnctype(formElement, submitter);\n    this.delegate = delegate;\n    this.formElement = formElement;\n    this.submitter = submitter;\n    this.fetchRequest = new FetchRequest(this, method, action, body, formElement, enctype);\n    this.mustRedirect = mustRedirect;\n  }\n  get method() {\n    return this.fetchRequest.method;\n  }\n  set method(value) {\n    this.fetchRequest.method = value;\n  }\n  get action() {\n    return this.fetchRequest.url.toString();\n  }\n  set action(value) {\n    this.fetchRequest.url = expandURL(value);\n  }\n  get body() {\n    return this.fetchRequest.body;\n  }\n  get enctype() {\n    return this.fetchRequest.enctype;\n  }\n  get isSafe() {\n    return this.fetchRequest.isSafe;\n  }\n  get location() {\n    return this.fetchRequest.url;\n  }\n\n  // The submission process\n\n  async start() {\n    const {\n      initialized,\n      requesting\n    } = FormSubmissionState;\n    const confirmationMessage = getAttribute(\"data-turbo-confirm\", this.submitter, this.formElement);\n    if (typeof confirmationMessage === \"string\") {\n      const answer = await FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);\n      if (!answer) {\n        return;\n      }\n    }\n    if (this.state == initialized) {\n      this.state = requesting;\n      return this.fetchRequest.perform();\n    }\n  }\n  stop() {\n    const {\n      stopping,\n      stopped\n    } = FormSubmissionState;\n    if (this.state != stopping && this.state != stopped) {\n      this.state = stopping;\n      this.fetchRequest.cancel();\n      return true;\n    }\n  }\n\n  // Fetch request delegate\n\n  prepareRequest(request) {\n    if (!request.isSafe) {\n      const token = getCookieValue(getMetaContent(\"csrf-param\")) || getMetaContent(\"csrf-token\");\n      if (token) {\n        request.headers[\"X-CSRF-Token\"] = token;\n      }\n    }\n    if (this.requestAcceptsTurboStreamResponse(request)) {\n      request.acceptResponseType(StreamMessage.contentType);\n    }\n  }\n  requestStarted(_request) {\n    var _this$submitter;\n    this.state = FormSubmissionState.waiting;\n    (_this$submitter = this.submitter) === null || _this$submitter === void 0 ? void 0 : _this$submitter.setAttribute(\"disabled\", \"\");\n    this.setSubmitsWith();\n    markAsBusy(this.formElement);\n    dispatch(\"turbo:submit-start\", {\n      target: this.formElement,\n      detail: {\n        formSubmission: this\n      }\n    });\n    this.delegate.formSubmissionStarted(this);\n  }\n  requestPreventedHandlingResponse(request, response) {\n    prefetchCache.clear();\n    this.result = {\n      success: response.succeeded,\n      fetchResponse: response\n    };\n  }\n  requestSucceededWithResponse(request, response) {\n    if (response.clientError || response.serverError) {\n      this.delegate.formSubmissionFailedWithResponse(this, response);\n      return;\n    }\n    prefetchCache.clear();\n    if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {\n      const error = new Error(\"Form responses must redirect to another location\");\n      this.delegate.formSubmissionErrored(this, error);\n    } else {\n      this.state = FormSubmissionState.receiving;\n      this.result = {\n        success: true,\n        fetchResponse: response\n      };\n      this.delegate.formSubmissionSucceededWithResponse(this, response);\n    }\n  }\n  requestFailedWithResponse(request, response) {\n    this.result = {\n      success: false,\n      fetchResponse: response\n    };\n    this.delegate.formSubmissionFailedWithResponse(this, response);\n  }\n  requestErrored(request, error) {\n    this.result = {\n      success: false,\n      error\n    };\n    this.delegate.formSubmissionErrored(this, error);\n  }\n  requestFinished(_request) {\n    var _this$submitter2;\n    this.state = FormSubmissionState.stopped;\n    (_this$submitter2 = this.submitter) === null || _this$submitter2 === void 0 ? void 0 : _this$submitter2.removeAttribute(\"disabled\");\n    this.resetSubmitterText();\n    clearBusyState(this.formElement);\n    dispatch(\"turbo:submit-end\", {\n      target: this.formElement,\n      detail: {\n        formSubmission: this,\n        ...this.result\n      }\n    });\n    this.delegate.formSubmissionFinished(this);\n  }\n\n  // Private\n\n  setSubmitsWith() {\n    if (!this.submitter || !this.submitsWith) return;\n    if (this.submitter.matches(\"button\")) {\n      this.originalSubmitText = this.submitter.innerHTML;\n      this.submitter.innerHTML = this.submitsWith;\n    } else if (this.submitter.matches(\"input\")) {\n      const input = this.submitter;\n      this.originalSubmitText = input.value;\n      input.value = this.submitsWith;\n    }\n  }\n  resetSubmitterText() {\n    if (!this.submitter || !this.originalSubmitText) return;\n    if (this.submitter.matches(\"button\")) {\n      this.submitter.innerHTML = this.originalSubmitText;\n    } else if (this.submitter.matches(\"input\")) {\n      const input = this.submitter;\n      input.value = this.originalSubmitText;\n    }\n  }\n  requestMustRedirect(request) {\n    return !request.isSafe && this.mustRedirect;\n  }\n  requestAcceptsTurboStreamResponse(request) {\n    return !request.isSafe || hasAttribute(\"data-turbo-stream\", this.submitter, this.formElement);\n  }\n  get submitsWith() {\n    var _this$submitter3;\n    return (_this$submitter3 = this.submitter) === null || _this$submitter3 === void 0 ? void 0 : _this$submitter3.getAttribute(\"data-turbo-submits-with\");\n  }\n}\nfunction buildFormData(formElement, submitter) {\n  const formData = new FormData(formElement);\n  const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"name\");\n  const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"value\");\n  if (name) {\n    formData.append(name, value || \"\");\n  }\n  return formData;\n}\nfunction getCookieValue(cookieName) {\n  if (cookieName != null) {\n    const cookies = document.cookie ? document.cookie.split(\"; \") : [];\n    const cookie = cookies.find(cookie => cookie.startsWith(cookieName));\n    if (cookie) {\n      const value = cookie.split(\"=\").slice(1).join(\"=\");\n      return value ? decodeURIComponent(value) : undefined;\n    }\n  }\n}\nfunction responseSucceededWithoutRedirect(response) {\n  return response.statusCode == 200 && !response.redirected;\n}\nfunction getFormAction(formElement, submitter) {\n  const formElementAction = typeof formElement.action === \"string\" ? formElement.action : null;\n  if (submitter !== null && submitter !== void 0 && submitter.hasAttribute(\"formaction\")) {\n    return submitter.getAttribute(\"formaction\") || \"\";\n  } else {\n    return formElement.getAttribute(\"action\") || formElementAction || \"\";\n  }\n}\nfunction getAction(formAction, fetchMethod) {\n  const action = expandURL(formAction);\n  if (isSafe(fetchMethod)) {\n    action.search = \"\";\n  }\n  return action;\n}\nfunction getMethod(formElement, submitter) {\n  const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"formmethod\")) || formElement.getAttribute(\"method\") || \"\";\n  return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;\n}\nfunction getEnctype(formElement, submitter) {\n  return fetchEnctypeFromString((submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"formenctype\")) || formElement.enctype);\n}\nclass Snapshot {\n  constructor(element) {\n    this.element = element;\n  }\n  get activeElement() {\n    return this.element.ownerDocument.activeElement;\n  }\n  get children() {\n    return [...this.element.children];\n  }\n  hasAnchor(anchor) {\n    return this.getElementForAnchor(anchor) != null;\n  }\n  getElementForAnchor(anchor) {\n    return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;\n  }\n  get isConnected() {\n    return this.element.isConnected;\n  }\n  get firstAutofocusableElement() {\n    return queryAutofocusableElement(this.element);\n  }\n  get permanentElements() {\n    return queryPermanentElementsAll(this.element);\n  }\n  getPermanentElementById(id) {\n    return getPermanentElementById(this.element, id);\n  }\n  getPermanentElementMapForSnapshot(snapshot) {\n    const permanentElementMap = {};\n    for (const currentPermanentElement of this.permanentElements) {\n      const {\n        id\n      } = currentPermanentElement;\n      const newPermanentElement = snapshot.getPermanentElementById(id);\n      if (newPermanentElement) {\n        permanentElementMap[id] = [currentPermanentElement, newPermanentElement];\n      }\n    }\n    return permanentElementMap;\n  }\n}\nfunction getPermanentElementById(node, id) {\n  return node.querySelector(`#${id}[data-turbo-permanent]`);\n}\nfunction queryPermanentElementsAll(node) {\n  return node.querySelectorAll(\"[id][data-turbo-permanent]\");\n}\nclass FormSubmitObserver {\n  constructor(delegate, eventTarget) {\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"submitCaptured\", () => {\n      this.eventTarget.removeEventListener(\"submit\", this.submitBubbled, false);\n      this.eventTarget.addEventListener(\"submit\", this.submitBubbled, false);\n    });\n    _defineProperty(this, \"submitBubbled\", event => {\n      if (!event.defaultPrevented) {\n        const form = event.target instanceof HTMLFormElement ? event.target : undefined;\n        const submitter = event.submitter || undefined;\n        if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          this.delegate.formSubmitted(form, submitter);\n        }\n      }\n    });\n    this.delegate = delegate;\n    this.eventTarget = eventTarget;\n  }\n  start() {\n    if (!this.started) {\n      this.eventTarget.addEventListener(\"submit\", this.submitCaptured, true);\n      this.started = true;\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.eventTarget.removeEventListener(\"submit\", this.submitCaptured, true);\n      this.started = false;\n    }\n  }\n}\nfunction submissionDoesNotDismissDialog(form, submitter) {\n  const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"formmethod\")) || form.getAttribute(\"method\");\n  return method != \"dialog\";\n}\nfunction submissionDoesNotTargetIFrame(form, submitter) {\n  if (submitter !== null && submitter !== void 0 && submitter.hasAttribute(\"formtarget\") || form.hasAttribute(\"target\")) {\n    const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"formtarget\")) || form.target;\n    for (const element of document.getElementsByName(target)) {\n      if (element instanceof HTMLIFrameElement) return false;\n    }\n    return true;\n  } else {\n    return true;\n  }\n}\nvar _resolveRenderPromise = /*#__PURE__*/new WeakMap();\nvar _resolveInterceptionPromise = /*#__PURE__*/new WeakMap();\nclass View {\n  constructor(delegate, element) {\n    _classPrivateFieldInitSpec(this, _resolveRenderPromise, _value => {});\n    _classPrivateFieldInitSpec(this, _resolveInterceptionPromise, _value => {});\n    this.delegate = delegate;\n    this.element = element;\n  }\n\n  // Scrolling\n\n  scrollToAnchor(anchor) {\n    const element = this.snapshot.getElementForAnchor(anchor);\n    if (element) {\n      this.scrollToElement(element);\n      this.focusElement(element);\n    } else {\n      this.scrollToPosition({\n        x: 0,\n        y: 0\n      });\n    }\n  }\n  scrollToAnchorFromLocation(location) {\n    this.scrollToAnchor(getAnchor(location));\n  }\n  scrollToElement(element) {\n    element.scrollIntoView();\n  }\n  focusElement(element) {\n    if (element instanceof HTMLElement) {\n      if (element.hasAttribute(\"tabindex\")) {\n        element.focus();\n      } else {\n        element.setAttribute(\"tabindex\", \"-1\");\n        element.focus();\n        element.removeAttribute(\"tabindex\");\n      }\n    }\n  }\n  scrollToPosition(_ref) {\n    let {\n      x,\n      y\n    } = _ref;\n    this.scrollRoot.scrollTo(x, y);\n  }\n  scrollToTop() {\n    this.scrollToPosition({\n      x: 0,\n      y: 0\n    });\n  }\n  get scrollRoot() {\n    return window;\n  }\n\n  // Rendering\n\n  async render(renderer) {\n    const {\n      isPreview,\n      shouldRender,\n      willRender,\n      newSnapshot: snapshot\n    } = renderer;\n\n    // A workaround to ignore tracked element mismatch reloads when performing\n    // a promoted Visit from a frame navigation\n    const shouldInvalidate = willRender;\n    if (shouldRender) {\n      try {\n        this.renderPromise = new Promise(resolve => _classPrivateFieldSet(_resolveRenderPromise, this, resolve));\n        this.renderer = renderer;\n        await this.prepareToRenderSnapshot(renderer);\n        const renderInterception = new Promise(resolve => _classPrivateFieldSet(_resolveInterceptionPromise, this, resolve));\n        const options = {\n          resume: _classPrivateFieldGet(_resolveInterceptionPromise, this),\n          render: this.renderer.renderElement,\n          renderMethod: this.renderer.renderMethod\n        };\n        const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);\n        if (!immediateRender) await renderInterception;\n        await this.renderSnapshot(renderer);\n        this.delegate.viewRenderedSnapshot(snapshot, isPreview, this.renderer.renderMethod);\n        this.delegate.preloadOnLoadLinksForView(this.element);\n        this.finishRenderingSnapshot(renderer);\n      } finally {\n        delete this.renderer;\n        _classPrivateFieldGet(_resolveRenderPromise, this).call(this, undefined);\n        delete this.renderPromise;\n      }\n    } else if (shouldInvalidate) {\n      this.invalidate(renderer.reloadReason);\n    }\n  }\n  invalidate(reason) {\n    this.delegate.viewInvalidated(reason);\n  }\n  async prepareToRenderSnapshot(renderer) {\n    this.markAsPreview(renderer.isPreview);\n    await renderer.prepareToRender();\n  }\n  markAsPreview(isPreview) {\n    if (isPreview) {\n      this.element.setAttribute(\"data-turbo-preview\", \"\");\n    } else {\n      this.element.removeAttribute(\"data-turbo-preview\");\n    }\n  }\n  markVisitDirection(direction) {\n    this.element.setAttribute(\"data-turbo-visit-direction\", direction);\n  }\n  unmarkVisitDirection() {\n    this.element.removeAttribute(\"data-turbo-visit-direction\");\n  }\n  async renderSnapshot(renderer) {\n    await renderer.render();\n  }\n  finishRenderingSnapshot(renderer) {\n    renderer.finishRendering();\n  }\n}\nclass FrameView extends View {\n  missing() {\n    this.element.innerHTML = `<strong class=\"turbo-frame-error\">Content missing</strong>`;\n  }\n  get snapshot() {\n    return new Snapshot(this.element);\n  }\n}\nclass LinkInterceptor {\n  constructor(delegate, element) {\n    _defineProperty(this, \"clickBubbled\", event => {\n      if (this.respondsToEventTarget(event.target)) {\n        this.clickEvent = event;\n      } else {\n        delete this.clickEvent;\n      }\n    });\n    _defineProperty(this, \"linkClicked\", event => {\n      if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {\n        if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {\n          this.clickEvent.preventDefault();\n          event.preventDefault();\n          this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);\n        }\n      }\n      delete this.clickEvent;\n    });\n    _defineProperty(this, \"willVisit\", _event => {\n      delete this.clickEvent;\n    });\n    this.delegate = delegate;\n    this.element = element;\n  }\n  start() {\n    this.element.addEventListener(\"click\", this.clickBubbled);\n    document.addEventListener(\"turbo:click\", this.linkClicked);\n    document.addEventListener(\"turbo:before-visit\", this.willVisit);\n  }\n  stop() {\n    this.element.removeEventListener(\"click\", this.clickBubbled);\n    document.removeEventListener(\"turbo:click\", this.linkClicked);\n    document.removeEventListener(\"turbo:before-visit\", this.willVisit);\n  }\n  respondsToEventTarget(target) {\n    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;\n    return element && element.closest(\"turbo-frame, html\") == this.element;\n  }\n}\nclass LinkClickObserver {\n  constructor(delegate, eventTarget) {\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"clickCaptured\", () => {\n      this.eventTarget.removeEventListener(\"click\", this.clickBubbled, false);\n      this.eventTarget.addEventListener(\"click\", this.clickBubbled, false);\n    });\n    _defineProperty(this, \"clickBubbled\", event => {\n      if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {\n        const target = event.composedPath && event.composedPath()[0] || event.target;\n        const link = findLinkFromClickTarget(target);\n        if (link && doesNotTargetIFrame(link)) {\n          const location = getLocationForLink(link);\n          if (this.delegate.willFollowLinkToLocation(link, location, event)) {\n            event.preventDefault();\n            this.delegate.followedLinkToLocation(link, location);\n          }\n        }\n      }\n    });\n    this.delegate = delegate;\n    this.eventTarget = eventTarget;\n  }\n  start() {\n    if (!this.started) {\n      this.eventTarget.addEventListener(\"click\", this.clickCaptured, true);\n      this.started = true;\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.eventTarget.removeEventListener(\"click\", this.clickCaptured, true);\n      this.started = false;\n    }\n  }\n  clickEventIsSignificant(event) {\n    return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);\n  }\n}\nclass FormLinkClickObserver {\n  constructor(delegate, element) {\n    this.delegate = delegate;\n    this.linkInterceptor = new LinkClickObserver(this, element);\n  }\n  start() {\n    this.linkInterceptor.start();\n  }\n  stop() {\n    this.linkInterceptor.stop();\n  }\n\n  // Link hover observer delegate\n\n  canPrefetchRequestToLocation(link, location) {\n    return false;\n  }\n  prefetchAndCacheRequestToLocation(link, location) {\n    return;\n  }\n\n  // Link click observer delegate\n\n  willFollowLinkToLocation(link, location, originalEvent) {\n    return this.delegate.willSubmitFormLinkToLocation(link, location, originalEvent) && (link.hasAttribute(\"data-turbo-method\") || link.hasAttribute(\"data-turbo-stream\"));\n  }\n  followedLinkToLocation(link, location) {\n    const form = document.createElement(\"form\");\n    const type = \"hidden\";\n    for (const [name, value] of location.searchParams) {\n      form.append(Object.assign(document.createElement(\"input\"), {\n        type,\n        name,\n        value\n      }));\n    }\n    const action = Object.assign(location, {\n      search: \"\"\n    });\n    form.setAttribute(\"data-turbo\", \"true\");\n    form.setAttribute(\"action\", action.href);\n    form.setAttribute(\"hidden\", \"\");\n    const method = link.getAttribute(\"data-turbo-method\");\n    if (method) form.setAttribute(\"method\", method);\n    const turboFrame = link.getAttribute(\"data-turbo-frame\");\n    if (turboFrame) form.setAttribute(\"data-turbo-frame\", turboFrame);\n    const turboAction = getVisitAction(link);\n    if (turboAction) form.setAttribute(\"data-turbo-action\", turboAction);\n    const turboConfirm = link.getAttribute(\"data-turbo-confirm\");\n    if (turboConfirm) form.setAttribute(\"data-turbo-confirm\", turboConfirm);\n    const turboStream = link.hasAttribute(\"data-turbo-stream\");\n    if (turboStream) form.setAttribute(\"data-turbo-stream\", \"\");\n    this.delegate.submittedFormLinkToLocation(link, location, form);\n    document.body.appendChild(form);\n    form.addEventListener(\"turbo:submit-end\", () => form.remove(), {\n      once: true\n    });\n    requestAnimationFrame(() => form.requestSubmit());\n  }\n}\nclass Bardo {\n  static async preservingPermanentElements(delegate, permanentElementMap, callback) {\n    const bardo = new this(delegate, permanentElementMap);\n    bardo.enter();\n    await callback();\n    bardo.leave();\n  }\n  constructor(delegate, permanentElementMap) {\n    this.delegate = delegate;\n    this.permanentElementMap = permanentElementMap;\n  }\n  enter() {\n    for (const id in this.permanentElementMap) {\n      const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];\n      this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);\n      this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);\n    }\n  }\n  leave() {\n    for (const id in this.permanentElementMap) {\n      const [currentPermanentElement] = this.permanentElementMap[id];\n      this.replaceCurrentPermanentElementWithClone(currentPermanentElement);\n      this.replacePlaceholderWithPermanentElement(currentPermanentElement);\n      this.delegate.leavingBardo(currentPermanentElement);\n    }\n  }\n  replaceNewPermanentElementWithPlaceholder(permanentElement) {\n    const placeholder = createPlaceholderForPermanentElement(permanentElement);\n    permanentElement.replaceWith(placeholder);\n  }\n  replaceCurrentPermanentElementWithClone(permanentElement) {\n    const clone = permanentElement.cloneNode(true);\n    permanentElement.replaceWith(clone);\n  }\n  replacePlaceholderWithPermanentElement(permanentElement) {\n    const placeholder = this.getPlaceholderById(permanentElement.id);\n    placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);\n  }\n  getPlaceholderById(id) {\n    return this.placeholders.find(element => element.content == id);\n  }\n  get placeholders() {\n    return [...document.querySelectorAll(\"meta[name=turbo-permanent-placeholder][content]\")];\n  }\n}\nfunction createPlaceholderForPermanentElement(permanentElement) {\n  const element = document.createElement(\"meta\");\n  element.setAttribute(\"name\", \"turbo-permanent-placeholder\");\n  element.setAttribute(\"content\", permanentElement.id);\n  return element;\n}\nvar _activeElement = /*#__PURE__*/new WeakMap();\nclass Renderer {\n  constructor(currentSnapshot, newSnapshot, renderElement, isPreview) {\n    let willRender = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    _classPrivateFieldInitSpec(this, _activeElement, null);\n    this.currentSnapshot = currentSnapshot;\n    this.newSnapshot = newSnapshot;\n    this.isPreview = isPreview;\n    this.willRender = willRender;\n    this.renderElement = renderElement;\n    this.promise = new Promise((resolve, reject) => this.resolvingFunctions = {\n      resolve,\n      reject\n    });\n  }\n  get shouldRender() {\n    return true;\n  }\n  get reloadReason() {\n    return;\n  }\n  prepareToRender() {\n    return;\n  }\n  render() {\n    // Abstract method\n  }\n  finishRendering() {\n    if (this.resolvingFunctions) {\n      this.resolvingFunctions.resolve();\n      delete this.resolvingFunctions;\n    }\n  }\n  async preservingPermanentElements(callback) {\n    await Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);\n  }\n  focusFirstAutofocusableElement() {\n    const element = this.connectedSnapshot.firstAutofocusableElement;\n    if (element) {\n      element.focus();\n    }\n  }\n\n  // Bardo delegate\n\n  enteringBardo(currentPermanentElement) {\n    if (_classPrivateFieldGet(_activeElement, this)) return;\n    if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {\n      _classPrivateFieldSet(_activeElement, this, this.currentSnapshot.activeElement);\n    }\n  }\n  leavingBardo(currentPermanentElement) {\n    if (currentPermanentElement.contains(_classPrivateFieldGet(_activeElement, this)) && _classPrivateFieldGet(_activeElement, this) instanceof HTMLElement) {\n      _classPrivateFieldGet(_activeElement, this).focus();\n      _classPrivateFieldSet(_activeElement, this, null);\n    }\n  }\n  get connectedSnapshot() {\n    return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;\n  }\n  get currentElement() {\n    return this.currentSnapshot.element;\n  }\n  get newElement() {\n    return this.newSnapshot.element;\n  }\n  get permanentElementMap() {\n    return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);\n  }\n  get renderMethod() {\n    return \"replace\";\n  }\n}\nclass FrameRenderer extends Renderer {\n  static renderElement(currentElement, newElement) {\n    var _frameElement$ownerDo;\n    const destinationRange = document.createRange();\n    destinationRange.selectNodeContents(currentElement);\n    destinationRange.deleteContents();\n    const frameElement = newElement;\n    const sourceRange = (_frameElement$ownerDo = frameElement.ownerDocument) === null || _frameElement$ownerDo === void 0 ? void 0 : _frameElement$ownerDo.createRange();\n    if (sourceRange) {\n      sourceRange.selectNodeContents(frameElement);\n      currentElement.appendChild(sourceRange.extractContents());\n    }\n  }\n  constructor(delegate, currentSnapshot, newSnapshot, renderElement, isPreview) {\n    let willRender = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);\n    this.delegate = delegate;\n  }\n  get shouldRender() {\n    return true;\n  }\n  async render() {\n    await nextRepaint();\n    this.preservingPermanentElements(() => {\n      this.loadFrameElement();\n    });\n    this.scrollFrameIntoView();\n    await nextRepaint();\n    this.focusFirstAutofocusableElement();\n    await nextRepaint();\n    this.activateScriptElements();\n  }\n  loadFrameElement() {\n    this.delegate.willRenderFrame(this.currentElement, this.newElement);\n    this.renderElement(this.currentElement, this.newElement);\n  }\n  scrollFrameIntoView() {\n    if (this.currentElement.autoscroll || this.newElement.autoscroll) {\n      const element = this.currentElement.firstElementChild;\n      const block = readScrollLogicalPosition(this.currentElement.getAttribute(\"data-autoscroll-block\"), \"end\");\n      const behavior = readScrollBehavior(this.currentElement.getAttribute(\"data-autoscroll-behavior\"), \"auto\");\n      if (element) {\n        element.scrollIntoView({\n          block,\n          behavior\n        });\n        return true;\n      }\n    }\n    return false;\n  }\n  activateScriptElements() {\n    for (const inertScriptElement of this.newScriptElements) {\n      const activatedScriptElement = activateScriptElement(inertScriptElement);\n      inertScriptElement.replaceWith(activatedScriptElement);\n    }\n  }\n  get newScriptElements() {\n    return this.currentElement.querySelectorAll(\"script\");\n  }\n}\nfunction readScrollLogicalPosition(value, defaultValue) {\n  if (value == \"end\" || value == \"start\" || value == \"center\" || value == \"nearest\") {\n    return value;\n  } else {\n    return defaultValue;\n  }\n}\nfunction readScrollBehavior(value, defaultValue) {\n  if (value == \"auto\" || value == \"smooth\") {\n    return value;\n  } else {\n    return defaultValue;\n  }\n}\nclass ProgressBar {\n  /*ms*/\n\n  static get defaultCSS() {\n    return unindent`\n      .turbo-progress-bar {\n        position: fixed;\n        display: block;\n        top: 0;\n        left: 0;\n        height: 3px;\n        background: #0076ff;\n        z-index: 2147483647;\n        transition:\n          width ${ProgressBar.animationDuration}ms ease-out,\n          opacity ${ProgressBar.animationDuration / 2}ms ${ProgressBar.animationDuration / 2}ms ease-in;\n        transform: translate3d(0, 0, 0);\n      }\n    `;\n  }\n  constructor() {\n    _defineProperty(this, \"hiding\", false);\n    _defineProperty(this, \"value\", 0);\n    _defineProperty(this, \"visible\", false);\n    _defineProperty(this, \"trickle\", () => {\n      this.setValue(this.value + Math.random() / 100);\n    });\n    this.stylesheetElement = this.createStylesheetElement();\n    this.progressElement = this.createProgressElement();\n    this.installStylesheetElement();\n    this.setValue(0);\n  }\n  show() {\n    if (!this.visible) {\n      this.visible = true;\n      this.installProgressElement();\n      this.startTrickling();\n    }\n  }\n  hide() {\n    if (this.visible && !this.hiding) {\n      this.hiding = true;\n      this.fadeProgressElement(() => {\n        this.uninstallProgressElement();\n        this.stopTrickling();\n        this.visible = false;\n        this.hiding = false;\n      });\n    }\n  }\n  setValue(value) {\n    this.value = value;\n    this.refresh();\n  }\n\n  // Private\n\n  installStylesheetElement() {\n    document.head.insertBefore(this.stylesheetElement, document.head.firstChild);\n  }\n  installProgressElement() {\n    this.progressElement.style.width = \"0\";\n    this.progressElement.style.opacity = \"1\";\n    document.documentElement.insertBefore(this.progressElement, document.body);\n    this.refresh();\n  }\n  fadeProgressElement(callback) {\n    this.progressElement.style.opacity = \"0\";\n    setTimeout(callback, ProgressBar.animationDuration * 1.5);\n  }\n  uninstallProgressElement() {\n    if (this.progressElement.parentNode) {\n      document.documentElement.removeChild(this.progressElement);\n    }\n  }\n  startTrickling() {\n    if (!this.trickleInterval) {\n      this.trickleInterval = window.setInterval(this.trickle, ProgressBar.animationDuration);\n    }\n  }\n  stopTrickling() {\n    window.clearInterval(this.trickleInterval);\n    delete this.trickleInterval;\n  }\n  refresh() {\n    requestAnimationFrame(() => {\n      this.progressElement.style.width = `${10 + this.value * 90}%`;\n    });\n  }\n  createStylesheetElement() {\n    const element = document.createElement(\"style\");\n    element.type = \"text/css\";\n    element.textContent = ProgressBar.defaultCSS;\n    if (this.cspNonce) {\n      element.nonce = this.cspNonce;\n    }\n    return element;\n  }\n  createProgressElement() {\n    const element = document.createElement(\"div\");\n    element.className = \"turbo-progress-bar\";\n    return element;\n  }\n  get cspNonce() {\n    return getMetaContent(\"csp-nonce\");\n  }\n}\n_defineProperty(ProgressBar, \"animationDuration\", 300);\nclass HeadSnapshot extends Snapshot {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"detailsByOuterHTML\", this.children.filter(element => !elementIsNoscript(element)).map(element => elementWithoutNonce(element)).reduce((result, element) => {\n      const {\n        outerHTML\n      } = element;\n      const details = outerHTML in result ? result[outerHTML] : {\n        type: elementType(element),\n        tracked: elementIsTracked(element),\n        elements: []\n      };\n      return {\n        ...result,\n        [outerHTML]: {\n          ...details,\n          elements: [...details.elements, element]\n        }\n      };\n    }, {}));\n  }\n  get trackedElementSignature() {\n    return Object.keys(this.detailsByOuterHTML).filter(outerHTML => this.detailsByOuterHTML[outerHTML].tracked).join(\"\");\n  }\n  getScriptElementsNotInSnapshot(snapshot) {\n    return this.getElementsMatchingTypeNotInSnapshot(\"script\", snapshot);\n  }\n  getStylesheetElementsNotInSnapshot(snapshot) {\n    return this.getElementsMatchingTypeNotInSnapshot(\"stylesheet\", snapshot);\n  }\n  getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {\n    return Object.keys(this.detailsByOuterHTML).filter(outerHTML => !(outerHTML in snapshot.detailsByOuterHTML)).map(outerHTML => this.detailsByOuterHTML[outerHTML]).filter(_ref2 => {\n      let {\n        type\n      } = _ref2;\n      return type == matchedType;\n    }).map(_ref3 => {\n      let {\n        elements: [element]\n      } = _ref3;\n      return element;\n    });\n  }\n  get provisionalElements() {\n    return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {\n      const {\n        type,\n        tracked,\n        elements\n      } = this.detailsByOuterHTML[outerHTML];\n      if (type == null && !tracked) {\n        return [...result, ...elements];\n      } else if (elements.length > 1) {\n        return [...result, ...elements.slice(1)];\n      } else {\n        return result;\n      }\n    }, []);\n  }\n  getMetaValue(name) {\n    const element = this.findMetaElementByName(name);\n    return element ? element.getAttribute(\"content\") : null;\n  }\n  findMetaElementByName(name) {\n    return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {\n      const {\n        elements: [element]\n      } = this.detailsByOuterHTML[outerHTML];\n      return elementIsMetaElementWithName(element, name) ? element : result;\n    }, undefined | undefined);\n  }\n}\nfunction elementType(element) {\n  if (elementIsScript(element)) {\n    return \"script\";\n  } else if (elementIsStylesheet(element)) {\n    return \"stylesheet\";\n  }\n}\nfunction elementIsTracked(element) {\n  return element.getAttribute(\"data-turbo-track\") == \"reload\";\n}\nfunction elementIsScript(element) {\n  const tagName = element.localName;\n  return tagName == \"script\";\n}\nfunction elementIsNoscript(element) {\n  const tagName = element.localName;\n  return tagName == \"noscript\";\n}\nfunction elementIsStylesheet(element) {\n  const tagName = element.localName;\n  return tagName == \"style\" || tagName == \"link\" && element.getAttribute(\"rel\") == \"stylesheet\";\n}\nfunction elementIsMetaElementWithName(element, name) {\n  const tagName = element.localName;\n  return tagName == \"meta\" && element.getAttribute(\"name\") == name;\n}\nfunction elementWithoutNonce(element) {\n  if (element.hasAttribute(\"nonce\")) {\n    element.setAttribute(\"nonce\", \"\");\n  }\n  return element;\n}\nclass PageSnapshot extends Snapshot {\n  static fromHTMLString() {\n    let html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return this.fromDocument(parseHTMLDocument(html));\n  }\n  static fromElement(element) {\n    return this.fromDocument(element.ownerDocument);\n  }\n  static fromDocument(_ref4) {\n    let {\n      documentElement,\n      body,\n      head\n    } = _ref4;\n    return new this(documentElement, body, new HeadSnapshot(head));\n  }\n  constructor(documentElement, body, headSnapshot) {\n    super(body);\n    this.documentElement = documentElement;\n    this.headSnapshot = headSnapshot;\n  }\n  clone() {\n    const clonedElement = this.element.cloneNode(true);\n    const selectElements = this.element.querySelectorAll(\"select\");\n    const clonedSelectElements = clonedElement.querySelectorAll(\"select\");\n    for (const [index, source] of selectElements.entries()) {\n      const clone = clonedSelectElements[index];\n      for (const option of clone.selectedOptions) option.selected = false;\n      for (const option of source.selectedOptions) clone.options[option.index].selected = true;\n    }\n    for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type=\"password\"]')) {\n      clonedPasswordInput.value = \"\";\n    }\n    return new PageSnapshot(this.documentElement, clonedElement, this.headSnapshot);\n  }\n  get lang() {\n    return this.documentElement.getAttribute(\"lang\");\n  }\n  get headElement() {\n    return this.headSnapshot.element;\n  }\n  get rootLocation() {\n    const root = this.getSetting(\"root\") ?? \"/\";\n    return expandURL(root);\n  }\n  get cacheControlValue() {\n    return this.getSetting(\"cache-control\");\n  }\n  get isPreviewable() {\n    return this.cacheControlValue != \"no-preview\";\n  }\n  get isCacheable() {\n    return this.cacheControlValue != \"no-cache\";\n  }\n  get isVisitable() {\n    return this.getSetting(\"visit-control\") != \"reload\";\n  }\n  get prefersViewTransitions() {\n    return this.headSnapshot.getMetaValue(\"view-transition\") === \"same-origin\";\n  }\n  get shouldMorphPage() {\n    return this.getSetting(\"refresh-method\") === \"morph\";\n  }\n  get shouldPreserveScrollPosition() {\n    return this.getSetting(\"refresh-scroll\") === \"preserve\";\n  }\n\n  // Private\n\n  getSetting(name) {\n    return this.headSnapshot.getMetaValue(`turbo-${name}`);\n  }\n}\nvar _viewTransitionStarted = /*#__PURE__*/new WeakMap();\nvar _lastOperation = /*#__PURE__*/new WeakMap();\nclass ViewTransitioner {\n  constructor() {\n    _classPrivateFieldInitSpec(this, _viewTransitionStarted, false);\n    _classPrivateFieldInitSpec(this, _lastOperation, Promise.resolve());\n  }\n  renderChange(useViewTransition, render) {\n    if (useViewTransition && this.viewTransitionsAvailable && !_classPrivateFieldGet(_viewTransitionStarted, this)) {\n      _classPrivateFieldSet(_viewTransitionStarted, this, true);\n      _classPrivateFieldSet(_lastOperation, this, _classPrivateFieldGet(_lastOperation, this).then(async () => {\n        await document.startViewTransition(render).finished;\n      }));\n    } else {\n      _classPrivateFieldSet(_lastOperation, this, _classPrivateFieldGet(_lastOperation, this).then(render));\n    }\n    return _classPrivateFieldGet(_lastOperation, this);\n  }\n  get viewTransitionsAvailable() {\n    return document.startViewTransition;\n  }\n}\nconst defaultOptions = {\n  action: \"advance\",\n  historyChanged: false,\n  visitCachedSnapshot: () => {},\n  willRender: true,\n  updateHistory: true,\n  shouldCacheSnapshot: true,\n  acceptsStreamResponse: false\n};\nconst TimingMetric = {\n  visitStart: \"visitStart\",\n  requestStart: \"requestStart\",\n  requestEnd: \"requestEnd\",\n  visitEnd: \"visitEnd\"\n};\nconst VisitState = {\n  initialized: \"initialized\",\n  started: \"started\",\n  canceled: \"canceled\",\n  failed: \"failed\",\n  completed: \"completed\"\n};\nconst SystemStatusCode = {\n  networkFailure: 0,\n  timeoutFailure: -1,\n  contentTypeMismatch: -2\n};\nconst Direction = {\n  advance: \"forward\",\n  restore: \"back\",\n  replace: \"none\"\n};\nclass Visit {\n  constructor(delegate, location, restorationIdentifier) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _defineProperty(this, \"identifier\", uuid());\n    // Required by turbo-ios\n    _defineProperty(this, \"timingMetrics\", {});\n    _defineProperty(this, \"followedRedirect\", false);\n    _defineProperty(this, \"historyChanged\", false);\n    _defineProperty(this, \"scrolled\", false);\n    _defineProperty(this, \"shouldCacheSnapshot\", true);\n    _defineProperty(this, \"acceptsStreamResponse\", false);\n    _defineProperty(this, \"snapshotCached\", false);\n    _defineProperty(this, \"state\", VisitState.initialized);\n    _defineProperty(this, \"viewTransitioner\", new ViewTransitioner());\n    this.delegate = delegate;\n    this.location = location;\n    this.restorationIdentifier = restorationIdentifier || uuid();\n    const {\n      action,\n      historyChanged,\n      referrer,\n      snapshot,\n      snapshotHTML,\n      response,\n      visitCachedSnapshot,\n      willRender,\n      updateHistory,\n      shouldCacheSnapshot,\n      acceptsStreamResponse,\n      direction\n    } = {\n      ...defaultOptions,\n      ...options\n    };\n    this.action = action;\n    this.historyChanged = historyChanged;\n    this.referrer = referrer;\n    this.snapshot = snapshot;\n    this.snapshotHTML = snapshotHTML;\n    this.response = response;\n    this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);\n    this.isPageRefresh = this.view.isPageRefresh(this);\n    this.visitCachedSnapshot = visitCachedSnapshot;\n    this.willRender = willRender;\n    this.updateHistory = updateHistory;\n    this.scrolled = !willRender;\n    this.shouldCacheSnapshot = shouldCacheSnapshot;\n    this.acceptsStreamResponse = acceptsStreamResponse;\n    this.direction = direction || Direction[action];\n  }\n  get adapter() {\n    return this.delegate.adapter;\n  }\n  get view() {\n    return this.delegate.view;\n  }\n  get history() {\n    return this.delegate.history;\n  }\n  get restorationData() {\n    return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);\n  }\n  get silent() {\n    return this.isSamePage;\n  }\n  start() {\n    if (this.state == VisitState.initialized) {\n      this.recordTimingMetric(TimingMetric.visitStart);\n      this.state = VisitState.started;\n      this.adapter.visitStarted(this);\n      this.delegate.visitStarted(this);\n    }\n  }\n  cancel() {\n    if (this.state == VisitState.started) {\n      if (this.request) {\n        this.request.cancel();\n      }\n      this.cancelRender();\n      this.state = VisitState.canceled;\n    }\n  }\n  complete() {\n    if (this.state == VisitState.started) {\n      this.recordTimingMetric(TimingMetric.visitEnd);\n      this.adapter.visitCompleted(this);\n      this.state = VisitState.completed;\n      this.followRedirect();\n      if (!this.followedRedirect) {\n        this.delegate.visitCompleted(this);\n      }\n    }\n  }\n  fail() {\n    if (this.state == VisitState.started) {\n      this.state = VisitState.failed;\n      this.adapter.visitFailed(this);\n      this.delegate.visitCompleted(this);\n    }\n  }\n  changeHistory() {\n    if (!this.historyChanged && this.updateHistory) {\n      var _this$referrer;\n      const actionForHistory = this.location.href === ((_this$referrer = this.referrer) === null || _this$referrer === void 0 ? void 0 : _this$referrer.href) ? \"replace\" : this.action;\n      const method = getHistoryMethodForAction(actionForHistory);\n      this.history.update(method, this.location, this.restorationIdentifier);\n      this.historyChanged = true;\n    }\n  }\n  issueRequest() {\n    if (this.hasPreloadedResponse()) {\n      this.simulateRequest();\n    } else if (this.shouldIssueRequest() && !this.request) {\n      this.request = new FetchRequest(this, FetchMethod.get, this.location);\n      this.request.perform();\n    }\n  }\n  simulateRequest() {\n    if (this.response) {\n      this.startRequest();\n      this.recordResponse();\n      this.finishRequest();\n    }\n  }\n  startRequest() {\n    this.recordTimingMetric(TimingMetric.requestStart);\n    this.adapter.visitRequestStarted(this);\n  }\n  recordResponse() {\n    let response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.response;\n    this.response = response;\n    if (response) {\n      const {\n        statusCode\n      } = response;\n      if (isSuccessful(statusCode)) {\n        this.adapter.visitRequestCompleted(this);\n      } else {\n        this.adapter.visitRequestFailedWithStatusCode(this, statusCode);\n      }\n    }\n  }\n  finishRequest() {\n    this.recordTimingMetric(TimingMetric.requestEnd);\n    this.adapter.visitRequestFinished(this);\n  }\n  loadResponse() {\n    if (this.response) {\n      const {\n        statusCode,\n        responseHTML\n      } = this.response;\n      this.render(async () => {\n        if (this.shouldCacheSnapshot) this.cacheSnapshot();\n        if (this.view.renderPromise) await this.view.renderPromise;\n        if (isSuccessful(statusCode) && responseHTML != null) {\n          const snapshot = PageSnapshot.fromHTMLString(responseHTML);\n          await this.renderPageSnapshot(snapshot, false);\n          this.adapter.visitRendered(this);\n          this.complete();\n        } else {\n          await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);\n          this.adapter.visitRendered(this);\n          this.fail();\n        }\n      });\n    }\n  }\n  getCachedSnapshot() {\n    const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();\n    if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {\n      if (this.action == \"restore\" || snapshot.isPreviewable) {\n        return snapshot;\n      }\n    }\n  }\n  getPreloadedSnapshot() {\n    if (this.snapshotHTML) {\n      return PageSnapshot.fromHTMLString(this.snapshotHTML);\n    }\n  }\n  hasCachedSnapshot() {\n    return this.getCachedSnapshot() != null;\n  }\n  loadCachedSnapshot() {\n    const snapshot = this.getCachedSnapshot();\n    if (snapshot) {\n      const isPreview = this.shouldIssueRequest();\n      this.render(async () => {\n        this.cacheSnapshot();\n        if (this.isSamePage || this.isPageRefresh) {\n          this.adapter.visitRendered(this);\n        } else {\n          if (this.view.renderPromise) await this.view.renderPromise;\n          await this.renderPageSnapshot(snapshot, isPreview);\n          this.adapter.visitRendered(this);\n          if (!isPreview) {\n            this.complete();\n          }\n        }\n      });\n    }\n  }\n  followRedirect() {\n    var _this$response;\n    if (this.redirectedToLocation && !this.followedRedirect && (_this$response = this.response) !== null && _this$response !== void 0 && _this$response.redirected) {\n      this.adapter.visitProposedToLocation(this.redirectedToLocation, {\n        action: \"replace\",\n        response: this.response,\n        shouldCacheSnapshot: false,\n        willRender: false\n      });\n      this.followedRedirect = true;\n    }\n  }\n  goToSamePageAnchor() {\n    if (this.isSamePage) {\n      this.render(async () => {\n        this.cacheSnapshot();\n        this.performScroll();\n        this.changeHistory();\n        this.adapter.visitRendered(this);\n      });\n    }\n  }\n\n  // Fetch request delegate\n\n  prepareRequest(request) {\n    if (this.acceptsStreamResponse) {\n      request.acceptResponseType(StreamMessage.contentType);\n    }\n  }\n  requestStarted() {\n    this.startRequest();\n  }\n  requestPreventedHandlingResponse(_request, _response) {}\n  async requestSucceededWithResponse(request, response) {\n    const responseHTML = await response.responseHTML;\n    const {\n      redirected,\n      statusCode\n    } = response;\n    if (responseHTML == undefined) {\n      this.recordResponse({\n        statusCode: SystemStatusCode.contentTypeMismatch,\n        redirected\n      });\n    } else {\n      this.redirectedToLocation = response.redirected ? response.location : undefined;\n      this.recordResponse({\n        statusCode: statusCode,\n        responseHTML,\n        redirected\n      });\n    }\n  }\n  async requestFailedWithResponse(request, response) {\n    const responseHTML = await response.responseHTML;\n    const {\n      redirected,\n      statusCode\n    } = response;\n    if (responseHTML == undefined) {\n      this.recordResponse({\n        statusCode: SystemStatusCode.contentTypeMismatch,\n        redirected\n      });\n    } else {\n      this.recordResponse({\n        statusCode: statusCode,\n        responseHTML,\n        redirected\n      });\n    }\n  }\n  requestErrored(_request, _error) {\n    this.recordResponse({\n      statusCode: SystemStatusCode.networkFailure,\n      redirected: false\n    });\n  }\n  requestFinished() {\n    this.finishRequest();\n  }\n\n  // Scrolling\n\n  performScroll() {\n    if (!this.scrolled && !this.view.forceReloaded && !this.view.shouldPreserveScrollPosition(this)) {\n      if (this.action == \"restore\") {\n        this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();\n      } else {\n        this.scrollToAnchor() || this.view.scrollToTop();\n      }\n      if (this.isSamePage) {\n        this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);\n      }\n      this.scrolled = true;\n    }\n  }\n  scrollToRestoredPosition() {\n    const {\n      scrollPosition\n    } = this.restorationData;\n    if (scrollPosition) {\n      this.view.scrollToPosition(scrollPosition);\n      return true;\n    }\n  }\n  scrollToAnchor() {\n    const anchor = getAnchor(this.location);\n    if (anchor != null) {\n      this.view.scrollToAnchor(anchor);\n      return true;\n    }\n  }\n\n  // Instrumentation\n\n  recordTimingMetric(metric) {\n    this.timingMetrics[metric] = new Date().getTime();\n  }\n  getTimingMetrics() {\n    return {\n      ...this.timingMetrics\n    };\n  }\n\n  // Private\n\n  getHistoryMethodForAction(action) {\n    switch (action) {\n      case \"replace\":\n        return history.replaceState;\n      case \"advance\":\n      case \"restore\":\n        return history.pushState;\n    }\n  }\n  hasPreloadedResponse() {\n    return typeof this.response == \"object\";\n  }\n  shouldIssueRequest() {\n    if (this.isSamePage) {\n      return false;\n    } else if (this.action == \"restore\") {\n      return !this.hasCachedSnapshot();\n    } else {\n      return this.willRender;\n    }\n  }\n  cacheSnapshot() {\n    if (!this.snapshotCached) {\n      this.view.cacheSnapshot(this.snapshot).then(snapshot => snapshot && this.visitCachedSnapshot(snapshot));\n      this.snapshotCached = true;\n    }\n  }\n  async render(callback) {\n    this.cancelRender();\n    this.frame = await nextRepaint();\n    await callback();\n    delete this.frame;\n  }\n  async renderPageSnapshot(snapshot, isPreview) {\n    await this.viewTransitioner.renderChange(this.view.shouldTransitionTo(snapshot), async () => {\n      await this.view.renderPage(snapshot, isPreview, this.willRender, this);\n      this.performScroll();\n    });\n  }\n  cancelRender() {\n    if (this.frame) {\n      cancelAnimationFrame(this.frame);\n      delete this.frame;\n    }\n  }\n}\nfunction isSuccessful(statusCode) {\n  return statusCode >= 200 && statusCode < 300;\n}\nclass BrowserAdapter {\n  constructor(session) {\n    _defineProperty(this, \"progressBar\", new ProgressBar());\n    _defineProperty(this, \"showProgressBar\", () => {\n      this.progressBar.show();\n    });\n    this.session = session;\n  }\n  visitProposedToLocation(location, options) {\n    if (locationIsVisitable(location, this.navigator.rootLocation)) {\n      this.navigator.startVisit(location, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);\n    } else {\n      window.location.href = location.toString();\n    }\n  }\n  visitStarted(visit) {\n    this.location = visit.location;\n    visit.loadCachedSnapshot();\n    visit.issueRequest();\n    visit.goToSamePageAnchor();\n  }\n  visitRequestStarted(visit) {\n    this.progressBar.setValue(0);\n    if (visit.hasCachedSnapshot() || visit.action != \"restore\") {\n      this.showVisitProgressBarAfterDelay();\n    } else {\n      this.showProgressBar();\n    }\n  }\n  visitRequestCompleted(visit) {\n    visit.loadResponse();\n  }\n  visitRequestFailedWithStatusCode(visit, statusCode) {\n    switch (statusCode) {\n      case SystemStatusCode.networkFailure:\n      case SystemStatusCode.timeoutFailure:\n      case SystemStatusCode.contentTypeMismatch:\n        return this.reload({\n          reason: \"request_failed\",\n          context: {\n            statusCode\n          }\n        });\n      default:\n        return visit.loadResponse();\n    }\n  }\n  visitRequestFinished(_visit) {}\n  visitCompleted(_visit) {\n    this.progressBar.setValue(1);\n    this.hideVisitProgressBar();\n  }\n  pageInvalidated(reason) {\n    this.reload(reason);\n  }\n  visitFailed(_visit) {\n    this.progressBar.setValue(1);\n    this.hideVisitProgressBar();\n  }\n  visitRendered(_visit) {}\n\n  // Form Submission Delegate\n\n  formSubmissionStarted(_formSubmission) {\n    this.progressBar.setValue(0);\n    this.showFormProgressBarAfterDelay();\n  }\n  formSubmissionFinished(_formSubmission) {\n    this.progressBar.setValue(1);\n    this.hideFormProgressBar();\n  }\n\n  // Private\n\n  showVisitProgressBarAfterDelay() {\n    this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);\n  }\n  hideVisitProgressBar() {\n    this.progressBar.hide();\n    if (this.visitProgressBarTimeout != null) {\n      window.clearTimeout(this.visitProgressBarTimeout);\n      delete this.visitProgressBarTimeout;\n    }\n  }\n  showFormProgressBarAfterDelay() {\n    if (this.formProgressBarTimeout == null) {\n      this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);\n    }\n  }\n  hideFormProgressBar() {\n    this.progressBar.hide();\n    if (this.formProgressBarTimeout != null) {\n      window.clearTimeout(this.formProgressBarTimeout);\n      delete this.formProgressBarTimeout;\n    }\n  }\n  reload(reason) {\n    var _this$location;\n    dispatch(\"turbo:reload\", {\n      detail: reason\n    });\n    window.location.href = ((_this$location = this.location) === null || _this$location === void 0 ? void 0 : _this$location.toString()) || window.location.href;\n  }\n  get navigator() {\n    return this.session.navigator;\n  }\n}\nclass CacheObserver {\n  constructor() {\n    _defineProperty(this, \"selector\", \"[data-turbo-temporary]\");\n    _defineProperty(this, \"deprecatedSelector\", \"[data-turbo-cache=false]\");\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"removeTemporaryElements\", _event => {\n      for (const element of this.temporaryElements) {\n        element.remove();\n      }\n    });\n  }\n  start() {\n    if (!this.started) {\n      this.started = true;\n      addEventListener(\"turbo:before-cache\", this.removeTemporaryElements, false);\n    }\n  }\n  stop() {\n    if (this.started) {\n      this.started = false;\n      removeEventListener(\"turbo:before-cache\", this.removeTemporaryElements, false);\n    }\n  }\n  get temporaryElements() {\n    return [...document.querySelectorAll(this.selector), ...this.temporaryElementsWithDeprecation];\n  }\n  get temporaryElementsWithDeprecation() {\n    const elements = document.querySelectorAll(this.deprecatedSelector);\n    if (elements.length) {\n      console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`);\n    }\n    return [...elements];\n  }\n}\nvar _FrameRedirector_brand = /*#__PURE__*/new WeakSet();\nclass FrameRedirector {\n  constructor(session, _element2) {\n    _classPrivateMethodInitSpec(this, _FrameRedirector_brand);\n    this.session = session;\n    this.element = _element2;\n    this.linkInterceptor = new LinkInterceptor(this, _element2);\n    this.formSubmitObserver = new FormSubmitObserver(this, _element2);\n  }\n  start() {\n    this.linkInterceptor.start();\n    this.formSubmitObserver.start();\n  }\n  stop() {\n    this.linkInterceptor.stop();\n    this.formSubmitObserver.stop();\n  }\n\n  // Link interceptor delegate\n\n  shouldInterceptLinkClick(element, _location, _event) {\n    return _assertClassBrand(_FrameRedirector_brand, this, _shouldRedirect).call(this, element);\n  }\n  linkClickIntercepted(element, url, event) {\n    const frame = _assertClassBrand(_FrameRedirector_brand, this, _findFrameElement).call(this, element);\n    if (frame) {\n      frame.delegate.linkClickIntercepted(element, url, event);\n    }\n  }\n\n  // Form submit observer delegate\n\n  willSubmitForm(element, submitter) {\n    return element.closest(\"turbo-frame\") == null && _assertClassBrand(_FrameRedirector_brand, this, _shouldSubmit).call(this, element, submitter) && _assertClassBrand(_FrameRedirector_brand, this, _shouldRedirect).call(this, element, submitter);\n  }\n  formSubmitted(element, submitter) {\n    const frame = _assertClassBrand(_FrameRedirector_brand, this, _findFrameElement).call(this, element, submitter);\n    if (frame) {\n      frame.delegate.formSubmitted(element, submitter);\n    }\n  }\n}\nfunction _shouldSubmit(form, submitter) {\n  const action = getAction$1(form, submitter);\n  const meta = this.element.ownerDocument.querySelector(`meta[name=\"turbo-root\"]`);\n  const rootLocation = expandURL((meta === null || meta === void 0 ? void 0 : meta.content) ?? \"/\");\n  return _assertClassBrand(_FrameRedirector_brand, this, _shouldRedirect).call(this, form, submitter) && locationIsVisitable(action, rootLocation);\n}\nfunction _shouldRedirect(element, submitter) {\n  const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);\n  if (isNavigatable) {\n    const frame = _assertClassBrand(_FrameRedirector_brand, this, _findFrameElement).call(this, element, submitter);\n    return frame ? frame != element.closest(\"turbo-frame\") : false;\n  } else {\n    return false;\n  }\n}\nfunction _findFrameElement(element, submitter) {\n  const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute(\"data-turbo-frame\")) || element.getAttribute(\"data-turbo-frame\");\n  if (id && id != \"_top\") {\n    const frame = this.element.querySelector(`#${id}:not([disabled])`);\n    if (frame instanceof FrameElement) {\n      return frame;\n    }\n  }\n}\nclass History {\n  constructor(delegate) {\n    _defineProperty(this, \"location\", void 0);\n    _defineProperty(this, \"restorationIdentifier\", uuid());\n    _defineProperty(this, \"restorationData\", {});\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"pageLoaded\", false);\n    _defineProperty(this, \"currentIndex\", 0);\n    // Event handlers\n    _defineProperty(this, \"onPopState\", event => {\n      if (this.shouldHandlePopState()) {\n        const {\n          turbo\n        } = event.state || {};\n        if (turbo) {\n          this.location = new URL(window.location.href);\n          const {\n            restorationIdentifier,\n            restorationIndex\n          } = turbo;\n          this.restorationIdentifier = restorationIdentifier;\n          const direction = restorationIndex > this.currentIndex ? \"forward\" : \"back\";\n          this.delegate.historyPoppedToLocationWithRestorationIdentifierAndDirection(this.location, restorationIdentifier, direction);\n          this.currentIndex = restorationIndex;\n        }\n      }\n    });\n    _defineProperty(this, \"onPageLoad\", async _event => {\n      await nextMicrotask();\n      this.pageLoaded = true;\n    });\n    this.delegate = delegate;\n  }\n  start() {\n    if (!this.started) {\n      var _history$state, _history$state$turbo;\n      addEventListener(\"popstate\", this.onPopState, false);\n      addEventListener(\"load\", this.onPageLoad, false);\n      this.currentIndex = ((_history$state = history.state) === null || _history$state === void 0 ? void 0 : (_history$state$turbo = _history$state.turbo) === null || _history$state$turbo === void 0 ? void 0 : _history$state$turbo.restorationIndex) || 0;\n      this.started = true;\n      this.replace(new URL(window.location.href));\n    }\n  }\n  stop() {\n    if (this.started) {\n      removeEventListener(\"popstate\", this.onPopState, false);\n      removeEventListener(\"load\", this.onPageLoad, false);\n      this.started = false;\n    }\n  }\n  push(location, restorationIdentifier) {\n    this.update(history.pushState, location, restorationIdentifier);\n  }\n  replace(location, restorationIdentifier) {\n    this.update(history.replaceState, location, restorationIdentifier);\n  }\n  update(method, location) {\n    let restorationIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uuid();\n    if (method === history.pushState) ++this.currentIndex;\n    const state = {\n      turbo: {\n        restorationIdentifier,\n        restorationIndex: this.currentIndex\n      }\n    };\n    method.call(history, state, \"\", location.href);\n    this.location = location;\n    this.restorationIdentifier = restorationIdentifier;\n  }\n\n  // Restoration data\n\n  getRestorationDataForIdentifier(restorationIdentifier) {\n    return this.restorationData[restorationIdentifier] || {};\n  }\n  updateRestorationData(additionalData) {\n    const {\n      restorationIdentifier\n    } = this;\n    const restorationData = this.restorationData[restorationIdentifier];\n    this.restorationData[restorationIdentifier] = {\n      ...restorationData,\n      ...additionalData\n    };\n  }\n\n  // Scroll restoration\n\n  assumeControlOfScrollRestoration() {\n    if (!this.previousScrollRestoration) {\n      this.previousScrollRestoration = history.scrollRestoration ?? \"auto\";\n      history.scrollRestoration = \"manual\";\n    }\n  }\n  relinquishControlOfScrollRestoration() {\n    if (this.previousScrollRestoration) {\n      history.scrollRestoration = this.previousScrollRestoration;\n      delete this.previousScrollRestoration;\n    }\n  }\n  // Private\n\n  shouldHandlePopState() {\n    // Safari dispatches a popstate event after window's load event, ignore it\n    return this.pageIsLoaded();\n  }\n  pageIsLoaded() {\n    return this.pageLoaded || document.readyState == \"complete\";\n  }\n}\nvar _prefetchedLink = /*#__PURE__*/new WeakMap();\nvar _enable = /*#__PURE__*/new WeakMap();\nvar _tryToPrefetchRequest = /*#__PURE__*/new WeakMap();\nvar _cancelRequestIfObsolete = /*#__PURE__*/new WeakMap();\nvar _cancelPrefetchRequest = /*#__PURE__*/new WeakMap();\nvar _tryToUsePrefetchedRequest = /*#__PURE__*/new WeakMap();\nvar _LinkPrefetchObserver_brand = /*#__PURE__*/new WeakSet();\nclass LinkPrefetchObserver {\n  constructor(delegate, eventTarget) {\n    _classPrivateMethodInitSpec(this, _LinkPrefetchObserver_brand);\n    _defineProperty(this, \"started\", false);\n    _classPrivateFieldInitSpec(this, _prefetchedLink, null);\n    _classPrivateFieldInitSpec(this, _enable, () => {\n      this.eventTarget.addEventListener(\"mouseenter\", _classPrivateFieldGet(_tryToPrefetchRequest, this), {\n        capture: true,\n        passive: true\n      });\n      this.eventTarget.addEventListener(\"mouseleave\", _classPrivateFieldGet(_cancelRequestIfObsolete, this), {\n        capture: true,\n        passive: true\n      });\n      this.eventTarget.addEventListener(\"turbo:before-fetch-request\", _classPrivateFieldGet(_tryToUsePrefetchedRequest, this), true);\n      this.started = true;\n    });\n    _classPrivateFieldInitSpec(this, _tryToPrefetchRequest, event => {\n      if (getMetaContent(\"turbo-prefetch\") === \"false\") return;\n      const target = event.target;\n      const isLink = target.matches && target.matches(\"a[href]:not([target^=_]):not([download])\");\n      if (isLink && _assertClassBrand(_LinkPrefetchObserver_brand, this, _isPrefetchable).call(this, target)) {\n        const link = target;\n        const location = getLocationForLink(link);\n        if (this.delegate.canPrefetchRequestToLocation(link, location)) {\n          _classPrivateFieldSet(_prefetchedLink, this, link);\n          const fetchRequest = new FetchRequest(this, FetchMethod.get, location, new URLSearchParams(), target);\n          prefetchCache.setLater(location.toString(), fetchRequest, _classPrivateGetter(_LinkPrefetchObserver_brand, this, _get_cacheTtl));\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _cancelRequestIfObsolete, event => {\n      if (event.target === _classPrivateFieldGet(_prefetchedLink, this)) _classPrivateFieldGet(_cancelPrefetchRequest, this).call(this);\n    });\n    _classPrivateFieldInitSpec(this, _cancelPrefetchRequest, () => {\n      prefetchCache.clear();\n      _classPrivateFieldSet(_prefetchedLink, this, null);\n    });\n    _classPrivateFieldInitSpec(this, _tryToUsePrefetchedRequest, event => {\n      if (event.target.tagName !== \"FORM\" && event.detail.fetchOptions.method === \"get\") {\n        const cached = prefetchCache.get(event.detail.url.toString());\n        if (cached) {\n          // User clicked link, use cache response\n          event.detail.fetchRequest = cached;\n        }\n        prefetchCache.clear();\n      }\n    });\n    this.delegate = delegate;\n    this.eventTarget = eventTarget;\n  }\n  start() {\n    if (this.started) return;\n    if (this.eventTarget.readyState === \"loading\") {\n      this.eventTarget.addEventListener(\"DOMContentLoaded\", _classPrivateFieldGet(_enable, this), {\n        once: true\n      });\n    } else {\n      _classPrivateFieldGet(_enable, this).call(this);\n    }\n  }\n  stop() {\n    if (!this.started) return;\n    this.eventTarget.removeEventListener(\"mouseenter\", _classPrivateFieldGet(_tryToPrefetchRequest, this), {\n      capture: true,\n      passive: true\n    });\n    this.eventTarget.removeEventListener(\"mouseleave\", _classPrivateFieldGet(_cancelRequestIfObsolete, this), {\n      capture: true,\n      passive: true\n    });\n    this.eventTarget.removeEventListener(\"turbo:before-fetch-request\", _classPrivateFieldGet(_tryToUsePrefetchedRequest, this), true);\n    this.started = false;\n  }\n  prepareRequest(request) {\n    const link = request.target;\n    request.headers[\"X-Sec-Purpose\"] = \"prefetch\";\n    const turboFrame = link.closest(\"turbo-frame\");\n    const turboFrameTarget = link.getAttribute(\"data-turbo-frame\") || (turboFrame === null || turboFrame === void 0 ? void 0 : turboFrame.getAttribute(\"target\")) || (turboFrame === null || turboFrame === void 0 ? void 0 : turboFrame.id);\n    if (turboFrameTarget && turboFrameTarget !== \"_top\") {\n      request.headers[\"Turbo-Frame\"] = turboFrameTarget;\n    }\n  }\n\n  // Fetch request interface\n\n  requestSucceededWithResponse() {}\n  requestStarted(fetchRequest) {}\n  requestErrored(fetchRequest) {}\n  requestFinished(fetchRequest) {}\n  requestPreventedHandlingResponse(fetchRequest, fetchResponse) {}\n  requestFailedWithResponse(fetchRequest, fetchResponse) {}\n}\nfunction _get_cacheTtl(_this2) {\n  return Number(getMetaContent(\"turbo-prefetch-cache-time\")) || cacheTtl;\n}\nfunction _isPrefetchable(link) {\n  const href = link.getAttribute(\"href\");\n  if (!href) return false;\n  if (unfetchableLink(link)) return false;\n  if (linkToTheSamePage(link)) return false;\n  if (linkOptsOut(link)) return false;\n  if (nonSafeLink(link)) return false;\n  if (eventPrevented(link)) return false;\n  return true;\n}\nconst unfetchableLink = link => {\n  return link.origin !== document.location.origin || ![\"http:\", \"https:\"].includes(link.protocol) || link.hasAttribute(\"target\");\n};\nconst linkToTheSamePage = link => {\n  return link.pathname + link.search === document.location.pathname + document.location.search || link.href.startsWith(\"#\");\n};\nconst linkOptsOut = link => {\n  if (link.getAttribute(\"data-turbo-prefetch\") === \"false\") return true;\n  if (link.getAttribute(\"data-turbo\") === \"false\") return true;\n  const turboPrefetchParent = findClosestRecursively(link, \"[data-turbo-prefetch]\");\n  if (turboPrefetchParent && turboPrefetchParent.getAttribute(\"data-turbo-prefetch\") === \"false\") return true;\n  return false;\n};\nconst nonSafeLink = link => {\n  const turboMethod = link.getAttribute(\"data-turbo-method\");\n  if (turboMethod && turboMethod.toLowerCase() !== \"get\") return true;\n  if (isUJS(link)) return true;\n  if (link.hasAttribute(\"data-turbo-confirm\")) return true;\n  if (link.hasAttribute(\"data-turbo-stream\")) return true;\n  return false;\n};\nconst isUJS = link => {\n  return link.hasAttribute(\"data-remote\") || link.hasAttribute(\"data-behavior\") || link.hasAttribute(\"data-confirm\") || link.hasAttribute(\"data-method\");\n};\nconst eventPrevented = link => {\n  const event = dispatch(\"turbo:before-prefetch\", {\n    target: link,\n    cancelable: true\n  });\n  return event.defaultPrevented;\n};\nvar _Navigator_brand = /*#__PURE__*/new WeakSet();\nclass Navigator {\n  constructor(delegate) {\n    _classPrivateMethodInitSpec(this, _Navigator_brand);\n    this.delegate = delegate;\n  }\n  proposeVisit(location) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.delegate.allowsVisitingLocationWithAction(location, options.action)) {\n      this.delegate.visitProposedToLocation(location, options);\n    }\n  }\n  startVisit(locatable, restorationIdentifier) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.stop();\n    this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, {\n      referrer: this.location,\n      ...options\n    });\n    this.currentVisit.start();\n  }\n  submitForm(form, submitter) {\n    this.stop();\n    this.formSubmission = new FormSubmission(this, form, submitter, true);\n    this.formSubmission.start();\n  }\n  stop() {\n    if (this.formSubmission) {\n      this.formSubmission.stop();\n      delete this.formSubmission;\n    }\n    if (this.currentVisit) {\n      this.currentVisit.cancel();\n      delete this.currentVisit;\n    }\n  }\n  get adapter() {\n    return this.delegate.adapter;\n  }\n  get view() {\n    return this.delegate.view;\n  }\n  get rootLocation() {\n    return this.view.snapshot.rootLocation;\n  }\n  get history() {\n    return this.delegate.history;\n  }\n\n  // Form submission delegate\n\n  formSubmissionStarted(formSubmission) {\n    // Not all adapters implement formSubmissionStarted\n    if (typeof this.adapter.formSubmissionStarted === \"function\") {\n      this.adapter.formSubmissionStarted(formSubmission);\n    }\n  }\n  async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {\n    if (formSubmission == this.formSubmission) {\n      const responseHTML = await fetchResponse.responseHTML;\n      if (responseHTML) {\n        const shouldCacheSnapshot = formSubmission.isSafe;\n        if (!shouldCacheSnapshot) {\n          this.view.clearSnapshotCache();\n        }\n        const {\n          statusCode,\n          redirected\n        } = fetchResponse;\n        const action = _assertClassBrand(_Navigator_brand, this, _getActionForFormSubmission).call(this, formSubmission, fetchResponse);\n        const visitOptions = {\n          action,\n          shouldCacheSnapshot,\n          response: {\n            statusCode,\n            responseHTML,\n            redirected\n          }\n        };\n        this.proposeVisit(fetchResponse.location, visitOptions);\n      }\n    }\n  }\n  async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {\n    const responseHTML = await fetchResponse.responseHTML;\n    if (responseHTML) {\n      const snapshot = PageSnapshot.fromHTMLString(responseHTML);\n      if (fetchResponse.serverError) {\n        await this.view.renderError(snapshot, this.currentVisit);\n      } else {\n        await this.view.renderPage(snapshot, false, true, this.currentVisit);\n      }\n      if (!snapshot.shouldPreserveScrollPosition) {\n        this.view.scrollToTop();\n      }\n      this.view.clearSnapshotCache();\n    }\n  }\n  formSubmissionErrored(formSubmission, error) {\n    console.error(error);\n  }\n  formSubmissionFinished(formSubmission) {\n    // Not all adapters implement formSubmissionFinished\n    if (typeof this.adapter.formSubmissionFinished === \"function\") {\n      this.adapter.formSubmissionFinished(formSubmission);\n    }\n  }\n\n  // Visit delegate\n\n  visitStarted(visit) {\n    this.delegate.visitStarted(visit);\n  }\n  visitCompleted(visit) {\n    this.delegate.visitCompleted(visit);\n  }\n  locationWithActionIsSamePage(location, action) {\n    const anchor = getAnchor(location);\n    const currentAnchor = getAnchor(this.view.lastRenderedLocation);\n    const isRestorationToTop = action === \"restore\" && typeof anchor === \"undefined\";\n    return action !== \"replace\" && getRequestURL(location) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);\n  }\n  visitScrolledToSamePageLocation(oldURL, newURL) {\n    this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);\n  }\n\n  // Visits\n\n  get location() {\n    return this.history.location;\n  }\n  get restorationIdentifier() {\n    return this.history.restorationIdentifier;\n  }\n}\nfunction _getActionForFormSubmission(formSubmission, fetchResponse) {\n  const {\n    submitter,\n    formElement\n  } = formSubmission;\n  return getVisitAction(submitter, formElement) || _assertClassBrand(_Navigator_brand, this, _getDefaultAction).call(this, fetchResponse);\n}\nfunction _getDefaultAction(fetchResponse) {\n  var _this$location2;\n  const sameLocationRedirect = fetchResponse.redirected && fetchResponse.location.href === ((_this$location2 = this.location) === null || _this$location2 === void 0 ? void 0 : _this$location2.href);\n  return sameLocationRedirect ? \"replace\" : \"advance\";\n}\nconst PageStage = {\n  initial: 0,\n  loading: 1,\n  interactive: 2,\n  complete: 3\n};\nclass PageObserver {\n  constructor(delegate) {\n    _defineProperty(this, \"stage\", PageStage.initial);\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"interpretReadyState\", () => {\n      const {\n        readyState\n      } = this;\n      if (readyState == \"interactive\") {\n        this.pageIsInteractive();\n      } else if (readyState == \"complete\") {\n        this.pageIsComplete();\n      }\n    });\n    _defineProperty(this, \"pageWillUnload\", () => {\n      this.delegate.pageWillUnload();\n    });\n    this.delegate = delegate;\n  }\n  start() {\n    if (!this.started) {\n      if (this.stage == PageStage.initial) {\n        this.stage = PageStage.loading;\n      }\n      document.addEventListener(\"readystatechange\", this.interpretReadyState, false);\n      addEventListener(\"pagehide\", this.pageWillUnload, false);\n      this.started = true;\n    }\n  }\n  stop() {\n    if (this.started) {\n      document.removeEventListener(\"readystatechange\", this.interpretReadyState, false);\n      removeEventListener(\"pagehide\", this.pageWillUnload, false);\n      this.started = false;\n    }\n  }\n  pageIsInteractive() {\n    if (this.stage == PageStage.loading) {\n      this.stage = PageStage.interactive;\n      this.delegate.pageBecameInteractive();\n    }\n  }\n  pageIsComplete() {\n    this.pageIsInteractive();\n    if (this.stage == PageStage.interactive) {\n      this.stage = PageStage.complete;\n      this.delegate.pageLoaded();\n    }\n  }\n  get readyState() {\n    return document.readyState;\n  }\n}\nclass ScrollObserver {\n  constructor(delegate) {\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"onScroll\", () => {\n      this.updatePosition({\n        x: window.pageXOffset,\n        y: window.pageYOffset\n      });\n    });\n    this.delegate = delegate;\n  }\n  start() {\n    if (!this.started) {\n      addEventListener(\"scroll\", this.onScroll, false);\n      this.onScroll();\n      this.started = true;\n    }\n  }\n  stop() {\n    if (this.started) {\n      removeEventListener(\"scroll\", this.onScroll, false);\n      this.started = false;\n    }\n  }\n  // Private\n\n  updatePosition(position) {\n    this.delegate.scrollPositionChanged(position);\n  }\n}\nclass StreamMessageRenderer {\n  render(_ref5) {\n    let {\n      fragment\n    } = _ref5;\n    Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => {\n      withAutofocusFromFragment(fragment, () => {\n        withPreservedFocus(() => {\n          document.documentElement.appendChild(fragment);\n        });\n      });\n    });\n  }\n\n  // Bardo delegate\n\n  enteringBardo(currentPermanentElement, newPermanentElement) {\n    newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));\n  }\n  leavingBardo() {}\n}\nfunction getPermanentElementMapForFragment(fragment) {\n  const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);\n  const permanentElementMap = {};\n  for (const permanentElementInDocument of permanentElementsInDocument) {\n    const {\n      id\n    } = permanentElementInDocument;\n    for (const streamElement of fragment.querySelectorAll(\"turbo-stream\")) {\n      const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);\n      if (elementInStream) {\n        permanentElementMap[id] = [permanentElementInDocument, elementInStream];\n      }\n    }\n  }\n  return permanentElementMap;\n}\nasync function withAutofocusFromFragment(fragment, callback) {\n  const generatedID = `turbo-stream-autofocus-${uuid()}`;\n  const turboStreams = fragment.querySelectorAll(\"turbo-stream\");\n  const elementWithAutofocus = firstAutofocusableElementInStreams(turboStreams);\n  let willAutofocusId = null;\n  if (elementWithAutofocus) {\n    if (elementWithAutofocus.id) {\n      willAutofocusId = elementWithAutofocus.id;\n    } else {\n      willAutofocusId = generatedID;\n    }\n    elementWithAutofocus.id = willAutofocusId;\n  }\n  callback();\n  await nextRepaint();\n  const hasNoActiveElement = document.activeElement == null || document.activeElement == document.body;\n  if (hasNoActiveElement && willAutofocusId) {\n    const elementToAutofocus = document.getElementById(willAutofocusId);\n    if (elementIsFocusable(elementToAutofocus)) {\n      elementToAutofocus.focus();\n    }\n    if (elementToAutofocus && elementToAutofocus.id == generatedID) {\n      elementToAutofocus.removeAttribute(\"id\");\n    }\n  }\n}\nasync function withPreservedFocus(callback) {\n  const [activeElementBeforeRender, activeElementAfterRender] = await around(callback, () => document.activeElement);\n  const restoreFocusTo = activeElementBeforeRender && activeElementBeforeRender.id;\n  if (restoreFocusTo) {\n    const elementToFocus = document.getElementById(restoreFocusTo);\n    if (elementIsFocusable(elementToFocus) && elementToFocus != activeElementAfterRender) {\n      elementToFocus.focus();\n    }\n  }\n}\nfunction firstAutofocusableElementInStreams(nodeListOfStreamElements) {\n  for (const streamElement of nodeListOfStreamElements) {\n    const elementWithAutofocus = queryAutofocusableElement(streamElement.templateElement.content);\n    if (elementWithAutofocus) return elementWithAutofocus;\n  }\n  return null;\n}\nvar _started = /*#__PURE__*/new WeakMap();\nclass StreamObserver {\n  constructor(delegate) {\n    _defineProperty(this, \"sources\", new Set());\n    _classPrivateFieldInitSpec(this, _started, false);\n    _defineProperty(this, \"inspectFetchResponse\", event => {\n      const response = fetchResponseFromEvent(event);\n      if (response && fetchResponseIsStream(response)) {\n        event.preventDefault();\n        this.receiveMessageResponse(response);\n      }\n    });\n    _defineProperty(this, \"receiveMessageEvent\", event => {\n      if (_classPrivateFieldGet(_started, this) && typeof event.data == \"string\") {\n        this.receiveMessageHTML(event.data);\n      }\n    });\n    this.delegate = delegate;\n  }\n  start() {\n    if (!_classPrivateFieldGet(_started, this)) {\n      _classPrivateFieldSet(_started, this, true);\n      addEventListener(\"turbo:before-fetch-response\", this.inspectFetchResponse, false);\n    }\n  }\n  stop() {\n    if (_classPrivateFieldGet(_started, this)) {\n      _classPrivateFieldSet(_started, this, false);\n      removeEventListener(\"turbo:before-fetch-response\", this.inspectFetchResponse, false);\n    }\n  }\n  connectStreamSource(source) {\n    if (!this.streamSourceIsConnected(source)) {\n      this.sources.add(source);\n      source.addEventListener(\"message\", this.receiveMessageEvent, false);\n    }\n  }\n  disconnectStreamSource(source) {\n    if (this.streamSourceIsConnected(source)) {\n      this.sources.delete(source);\n      source.removeEventListener(\"message\", this.receiveMessageEvent, false);\n    }\n  }\n  streamSourceIsConnected(source) {\n    return this.sources.has(source);\n  }\n  async receiveMessageResponse(response) {\n    const html = await response.responseHTML;\n    if (html) {\n      this.receiveMessageHTML(html);\n    }\n  }\n  receiveMessageHTML(html) {\n    this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));\n  }\n}\nfunction fetchResponseFromEvent(event) {\n  var _event$detail;\n  const fetchResponse = (_event$detail = event.detail) === null || _event$detail === void 0 ? void 0 : _event$detail.fetchResponse;\n  if (fetchResponse instanceof FetchResponse) {\n    return fetchResponse;\n  }\n}\nfunction fetchResponseIsStream(response) {\n  const contentType = response.contentType ?? \"\";\n  return contentType.startsWith(StreamMessage.contentType);\n}\nclass ErrorRenderer extends Renderer {\n  static renderElement(currentElement, newElement) {\n    const {\n      documentElement,\n      body\n    } = document;\n    documentElement.replaceChild(newElement, body);\n  }\n  async render() {\n    this.replaceHeadAndBody();\n    this.activateScriptElements();\n  }\n  replaceHeadAndBody() {\n    const {\n      documentElement,\n      head\n    } = document;\n    documentElement.replaceChild(this.newHead, head);\n    this.renderElement(this.currentElement, this.newElement);\n  }\n  activateScriptElements() {\n    for (const replaceableElement of this.scriptElements) {\n      const parentNode = replaceableElement.parentNode;\n      if (parentNode) {\n        const element = activateScriptElement(replaceableElement);\n        parentNode.replaceChild(element, replaceableElement);\n      }\n    }\n  }\n  get newHead() {\n    return this.newSnapshot.headSnapshot.element;\n  }\n  get scriptElements() {\n    return document.documentElement.querySelectorAll(\"script\");\n  }\n}\n\n// base IIFE to define idiomorph\nvar Idiomorph = function () {\n  //=============================================================================\n  // AND NOW IT BEGINS...\n  //=============================================================================\n  let EMPTY_SET = new Set();\n\n  // default configuration values, updatable by users now\n  let defaults = {\n    morphStyle: \"outerHTML\",\n    callbacks: {\n      beforeNodeAdded: noOp,\n      afterNodeAdded: noOp,\n      beforeNodeMorphed: noOp,\n      afterNodeMorphed: noOp,\n      beforeNodeRemoved: noOp,\n      afterNodeRemoved: noOp,\n      beforeAttributeUpdated: noOp\n    },\n    head: {\n      style: 'merge',\n      shouldPreserve: function (elt) {\n        return elt.getAttribute(\"im-preserve\") === \"true\";\n      },\n      shouldReAppend: function (elt) {\n        return elt.getAttribute(\"im-re-append\") === \"true\";\n      },\n      shouldRemove: noOp,\n      afterHeadMorphed: noOp\n    }\n  };\n\n  //=============================================================================\n  // Core Morphing Algorithm - morph, morphNormalizedContent, morphOldNodeTo, morphChildren\n  //=============================================================================\n  function morph(oldNode, newContent) {\n    let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (oldNode instanceof Document) {\n      oldNode = oldNode.documentElement;\n    }\n    if (typeof newContent === 'string') {\n      newContent = parseContent(newContent);\n    }\n    let normalizedContent = normalizeContent(newContent);\n    let ctx = createMorphContext(oldNode, normalizedContent, config);\n    return morphNormalizedContent(oldNode, normalizedContent, ctx);\n  }\n  function morphNormalizedContent(oldNode, normalizedNewContent, ctx) {\n    if (ctx.head.block) {\n      let oldHead = oldNode.querySelector('head');\n      let newHead = normalizedNewContent.querySelector('head');\n      if (oldHead && newHead) {\n        let promises = handleHeadElement(newHead, oldHead, ctx);\n        // when head promises resolve, call morph again, ignoring the head tag\n        Promise.all(promises).then(function () {\n          morphNormalizedContent(oldNode, normalizedNewContent, Object.assign(ctx, {\n            head: {\n              block: false,\n              ignore: true\n            }\n          }));\n        });\n        return;\n      }\n    }\n    if (ctx.morphStyle === \"innerHTML\") {\n      // innerHTML, so we are only updating the children\n      morphChildren(normalizedNewContent, oldNode, ctx);\n      return oldNode.children;\n    } else if (ctx.morphStyle === \"outerHTML\" || ctx.morphStyle == null) {\n      // otherwise find the best element match in the new content, morph that, and merge its siblings\n      // into either side of the best match\n      let bestMatch = findBestNodeMatch(normalizedNewContent, oldNode, ctx);\n\n      // stash the siblings that will need to be inserted on either side of the best match\n      let previousSibling = bestMatch === null || bestMatch === void 0 ? void 0 : bestMatch.previousSibling;\n      let nextSibling = bestMatch === null || bestMatch === void 0 ? void 0 : bestMatch.nextSibling;\n\n      // morph it\n      let morphedNode = morphOldNodeTo(oldNode, bestMatch, ctx);\n      if (bestMatch) {\n        // if there was a best match, merge the siblings in too and return the\n        // whole bunch\n        return insertSiblings(previousSibling, morphedNode, nextSibling);\n      } else {\n        // otherwise nothing was added to the DOM\n        return [];\n      }\n    } else {\n      throw \"Do not understand how to morph style \" + ctx.morphStyle;\n    }\n  }\n\n  /**\n   * @param possibleActiveElement\n   * @param ctx\n   * @returns {boolean}\n   */\n  function ignoreValueOfActiveElement(possibleActiveElement, ctx) {\n    return ctx.ignoreActiveValue && possibleActiveElement === document.activeElement && possibleActiveElement !== document.body;\n  }\n\n  /**\n   * @param oldNode root node to merge content into\n   * @param newContent new content to merge\n   * @param ctx the merge context\n   * @returns {Element} the element that ended up in the DOM\n   */\n  function morphOldNodeTo(oldNode, newContent, ctx) {\n    if (ctx.ignoreActive && oldNode === document.activeElement) ;else if (newContent == null) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n      oldNode.remove();\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return null;\n    } else if (!isSoftMatch(oldNode, newContent)) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n      if (ctx.callbacks.beforeNodeAdded(newContent) === false) return oldNode;\n      oldNode.parentElement.replaceChild(newContent, oldNode);\n      ctx.callbacks.afterNodeAdded(newContent);\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return newContent;\n    } else {\n      if (ctx.callbacks.beforeNodeMorphed(oldNode, newContent) === false) return oldNode;\n      if (oldNode instanceof HTMLHeadElement && ctx.head.ignore) ;else if (oldNode instanceof HTMLHeadElement && ctx.head.style !== \"morph\") {\n        handleHeadElement(newContent, oldNode, ctx);\n      } else {\n        syncNodeFrom(newContent, oldNode, ctx);\n        if (!ignoreValueOfActiveElement(oldNode, ctx)) {\n          morphChildren(newContent, oldNode, ctx);\n        }\n      }\n      ctx.callbacks.afterNodeMorphed(oldNode, newContent);\n      return oldNode;\n    }\n  }\n\n  /**\n   * This is the core algorithm for matching up children.  The idea is to use id sets to try to match up\n   * nodes as faithfully as possible.  We greedily match, which allows us to keep the algorithm fast, but\n   * by using id sets, we are able to better match up with content deeper in the DOM.\n   *\n   * Basic algorithm is, for each node in the new content:\n   *\n   * - if we have reached the end of the old parent, append the new content\n   * - if the new content has an id set match with the current insertion point, morph\n   * - search for an id set match\n   * - if id set match found, morph\n   * - otherwise search for a \"soft\" match\n   * - if a soft match is found, morph\n   * - otherwise, prepend the new node before the current insertion point\n   *\n   * The two search algorithms terminate if competing node matches appear to outweigh what can be achieved\n   * with the current node.  See findIdSetMatch() and findSoftMatch() for details.\n   *\n   * @param {Element} newParent the parent element of the new content\n   * @param {Element } oldParent the old content that we are merging the new content into\n   * @param ctx the merge context\n   */\n  function morphChildren(newParent, oldParent, ctx) {\n    let nextNewChild = newParent.firstChild;\n    let insertionPoint = oldParent.firstChild;\n    let newChild;\n\n    // run through all the new content\n    while (nextNewChild) {\n      newChild = nextNewChild;\n      nextNewChild = newChild.nextSibling;\n\n      // if we are at the end of the exiting parent's children, just append\n      if (insertionPoint == null) {\n        if (ctx.callbacks.beforeNodeAdded(newChild) === false) return;\n        oldParent.appendChild(newChild);\n        ctx.callbacks.afterNodeAdded(newChild);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // if the current node has an id set match then morph\n      if (isIdSetMatch(newChild, insertionPoint, ctx)) {\n        morphOldNodeTo(insertionPoint, newChild, ctx);\n        insertionPoint = insertionPoint.nextSibling;\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // otherwise search forward in the existing old children for an id set match\n      let idSetMatch = findIdSetMatch(newParent, oldParent, newChild, insertionPoint, ctx);\n\n      // if we found a potential match, remove the nodes until that point and morph\n      if (idSetMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, idSetMatch, ctx);\n        morphOldNodeTo(idSetMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // no id set match found, so scan forward for a soft match for the current node\n      let softMatch = findSoftMatch(newParent, oldParent, newChild, insertionPoint, ctx);\n\n      // if we found a soft match for the current node, morph\n      if (softMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, softMatch, ctx);\n        morphOldNodeTo(softMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // abandon all hope of morphing, just insert the new child before the insertion point\n      // and move on\n      if (ctx.callbacks.beforeNodeAdded(newChild) === false) return;\n      oldParent.insertBefore(newChild, insertionPoint);\n      ctx.callbacks.afterNodeAdded(newChild);\n      removeIdsFromConsideration(ctx, newChild);\n    }\n\n    // remove any remaining old nodes that didn't match up with new content\n    while (insertionPoint !== null) {\n      let tempNode = insertionPoint;\n      insertionPoint = insertionPoint.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n  }\n\n  //=============================================================================\n  // Attribute Syncing Code\n  //=============================================================================\n\n  /**\n   * @param attr {String} the attribute to be mutated\n   * @param to {Element} the element that is going to be updated\n   * @param updateType {(\"update\"|\"remove\")}\n   * @param ctx the merge context\n   * @returns {boolean} true if the attribute should be ignored, false otherwise\n   */\n  function ignoreAttribute(attr, to, updateType, ctx) {\n    if (attr === 'value' && ctx.ignoreActiveValue && to === document.activeElement) {\n      return true;\n    }\n    return ctx.callbacks.beforeAttributeUpdated(attr, to, updateType) === false;\n  }\n\n  /**\n   * syncs a given node with another node, copying over all attributes and\n   * inner element state from the 'from' node to the 'to' node\n   *\n   * @param {Element} from the element to copy attributes & state from\n   * @param {Element} to the element to copy attributes & state to\n   * @param ctx the merge context\n   */\n  function syncNodeFrom(from, to, ctx) {\n    let type = from.nodeType;\n\n    // if is an element type, sync the attributes from the\n    // new node into the new node\n    if (type === 1 /* element type */) {\n      const fromAttributes = from.attributes;\n      const toAttributes = to.attributes;\n      for (const fromAttribute of fromAttributes) {\n        if (ignoreAttribute(fromAttribute.name, to, 'update', ctx)) {\n          continue;\n        }\n        if (to.getAttribute(fromAttribute.name) !== fromAttribute.value) {\n          to.setAttribute(fromAttribute.name, fromAttribute.value);\n        }\n      }\n      // iterate backwards to avoid skipping over items when a delete occurs\n      for (let i = toAttributes.length - 1; 0 <= i; i--) {\n        const toAttribute = toAttributes[i];\n        if (ignoreAttribute(toAttribute.name, to, 'remove', ctx)) {\n          continue;\n        }\n        if (!from.hasAttribute(toAttribute.name)) {\n          to.removeAttribute(toAttribute.name);\n        }\n      }\n    }\n\n    // sync text nodes\n    if (type === 8 /* comment */ || type === 3 /* text */) {\n      if (to.nodeValue !== from.nodeValue) {\n        to.nodeValue = from.nodeValue;\n      }\n    }\n    if (!ignoreValueOfActiveElement(to, ctx)) {\n      // sync input values\n      syncInputValue(from, to, ctx);\n    }\n  }\n\n  /**\n   * @param from {Element} element to sync the value from\n   * @param to {Element} element to sync the value to\n   * @param attributeName {String} the attribute name\n   * @param ctx the merge context\n   */\n  function syncBooleanAttribute(from, to, attributeName, ctx) {\n    if (from[attributeName] !== to[attributeName]) {\n      let ignoreUpdate = ignoreAttribute(attributeName, to, 'update', ctx);\n      if (!ignoreUpdate) {\n        to[attributeName] = from[attributeName];\n      }\n      if (from[attributeName]) {\n        if (!ignoreUpdate) {\n          to.setAttribute(attributeName, from[attributeName]);\n        }\n      } else {\n        if (!ignoreAttribute(attributeName, to, 'remove', ctx)) {\n          to.removeAttribute(attributeName);\n        }\n      }\n    }\n  }\n\n  /**\n   * NB: many bothans died to bring us information:\n   *\n   *  https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n   *  https://github.com/choojs/nanomorph/blob/master/lib/morph.jsL113\n   *\n   * @param from {Element} the element to sync the input value from\n   * @param to {Element} the element to sync the input value to\n   * @param ctx the merge context\n   */\n  function syncInputValue(from, to, ctx) {\n    if (from instanceof HTMLInputElement && to instanceof HTMLInputElement && from.type !== 'file') {\n      let fromValue = from.value;\n      let toValue = to.value;\n\n      // sync boolean attributes\n      syncBooleanAttribute(from, to, 'checked', ctx);\n      syncBooleanAttribute(from, to, 'disabled', ctx);\n      if (!from.hasAttribute('value')) {\n        if (!ignoreAttribute('value', to, 'remove', ctx)) {\n          to.value = '';\n          to.removeAttribute('value');\n        }\n      } else if (fromValue !== toValue) {\n        if (!ignoreAttribute('value', to, 'update', ctx)) {\n          to.setAttribute('value', fromValue);\n          to.value = fromValue;\n        }\n      }\n    } else if (from instanceof HTMLOptionElement) {\n      syncBooleanAttribute(from, to, 'selected', ctx);\n    } else if (from instanceof HTMLTextAreaElement && to instanceof HTMLTextAreaElement) {\n      let fromValue = from.value;\n      let toValue = to.value;\n      if (ignoreAttribute('value', to, 'update', ctx)) {\n        return;\n      }\n      if (fromValue !== toValue) {\n        to.value = fromValue;\n      }\n      if (to.firstChild && to.firstChild.nodeValue !== fromValue) {\n        to.firstChild.nodeValue = fromValue;\n      }\n    }\n  }\n\n  //=============================================================================\n  // the HEAD tag can be handled specially, either w/ a 'merge' or 'append' style\n  //=============================================================================\n  function handleHeadElement(newHeadTag, currentHead, ctx) {\n    let added = [];\n    let removed = [];\n    let preserved = [];\n    let nodesToAppend = [];\n    let headMergeStyle = ctx.head.style;\n\n    // put all new head elements into a Map, by their outerHTML\n    let srcToNewHeadNodes = new Map();\n    for (const newHeadChild of newHeadTag.children) {\n      srcToNewHeadNodes.set(newHeadChild.outerHTML, newHeadChild);\n    }\n\n    // for each elt in the current head\n    for (const currentHeadElt of currentHead.children) {\n      // If the current head element is in the map\n      let inNewContent = srcToNewHeadNodes.has(currentHeadElt.outerHTML);\n      let isReAppended = ctx.head.shouldReAppend(currentHeadElt);\n      let isPreserved = ctx.head.shouldPreserve(currentHeadElt);\n      if (inNewContent || isPreserved) {\n        if (isReAppended) {\n          // remove the current version and let the new version replace it and re-execute\n          removed.push(currentHeadElt);\n        } else {\n          // this element already exists and should not be re-appended, so remove it from\n          // the new content map, preserving it in the DOM\n          srcToNewHeadNodes.delete(currentHeadElt.outerHTML);\n          preserved.push(currentHeadElt);\n        }\n      } else {\n        if (headMergeStyle === \"append\") {\n          // we are appending and this existing element is not new content\n          // so if and only if it is marked for re-append do we do anything\n          if (isReAppended) {\n            removed.push(currentHeadElt);\n            nodesToAppend.push(currentHeadElt);\n          }\n        } else {\n          // if this is a merge, we remove this content since it is not in the new head\n          if (ctx.head.shouldRemove(currentHeadElt) !== false) {\n            removed.push(currentHeadElt);\n          }\n        }\n      }\n    }\n\n    // Push the remaining new head elements in the Map into the\n    // nodes to append to the head tag\n    nodesToAppend.push(...srcToNewHeadNodes.values());\n    let promises = [];\n    for (const newNode of nodesToAppend) {\n      let newElt = document.createRange().createContextualFragment(newNode.outerHTML).firstChild;\n      if (ctx.callbacks.beforeNodeAdded(newElt) !== false) {\n        if (newElt.href || newElt.src) {\n          let resolve = null;\n          let promise = new Promise(function (_resolve) {\n            resolve = _resolve;\n          });\n          newElt.addEventListener('load', function () {\n            resolve();\n          });\n          promises.push(promise);\n        }\n        currentHead.appendChild(newElt);\n        ctx.callbacks.afterNodeAdded(newElt);\n        added.push(newElt);\n      }\n    }\n\n    // remove all removed elements, after we have appended the new elements to avoid\n    // additional network requests for things like style sheets\n    for (const removedElement of removed) {\n      if (ctx.callbacks.beforeNodeRemoved(removedElement) !== false) {\n        currentHead.removeChild(removedElement);\n        ctx.callbacks.afterNodeRemoved(removedElement);\n      }\n    }\n    ctx.head.afterHeadMorphed(currentHead, {\n      added: added,\n      kept: preserved,\n      removed: removed\n    });\n    return promises;\n  }\n  function noOp() {}\n\n  /*\n    Deep merges the config object and the Idiomoroph.defaults object to\n    produce a final configuration object\n   */\n  function mergeDefaults(config) {\n    let finalConfig = {};\n    // copy top level stuff into final config\n    Object.assign(finalConfig, defaults);\n    Object.assign(finalConfig, config);\n\n    // copy callbacks into final config (do this to deep merge the callbacks)\n    finalConfig.callbacks = {};\n    Object.assign(finalConfig.callbacks, defaults.callbacks);\n    Object.assign(finalConfig.callbacks, config.callbacks);\n\n    // copy head config into final config  (do this to deep merge the head)\n    finalConfig.head = {};\n    Object.assign(finalConfig.head, defaults.head);\n    Object.assign(finalConfig.head, config.head);\n    return finalConfig;\n  }\n  function createMorphContext(oldNode, newContent, config) {\n    config = mergeDefaults(config);\n    return {\n      target: oldNode,\n      newContent: newContent,\n      config: config,\n      morphStyle: config.morphStyle,\n      ignoreActive: config.ignoreActive,\n      ignoreActiveValue: config.ignoreActiveValue,\n      idMap: createIdMap(oldNode, newContent),\n      deadIds: new Set(),\n      callbacks: config.callbacks,\n      head: config.head\n    };\n  }\n  function isIdSetMatch(node1, node2, ctx) {\n    if (node1 == null || node2 == null) {\n      return false;\n    }\n    if (node1.nodeType === node2.nodeType && node1.tagName === node2.tagName) {\n      if (node1.id !== \"\" && node1.id === node2.id) {\n        return true;\n      } else {\n        return getIdIntersectionCount(ctx, node1, node2) > 0;\n      }\n    }\n    return false;\n  }\n  function isSoftMatch(node1, node2) {\n    if (node1 == null || node2 == null) {\n      return false;\n    }\n    return node1.nodeType === node2.nodeType && node1.tagName === node2.tagName;\n  }\n  function removeNodesBetween(startInclusive, endExclusive, ctx) {\n    while (startInclusive !== endExclusive) {\n      let tempNode = startInclusive;\n      startInclusive = startInclusive.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n    removeIdsFromConsideration(ctx, endExclusive);\n    return endExclusive.nextSibling;\n  }\n\n  //=============================================================================\n  // Scans forward from the insertionPoint in the old parent looking for a potential id match\n  // for the newChild.  We stop if we find a potential id match for the new child OR\n  // if the number of potential id matches we are discarding is greater than the\n  // potential id matches for the new child\n  //=============================================================================\n  function findIdSetMatch(newContent, oldParent, newChild, insertionPoint, ctx) {\n    // max id matches we are willing to discard in our search\n    let newChildPotentialIdCount = getIdIntersectionCount(ctx, newChild, oldParent);\n    let potentialMatch = null;\n\n    // only search forward if there is a possibility of an id match\n    if (newChildPotentialIdCount > 0) {\n      let potentialMatch = insertionPoint;\n      // if there is a possibility of an id match, scan forward\n      // keep track of the potential id match count we are discarding (the\n      // newChildPotentialIdCount must be greater than this to make it likely\n      // worth it)\n      let otherMatchCount = 0;\n      while (potentialMatch != null) {\n        // If we have an id match, return the current potential match\n        if (isIdSetMatch(newChild, potentialMatch, ctx)) {\n          return potentialMatch;\n        }\n\n        // computer the other potential matches of this new content\n        otherMatchCount += getIdIntersectionCount(ctx, potentialMatch, newContent);\n        if (otherMatchCount > newChildPotentialIdCount) {\n          // if we have more potential id matches in _other_ content, we\n          // do not have a good candidate for an id match, so return null\n          return null;\n        }\n\n        // advanced to the next old content child\n        potentialMatch = potentialMatch.nextSibling;\n      }\n    }\n    return potentialMatch;\n  }\n\n  //=============================================================================\n  // Scans forward from the insertionPoint in the old parent looking for a potential soft match\n  // for the newChild.  We stop if we find a potential soft match for the new child OR\n  // if we find a potential id match in the old parents children OR if we find two\n  // potential soft matches for the next two pieces of new content\n  //=============================================================================\n  function findSoftMatch(newContent, oldParent, newChild, insertionPoint, ctx) {\n    let potentialSoftMatch = insertionPoint;\n    let nextSibling = newChild.nextSibling;\n    let siblingSoftMatchCount = 0;\n    while (potentialSoftMatch != null) {\n      if (getIdIntersectionCount(ctx, potentialSoftMatch, newContent) > 0) {\n        // the current potential soft match has a potential id set match with the remaining new\n        // content so bail out of looking\n        return null;\n      }\n\n      // if we have a soft match with the current node, return it\n      if (isSoftMatch(newChild, potentialSoftMatch)) {\n        return potentialSoftMatch;\n      }\n      if (isSoftMatch(nextSibling, potentialSoftMatch)) {\n        // the next new node has a soft match with this node, so\n        // increment the count of future soft matches\n        siblingSoftMatchCount++;\n        nextSibling = nextSibling.nextSibling;\n\n        // If there are two future soft matches, bail to allow the siblings to soft match\n        // so that we don't consume future soft matches for the sake of the current node\n        if (siblingSoftMatchCount >= 2) {\n          return null;\n        }\n      }\n\n      // advanced to the next old content child\n      potentialSoftMatch = potentialSoftMatch.nextSibling;\n    }\n    return potentialSoftMatch;\n  }\n  function parseContent(newContent) {\n    let parser = new DOMParser();\n\n    // remove svgs to avoid false-positive matches on head, etc.\n    let contentWithSvgsRemoved = newContent.replace(/<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim, '');\n\n    // if the newContent contains a html, head or body tag, we can simply parse it w/o wrapping\n    if (contentWithSvgsRemoved.match(/<\\/html>/) || contentWithSvgsRemoved.match(/<\\/head>/) || contentWithSvgsRemoved.match(/<\\/body>/)) {\n      let content = parser.parseFromString(newContent, \"text/html\");\n      // if it is a full HTML document, return the document itself as the parent container\n      if (contentWithSvgsRemoved.match(/<\\/html>/)) {\n        content.generatedByIdiomorph = true;\n        return content;\n      } else {\n        // otherwise return the html element as the parent container\n        let htmlElement = content.firstChild;\n        if (htmlElement) {\n          htmlElement.generatedByIdiomorph = true;\n          return htmlElement;\n        } else {\n          return null;\n        }\n      }\n    } else {\n      // if it is partial HTML, wrap it in a template tag to provide a parent element and also to help\n      // deal with touchy tags like tr, tbody, etc.\n      let responseDoc = parser.parseFromString(\"<body><template>\" + newContent + \"</template></body>\", \"text/html\");\n      let content = responseDoc.body.querySelector('template').content;\n      content.generatedByIdiomorph = true;\n      return content;\n    }\n  }\n  function normalizeContent(newContent) {\n    if (newContent == null) {\n      // noinspection UnnecessaryLocalVariableJS\n      const dummyParent = document.createElement('div');\n      return dummyParent;\n    } else if (newContent.generatedByIdiomorph) {\n      // the template tag created by idiomorph parsing can serve as a dummy parent\n      return newContent;\n    } else if (newContent instanceof Node) {\n      // a single node is added as a child to a dummy parent\n      const dummyParent = document.createElement('div');\n      dummyParent.append(newContent);\n      return dummyParent;\n    } else {\n      // all nodes in the array or HTMLElement collection are consolidated under\n      // a single dummy parent element\n      const dummyParent = document.createElement('div');\n      for (const elt of [...newContent]) {\n        dummyParent.append(elt);\n      }\n      return dummyParent;\n    }\n  }\n  function insertSiblings(previousSibling, morphedNode, nextSibling) {\n    let stack = [];\n    let added = [];\n    while (previousSibling != null) {\n      stack.push(previousSibling);\n      previousSibling = previousSibling.previousSibling;\n    }\n    while (stack.length > 0) {\n      let node = stack.pop();\n      added.push(node); // push added preceding siblings on in order and insert\n      morphedNode.parentElement.insertBefore(node, morphedNode);\n    }\n    added.push(morphedNode);\n    while (nextSibling != null) {\n      stack.push(nextSibling);\n      added.push(nextSibling); // here we are going in order, so push on as we scan, rather than add\n      nextSibling = nextSibling.nextSibling;\n    }\n    while (stack.length > 0) {\n      morphedNode.parentElement.insertBefore(stack.pop(), morphedNode.nextSibling);\n    }\n    return added;\n  }\n  function findBestNodeMatch(newContent, oldNode, ctx) {\n    let currentElement;\n    currentElement = newContent.firstChild;\n    let bestElement = currentElement;\n    let score = 0;\n    while (currentElement) {\n      let newScore = scoreElement(currentElement, oldNode, ctx);\n      if (newScore > score) {\n        bestElement = currentElement;\n        score = newScore;\n      }\n      currentElement = currentElement.nextSibling;\n    }\n    return bestElement;\n  }\n  function scoreElement(node1, node2, ctx) {\n    if (isSoftMatch(node1, node2)) {\n      return .5 + getIdIntersectionCount(ctx, node1, node2);\n    }\n    return 0;\n  }\n  function removeNode(tempNode, ctx) {\n    removeIdsFromConsideration(ctx, tempNode);\n    if (ctx.callbacks.beforeNodeRemoved(tempNode) === false) return;\n    tempNode.remove();\n    ctx.callbacks.afterNodeRemoved(tempNode);\n  }\n\n  //=============================================================================\n  // ID Set Functions\n  //=============================================================================\n\n  function isIdInConsideration(ctx, id) {\n    return !ctx.deadIds.has(id);\n  }\n  function idIsWithinNode(ctx, id, targetNode) {\n    let idSet = ctx.idMap.get(targetNode) || EMPTY_SET;\n    return idSet.has(id);\n  }\n  function removeIdsFromConsideration(ctx, node) {\n    let idSet = ctx.idMap.get(node) || EMPTY_SET;\n    for (const id of idSet) {\n      ctx.deadIds.add(id);\n    }\n  }\n  function getIdIntersectionCount(ctx, node1, node2) {\n    let sourceSet = ctx.idMap.get(node1) || EMPTY_SET;\n    let matchCount = 0;\n    for (const id of sourceSet) {\n      // a potential match is an id in the source and potentialIdsSet, but\n      // that has not already been merged into the DOM\n      if (isIdInConsideration(ctx, id) && idIsWithinNode(ctx, id, node2)) {\n        ++matchCount;\n      }\n    }\n    return matchCount;\n  }\n\n  /**\n   * A bottom up algorithm that finds all elements with ids inside of the node\n   * argument and populates id sets for those nodes and all their parents, generating\n   * a set of ids contained within all nodes for the entire hierarchy in the DOM\n   *\n   * @param node {Element}\n   * @param {Map<Node, Set<String>>} idMap\n   */\n  function populateIdMapForNode(node, idMap) {\n    let nodeParent = node.parentElement;\n    // find all elements with an id property\n    let idElements = node.querySelectorAll('[id]');\n    for (const elt of idElements) {\n      let current = elt;\n      // walk up the parent hierarchy of that element, adding the id\n      // of element to the parent's id set\n      while (current !== nodeParent && current != null) {\n        let idSet = idMap.get(current);\n        // if the id set doesn't exist, create it and insert it in the  map\n        if (idSet == null) {\n          idSet = new Set();\n          idMap.set(current, idSet);\n        }\n        idSet.add(elt.id);\n        current = current.parentElement;\n      }\n    }\n  }\n\n  /**\n   * This function computes a map of nodes to all ids contained within that node (inclusive of the\n   * node).  This map can be used to ask if two nodes have intersecting sets of ids, which allows\n   * for a looser definition of \"matching\" than tradition id matching, and allows child nodes\n   * to contribute to a parent nodes matching.\n   *\n   * @param {Element} oldContent  the old content that will be morphed\n   * @param {Element} newContent  the new content to morph to\n   * @returns {Map<Node, Set<String>>} a map of nodes to id sets for the\n   */\n  function createIdMap(oldContent, newContent) {\n    let idMap = new Map();\n    populateIdMapForNode(oldContent, idMap);\n    populateIdMapForNode(newContent, idMap);\n    return idMap;\n  }\n\n  //=============================================================================\n  // This is what ends up becoming the Idiomorph global object\n  //=============================================================================\n  return {\n    morph,\n    defaults\n  };\n}();\nvar _PageRenderer_brand = /*#__PURE__*/new WeakSet();\nclass PageRenderer extends Renderer {\n  constructor() {\n    super(...arguments);\n    _classPrivateMethodInitSpec(this, _PageRenderer_brand);\n  }\n  static renderElement(currentElement, newElement) {\n    if (document.body && newElement instanceof HTMLBodyElement) {\n      document.body.replaceWith(newElement);\n    } else {\n      document.documentElement.appendChild(newElement);\n    }\n  }\n  get shouldRender() {\n    return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;\n  }\n  get reloadReason() {\n    if (!this.newSnapshot.isVisitable) {\n      return {\n        reason: \"turbo_visit_control_is_reload\"\n      };\n    }\n    if (!this.trackedElementsAreIdentical) {\n      return {\n        reason: \"tracked_element_mismatch\"\n      };\n    }\n  }\n  async prepareToRender() {\n    _assertClassBrand(_PageRenderer_brand, this, _setLanguage).call(this);\n    await this.mergeHead();\n  }\n  async render() {\n    if (this.willRender) {\n      await this.replaceBody();\n    }\n  }\n  finishRendering() {\n    super.finishRendering();\n    if (!this.isPreview) {\n      this.focusFirstAutofocusableElement();\n    }\n  }\n  get currentHeadSnapshot() {\n    return this.currentSnapshot.headSnapshot;\n  }\n  get newHeadSnapshot() {\n    return this.newSnapshot.headSnapshot;\n  }\n  get newElement() {\n    return this.newSnapshot.element;\n  }\n  async mergeHead() {\n    const mergedHeadElements = this.mergeProvisionalElements();\n    const newStylesheetElements = this.copyNewHeadStylesheetElements();\n    this.copyNewHeadScriptElements();\n    await mergedHeadElements;\n    await newStylesheetElements;\n    if (this.willRender) {\n      this.removeUnusedDynamicStylesheetElements();\n    }\n  }\n  async replaceBody() {\n    await this.preservingPermanentElements(async () => {\n      this.activateNewBody();\n      await this.assignNewBody();\n    });\n  }\n  get trackedElementsAreIdentical() {\n    return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;\n  }\n  async copyNewHeadStylesheetElements() {\n    const loadingElements = [];\n    for (const element of this.newHeadStylesheetElements) {\n      loadingElements.push(waitForLoad(element));\n      document.head.appendChild(element);\n    }\n    await Promise.all(loadingElements);\n  }\n  copyNewHeadScriptElements() {\n    for (const element of this.newHeadScriptElements) {\n      document.head.appendChild(activateScriptElement(element));\n    }\n  }\n  removeUnusedDynamicStylesheetElements() {\n    for (const element of this.unusedDynamicStylesheetElements) {\n      document.head.removeChild(element);\n    }\n  }\n  async mergeProvisionalElements() {\n    const newHeadElements = [...this.newHeadProvisionalElements];\n    for (const element of this.currentHeadProvisionalElements) {\n      if (!this.isCurrentElementInElementList(element, newHeadElements)) {\n        document.head.removeChild(element);\n      }\n    }\n    for (const element of newHeadElements) {\n      document.head.appendChild(element);\n    }\n  }\n  isCurrentElementInElementList(element, elementList) {\n    for (const [index, newElement] of elementList.entries()) {\n      // if title element...\n      if (element.tagName == \"TITLE\") {\n        if (newElement.tagName != \"TITLE\") {\n          continue;\n        }\n        if (element.innerHTML == newElement.innerHTML) {\n          elementList.splice(index, 1);\n          return true;\n        }\n      }\n\n      // if any other element...\n      if (newElement.isEqualNode(element)) {\n        elementList.splice(index, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n  removeCurrentHeadProvisionalElements() {\n    for (const element of this.currentHeadProvisionalElements) {\n      document.head.removeChild(element);\n    }\n  }\n  copyNewHeadProvisionalElements() {\n    for (const element of this.newHeadProvisionalElements) {\n      document.head.appendChild(element);\n    }\n  }\n  activateNewBody() {\n    document.adoptNode(this.newElement);\n    this.activateNewBodyScriptElements();\n  }\n  activateNewBodyScriptElements() {\n    for (const inertScriptElement of this.newBodyScriptElements) {\n      const activatedScriptElement = activateScriptElement(inertScriptElement);\n      inertScriptElement.replaceWith(activatedScriptElement);\n    }\n  }\n  async assignNewBody() {\n    await this.renderElement(this.currentElement, this.newElement);\n  }\n  get unusedDynamicStylesheetElements() {\n    return this.oldHeadStylesheetElements.filter(element => {\n      return element.getAttribute(\"data-turbo-track\") === \"dynamic\";\n    });\n  }\n  get oldHeadStylesheetElements() {\n    return this.currentHeadSnapshot.getStylesheetElementsNotInSnapshot(this.newHeadSnapshot);\n  }\n  get newHeadStylesheetElements() {\n    return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);\n  }\n  get newHeadScriptElements() {\n    return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);\n  }\n  get currentHeadProvisionalElements() {\n    return this.currentHeadSnapshot.provisionalElements;\n  }\n  get newHeadProvisionalElements() {\n    return this.newHeadSnapshot.provisionalElements;\n  }\n  get newBodyScriptElements() {\n    return this.newElement.querySelectorAll(\"script\");\n  }\n}\nfunction _setLanguage() {\n  const {\n    documentElement\n  } = this.currentSnapshot;\n  const {\n    lang\n  } = this.newSnapshot;\n  if (lang) {\n    documentElement.setAttribute(\"lang\", lang);\n  } else {\n    documentElement.removeAttribute(\"lang\");\n  }\n}\nvar _MorphRenderer_brand = /*#__PURE__*/new WeakSet();\nvar _shouldAddElement = /*#__PURE__*/new WeakMap();\nvar _shouldMorphElement = /*#__PURE__*/new WeakMap();\nvar _shouldUpdateAttribute = /*#__PURE__*/new WeakMap();\nvar _didMorphElement = /*#__PURE__*/new WeakMap();\nvar _shouldRemoveElement = /*#__PURE__*/new WeakMap();\nvar _morphFrameUpdate = /*#__PURE__*/new WeakMap();\nclass MorphRenderer extends PageRenderer {\n  constructor() {\n    super(...arguments);\n    // Private\n    _classPrivateMethodInitSpec(this, _MorphRenderer_brand);\n    _classPrivateFieldInitSpec(this, _shouldAddElement, node => {\n      return !(node.id && node.hasAttribute(\"data-turbo-permanent\") && document.getElementById(node.id));\n    });\n    _classPrivateFieldInitSpec(this, _shouldMorphElement, (oldNode, newNode) => {\n      if (oldNode instanceof HTMLElement) {\n        if (!oldNode.hasAttribute(\"data-turbo-permanent\") && (this.isMorphingTurboFrame || !_assertClassBrand(_MorphRenderer_brand, this, _isFrameReloadedWithMorph).call(this, oldNode))) {\n          const event = dispatch(\"turbo:before-morph-element\", {\n            cancelable: true,\n            target: oldNode,\n            detail: {\n              newElement: newNode\n            }\n          });\n          return !event.defaultPrevented;\n        } else {\n          return false;\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _shouldUpdateAttribute, (attributeName, target, mutationType) => {\n      const event = dispatch(\"turbo:before-morph-attribute\", {\n        cancelable: true,\n        target,\n        detail: {\n          attributeName,\n          mutationType\n        }\n      });\n      return !event.defaultPrevented;\n    });\n    _classPrivateFieldInitSpec(this, _didMorphElement, (oldNode, newNode) => {\n      if (newNode instanceof HTMLElement) {\n        dispatch(\"turbo:morph-element\", {\n          target: oldNode,\n          detail: {\n            newElement: newNode\n          }\n        });\n      }\n    });\n    _classPrivateFieldInitSpec(this, _shouldRemoveElement, node => {\n      return _classPrivateFieldGet(_shouldMorphElement, this).call(this, node);\n    });\n    _classPrivateFieldInitSpec(this, _morphFrameUpdate, (currentElement, newElement) => {\n      dispatch(\"turbo:before-frame-morph\", {\n        target: currentElement,\n        detail: {\n          currentElement,\n          newElement\n        }\n      });\n      _assertClassBrand(_MorphRenderer_brand, this, _morphElements).call(this, currentElement, newElement.children, \"innerHTML\");\n    });\n  }\n  async render() {\n    if (this.willRender) await _assertClassBrand(_MorphRenderer_brand, this, _morphBody).call(this);\n  }\n  get renderMethod() {\n    return \"morph\";\n  }\n}\nasync function _morphBody() {\n  _assertClassBrand(_MorphRenderer_brand, this, _morphElements).call(this, this.currentElement, this.newElement);\n  _assertClassBrand(_MorphRenderer_brand, this, _reloadRemoteFrames).call(this);\n  dispatch(\"turbo:morph\", {\n    detail: {\n      currentElement: this.currentElement,\n      newElement: this.newElement\n    }\n  });\n}\nfunction _morphElements(currentElement, newElement) {\n  let morphStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"outerHTML\";\n  this.isMorphingTurboFrame = _assertClassBrand(_MorphRenderer_brand, this, _isFrameReloadedWithMorph).call(this, currentElement);\n  Idiomorph.morph(currentElement, newElement, {\n    morphStyle: morphStyle,\n    callbacks: {\n      beforeNodeAdded: _classPrivateFieldGet(_shouldAddElement, this),\n      beforeNodeMorphed: _classPrivateFieldGet(_shouldMorphElement, this),\n      beforeAttributeUpdated: _classPrivateFieldGet(_shouldUpdateAttribute, this),\n      beforeNodeRemoved: _classPrivateFieldGet(_shouldRemoveElement, this),\n      afterNodeMorphed: _classPrivateFieldGet(_didMorphElement, this)\n    }\n  });\n}\nfunction _reloadRemoteFrames() {\n  _assertClassBrand(_MorphRenderer_brand, this, _remoteFrames).call(this).forEach(frame => {\n    if (_assertClassBrand(_MorphRenderer_brand, this, _isFrameReloadedWithMorph).call(this, frame)) {\n      _assertClassBrand(_MorphRenderer_brand, this, _renderFrameWithMorph).call(this, frame);\n      frame.reload();\n    }\n  });\n}\nfunction _renderFrameWithMorph(frame) {\n  frame.addEventListener(\"turbo:before-frame-render\", event => {\n    event.detail.render = _classPrivateFieldGet(_morphFrameUpdate, this);\n  }, {\n    once: true\n  });\n}\nfunction _isFrameReloadedWithMorph(element) {\n  return element.src && element.refresh === \"morph\";\n}\nfunction _remoteFrames() {\n  return Array.from(document.querySelectorAll('turbo-frame[src]')).filter(frame => {\n    return !frame.closest('[data-turbo-permanent]');\n  });\n}\nclass SnapshotCache {\n  constructor(size) {\n    _defineProperty(this, \"keys\", []);\n    _defineProperty(this, \"snapshots\", {});\n    this.size = size;\n  }\n  has(location) {\n    return toCacheKey(location) in this.snapshots;\n  }\n  get(location) {\n    if (this.has(location)) {\n      const snapshot = this.read(location);\n      this.touch(location);\n      return snapshot;\n    }\n  }\n  put(location, snapshot) {\n    this.write(location, snapshot);\n    this.touch(location);\n    return snapshot;\n  }\n  clear() {\n    this.snapshots = {};\n  }\n\n  // Private\n\n  read(location) {\n    return this.snapshots[toCacheKey(location)];\n  }\n  write(location, snapshot) {\n    this.snapshots[toCacheKey(location)] = snapshot;\n  }\n  touch(location) {\n    const key = toCacheKey(location);\n    const index = this.keys.indexOf(key);\n    if (index > -1) this.keys.splice(index, 1);\n    this.keys.unshift(key);\n    this.trim();\n  }\n  trim() {\n    for (const key of this.keys.splice(this.size)) {\n      delete this.snapshots[key];\n    }\n  }\n}\nclass PageView extends View {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"snapshotCache\", new SnapshotCache(10));\n    _defineProperty(this, \"lastRenderedLocation\", new URL(location.href));\n    _defineProperty(this, \"forceReloaded\", false);\n  }\n  shouldTransitionTo(newSnapshot) {\n    return this.snapshot.prefersViewTransitions && newSnapshot.prefersViewTransitions;\n  }\n  renderPage(snapshot) {\n    let isPreview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let willRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let visit = arguments.length > 3 ? arguments[3] : undefined;\n    const shouldMorphPage = this.isPageRefresh(visit) && this.snapshot.shouldMorphPage;\n    const rendererClass = shouldMorphPage ? MorphRenderer : PageRenderer;\n    const renderer = new rendererClass(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);\n    if (!renderer.shouldRender) {\n      this.forceReloaded = true;\n    } else {\n      visit === null || visit === void 0 ? void 0 : visit.changeHistory();\n    }\n    return this.render(renderer);\n  }\n  renderError(snapshot, visit) {\n    visit === null || visit === void 0 ? void 0 : visit.changeHistory();\n    const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);\n    return this.render(renderer);\n  }\n  clearSnapshotCache() {\n    this.snapshotCache.clear();\n  }\n  async cacheSnapshot() {\n    let snapshot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.snapshot;\n    if (snapshot.isCacheable) {\n      this.delegate.viewWillCacheSnapshot();\n      const {\n        lastRenderedLocation: location\n      } = this;\n      await nextEventLoopTick();\n      const cachedSnapshot = snapshot.clone();\n      this.snapshotCache.put(location, cachedSnapshot);\n      return cachedSnapshot;\n    }\n  }\n  getCachedSnapshotForLocation(location) {\n    return this.snapshotCache.get(location);\n  }\n  isPageRefresh(visit) {\n    return !visit || this.lastRenderedLocation.pathname === visit.location.pathname && visit.action === \"replace\";\n  }\n  shouldPreserveScrollPosition(visit) {\n    return this.isPageRefresh(visit) && this.snapshot.shouldPreserveScrollPosition;\n  }\n  get snapshot() {\n    return PageSnapshot.fromElement(this.element);\n  }\n}\nvar _preloadAll = /*#__PURE__*/new WeakMap();\nclass Preloader {\n  constructor(delegate, snapshotCache) {\n    _defineProperty(this, \"selector\", \"a[data-turbo-preload]\");\n    _classPrivateFieldInitSpec(this, _preloadAll, () => {\n      this.preloadOnLoadLinksForView(document.body);\n    });\n    this.delegate = delegate;\n    this.snapshotCache = snapshotCache;\n  }\n  start() {\n    if (document.readyState === \"loading\") {\n      document.addEventListener(\"DOMContentLoaded\", _classPrivateFieldGet(_preloadAll, this));\n    } else {\n      this.preloadOnLoadLinksForView(document.body);\n    }\n  }\n  stop() {\n    document.removeEventListener(\"DOMContentLoaded\", _classPrivateFieldGet(_preloadAll, this));\n  }\n  preloadOnLoadLinksForView(element) {\n    for (const link of element.querySelectorAll(this.selector)) {\n      if (this.delegate.shouldPreloadLink(link)) {\n        this.preloadURL(link);\n      }\n    }\n  }\n  async preloadURL(link) {\n    const location = new URL(link.href);\n    if (this.snapshotCache.has(location)) {\n      return;\n    }\n    const fetchRequest = new FetchRequest(this, FetchMethod.get, location, new URLSearchParams(), link);\n    await fetchRequest.perform();\n  }\n\n  // Fetch request delegate\n\n  prepareRequest(fetchRequest) {\n    fetchRequest.headers[\"X-Sec-Purpose\"] = \"prefetch\";\n  }\n  async requestSucceededWithResponse(fetchRequest, fetchResponse) {\n    try {\n      const responseHTML = await fetchResponse.responseHTML;\n      const snapshot = PageSnapshot.fromHTMLString(responseHTML);\n      this.snapshotCache.put(fetchRequest.url, snapshot);\n    } catch (_) {\n      // If we cannot preload that is ok!\n    }\n  }\n  requestStarted(fetchRequest) {}\n  requestErrored(fetchRequest) {}\n  requestFinished(fetchRequest) {}\n  requestPreventedHandlingResponse(fetchRequest, fetchResponse) {}\n  requestFailedWithResponse(fetchRequest, fetchResponse) {}\n}\nvar _Cache_brand = /*#__PURE__*/new WeakSet();\nclass Cache {\n  constructor(session) {\n    _classPrivateMethodInitSpec(this, _Cache_brand);\n    this.session = session;\n  }\n  clear() {\n    this.session.clearCache();\n  }\n  resetCacheControl() {\n    _assertClassBrand(_Cache_brand, this, _setCacheControl).call(this, \"\");\n  }\n  exemptPageFromCache() {\n    _assertClassBrand(_Cache_brand, this, _setCacheControl).call(this, \"no-cache\");\n  }\n  exemptPageFromPreview() {\n    _assertClassBrand(_Cache_brand, this, _setCacheControl).call(this, \"no-preview\");\n  }\n}\nfunction _setCacheControl(value) {\n  setMetaContent(\"turbo-cache-control\", value);\n}\nvar _pageRefreshDebouncePeriod = /*#__PURE__*/new WeakMap();\nclass Session {\n  constructor(recentRequests) {\n    _defineProperty(this, \"navigator\", new Navigator(this));\n    _defineProperty(this, \"history\", new History(this));\n    _defineProperty(this, \"view\", new PageView(this, document.documentElement));\n    _defineProperty(this, \"adapter\", new BrowserAdapter(this));\n    _defineProperty(this, \"pageObserver\", new PageObserver(this));\n    _defineProperty(this, \"cacheObserver\", new CacheObserver());\n    _defineProperty(this, \"linkPrefetchObserver\", new LinkPrefetchObserver(this, document));\n    _defineProperty(this, \"linkClickObserver\", new LinkClickObserver(this, window));\n    _defineProperty(this, \"formSubmitObserver\", new FormSubmitObserver(this, document));\n    _defineProperty(this, \"scrollObserver\", new ScrollObserver(this));\n    _defineProperty(this, \"streamObserver\", new StreamObserver(this));\n    _defineProperty(this, \"formLinkClickObserver\", new FormLinkClickObserver(this, document.documentElement));\n    _defineProperty(this, \"frameRedirector\", new FrameRedirector(this, document.documentElement));\n    _defineProperty(this, \"streamMessageRenderer\", new StreamMessageRenderer());\n    _defineProperty(this, \"cache\", new Cache(this));\n    _defineProperty(this, \"drive\", true);\n    _defineProperty(this, \"enabled\", true);\n    _defineProperty(this, \"progressBarDelay\", 500);\n    _defineProperty(this, \"started\", false);\n    _defineProperty(this, \"formMode\", \"on\");\n    _classPrivateFieldInitSpec(this, _pageRefreshDebouncePeriod, 150);\n    this.recentRequests = recentRequests;\n    this.preloader = new Preloader(this, this.view.snapshotCache);\n    this.debouncedRefresh = this.refresh;\n    this.pageRefreshDebouncePeriod = this.pageRefreshDebouncePeriod;\n  }\n  start() {\n    if (!this.started) {\n      this.pageObserver.start();\n      this.cacheObserver.start();\n      this.linkPrefetchObserver.start();\n      this.formLinkClickObserver.start();\n      this.linkClickObserver.start();\n      this.formSubmitObserver.start();\n      this.scrollObserver.start();\n      this.streamObserver.start();\n      this.frameRedirector.start();\n      this.history.start();\n      this.preloader.start();\n      this.started = true;\n      this.enabled = true;\n    }\n  }\n  disable() {\n    this.enabled = false;\n  }\n  stop() {\n    if (this.started) {\n      this.pageObserver.stop();\n      this.cacheObserver.stop();\n      this.linkPrefetchObserver.stop();\n      this.formLinkClickObserver.stop();\n      this.linkClickObserver.stop();\n      this.formSubmitObserver.stop();\n      this.scrollObserver.stop();\n      this.streamObserver.stop();\n      this.frameRedirector.stop();\n      this.history.stop();\n      this.preloader.stop();\n      this.started = false;\n    }\n  }\n  registerAdapter(adapter) {\n    this.adapter = adapter;\n  }\n  visit(location) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const frameElement = options.frame ? document.getElementById(options.frame) : null;\n    if (frameElement instanceof FrameElement) {\n      const action = options.action || getVisitAction(frameElement);\n      frameElement.delegate.proposeVisitIfNavigatedWithAction(frameElement, action);\n      frameElement.src = location.toString();\n    } else {\n      this.navigator.proposeVisit(expandURL(location), options);\n    }\n  }\n  refresh(url, requestId) {\n    const isRecentRequest = requestId && this.recentRequests.has(requestId);\n    if (!isRecentRequest) {\n      this.visit(url, {\n        action: \"replace\",\n        shouldCacheSnapshot: false\n      });\n    }\n  }\n  connectStreamSource(source) {\n    this.streamObserver.connectStreamSource(source);\n  }\n  disconnectStreamSource(source) {\n    this.streamObserver.disconnectStreamSource(source);\n  }\n  renderStreamMessage(message) {\n    this.streamMessageRenderer.render(StreamMessage.wrap(message));\n  }\n  clearCache() {\n    this.view.clearSnapshotCache();\n  }\n  setProgressBarDelay(delay) {\n    this.progressBarDelay = delay;\n  }\n  setFormMode(mode) {\n    this.formMode = mode;\n  }\n  get location() {\n    return this.history.location;\n  }\n  get restorationIdentifier() {\n    return this.history.restorationIdentifier;\n  }\n  get pageRefreshDebouncePeriod() {\n    return _classPrivateFieldGet(_pageRefreshDebouncePeriod, this);\n  }\n  set pageRefreshDebouncePeriod(value) {\n    this.refresh = debounce(this.debouncedRefresh.bind(this), value);\n    _classPrivateFieldSet(_pageRefreshDebouncePeriod, this, value);\n  }\n\n  // Preloader delegate\n\n  shouldPreloadLink(element) {\n    const isUnsafe = element.hasAttribute(\"data-turbo-method\");\n    const isStream = element.hasAttribute(\"data-turbo-stream\");\n    const frameTarget = element.getAttribute(\"data-turbo-frame\");\n    const frame = frameTarget == \"_top\" ? null : document.getElementById(frameTarget) || findClosestRecursively(element, \"turbo-frame:not([disabled])\");\n    if (isUnsafe || isStream || frame instanceof FrameElement) {\n      return false;\n    } else {\n      const location = new URL(element.href);\n      return this.elementIsNavigatable(element) && locationIsVisitable(location, this.snapshot.rootLocation);\n    }\n  }\n\n  // History delegate\n\n  historyPoppedToLocationWithRestorationIdentifierAndDirection(location, restorationIdentifier, direction) {\n    if (this.enabled) {\n      this.navigator.startVisit(location, restorationIdentifier, {\n        action: \"restore\",\n        historyChanged: true,\n        direction\n      });\n    } else {\n      this.adapter.pageInvalidated({\n        reason: \"turbo_disabled\"\n      });\n    }\n  }\n\n  // Scroll observer delegate\n\n  scrollPositionChanged(position) {\n    this.history.updateRestorationData({\n      scrollPosition: position\n    });\n  }\n\n  // Form click observer delegate\n\n  willSubmitFormLinkToLocation(link, location) {\n    return this.elementIsNavigatable(link) && locationIsVisitable(location, this.snapshot.rootLocation);\n  }\n  submittedFormLinkToLocation() {}\n\n  // Link hover observer delegate\n\n  canPrefetchRequestToLocation(link, location) {\n    return this.elementIsNavigatable(link) && locationIsVisitable(location, this.snapshot.rootLocation);\n  }\n\n  // Link click observer delegate\n\n  willFollowLinkToLocation(link, location, event) {\n    return this.elementIsNavigatable(link) && locationIsVisitable(location, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location, event);\n  }\n  followedLinkToLocation(link, location) {\n    const action = this.getActionForLink(link);\n    const acceptsStreamResponse = link.hasAttribute(\"data-turbo-stream\");\n    this.visit(location.href, {\n      action,\n      acceptsStreamResponse\n    });\n  }\n\n  // Navigator delegate\n\n  allowsVisitingLocationWithAction(location, action) {\n    return this.locationWithActionIsSamePage(location, action) || this.applicationAllowsVisitingLocation(location);\n  }\n  visitProposedToLocation(location, options) {\n    extendURLWithDeprecatedProperties(location);\n    this.adapter.visitProposedToLocation(location, options);\n  }\n\n  // Visit delegate\n\n  visitStarted(visit) {\n    if (!visit.acceptsStreamResponse) {\n      markAsBusy(document.documentElement);\n      this.view.markVisitDirection(visit.direction);\n    }\n    extendURLWithDeprecatedProperties(visit.location);\n    if (!visit.silent) {\n      this.notifyApplicationAfterVisitingLocation(visit.location, visit.action);\n    }\n  }\n  visitCompleted(visit) {\n    this.view.unmarkVisitDirection();\n    clearBusyState(document.documentElement);\n    this.notifyApplicationAfterPageLoad(visit.getTimingMetrics());\n  }\n  locationWithActionIsSamePage(location, action) {\n    return this.navigator.locationWithActionIsSamePage(location, action);\n  }\n  visitScrolledToSamePageLocation(oldURL, newURL) {\n    this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);\n  }\n\n  // Form submit observer delegate\n\n  willSubmitForm(form, submitter) {\n    const action = getAction$1(form, submitter);\n    return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);\n  }\n  formSubmitted(form, submitter) {\n    this.navigator.submitForm(form, submitter);\n  }\n\n  // Page observer delegate\n\n  pageBecameInteractive() {\n    this.view.lastRenderedLocation = this.location;\n    this.notifyApplicationAfterPageLoad();\n  }\n  pageLoaded() {\n    this.history.assumeControlOfScrollRestoration();\n  }\n  pageWillUnload() {\n    this.history.relinquishControlOfScrollRestoration();\n  }\n\n  // Stream observer delegate\n\n  receivedMessageFromStream(message) {\n    this.renderStreamMessage(message);\n  }\n\n  // Page view delegate\n\n  viewWillCacheSnapshot() {\n    var _this$navigator$curre;\n    if (!((_this$navigator$curre = this.navigator.currentVisit) !== null && _this$navigator$curre !== void 0 && _this$navigator$curre.silent)) {\n      this.notifyApplicationBeforeCachingSnapshot();\n    }\n  }\n  allowsImmediateRender(_ref6, options) {\n    let {\n      element\n    } = _ref6;\n    const event = this.notifyApplicationBeforeRender(element, options);\n    const {\n      defaultPrevented,\n      detail: {\n        render\n      }\n    } = event;\n    if (this.view.renderer && render) {\n      this.view.renderer.renderElement = render;\n    }\n    return !defaultPrevented;\n  }\n  viewRenderedSnapshot(_snapshot, _isPreview, renderMethod) {\n    this.view.lastRenderedLocation = this.history.location;\n    this.notifyApplicationAfterRender(renderMethod);\n  }\n  preloadOnLoadLinksForView(element) {\n    this.preloader.preloadOnLoadLinksForView(element);\n  }\n  viewInvalidated(reason) {\n    this.adapter.pageInvalidated(reason);\n  }\n\n  // Frame element\n\n  frameLoaded(frame) {\n    this.notifyApplicationAfterFrameLoad(frame);\n  }\n  frameRendered(fetchResponse, frame) {\n    this.notifyApplicationAfterFrameRender(fetchResponse, frame);\n  }\n\n  // Application events\n\n  applicationAllowsFollowingLinkToLocation(link, location, ev) {\n    const event = this.notifyApplicationAfterClickingLinkToLocation(link, location, ev);\n    return !event.defaultPrevented;\n  }\n  applicationAllowsVisitingLocation(location) {\n    const event = this.notifyApplicationBeforeVisitingLocation(location);\n    return !event.defaultPrevented;\n  }\n  notifyApplicationAfterClickingLinkToLocation(link, location, event) {\n    return dispatch(\"turbo:click\", {\n      target: link,\n      detail: {\n        url: location.href,\n        originalEvent: event\n      },\n      cancelable: true\n    });\n  }\n  notifyApplicationBeforeVisitingLocation(location) {\n    return dispatch(\"turbo:before-visit\", {\n      detail: {\n        url: location.href\n      },\n      cancelable: true\n    });\n  }\n  notifyApplicationAfterVisitingLocation(location, action) {\n    return dispatch(\"turbo:visit\", {\n      detail: {\n        url: location.href,\n        action\n      }\n    });\n  }\n  notifyApplicationBeforeCachingSnapshot() {\n    return dispatch(\"turbo:before-cache\");\n  }\n  notifyApplicationBeforeRender(newBody, options) {\n    return dispatch(\"turbo:before-render\", {\n      detail: {\n        newBody,\n        ...options\n      },\n      cancelable: true\n    });\n  }\n  notifyApplicationAfterRender(renderMethod) {\n    return dispatch(\"turbo:render\", {\n      detail: {\n        renderMethod\n      }\n    });\n  }\n  notifyApplicationAfterPageLoad() {\n    let timing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return dispatch(\"turbo:load\", {\n      detail: {\n        url: this.location.href,\n        timing\n      }\n    });\n  }\n  notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {\n    dispatchEvent(new HashChangeEvent(\"hashchange\", {\n      oldURL: oldURL.toString(),\n      newURL: newURL.toString()\n    }));\n  }\n  notifyApplicationAfterFrameLoad(frame) {\n    return dispatch(\"turbo:frame-load\", {\n      target: frame\n    });\n  }\n  notifyApplicationAfterFrameRender(fetchResponse, frame) {\n    return dispatch(\"turbo:frame-render\", {\n      detail: {\n        fetchResponse\n      },\n      target: frame,\n      cancelable: true\n    });\n  }\n\n  // Helpers\n\n  submissionIsNavigatable(form, submitter) {\n    if (this.formMode == \"off\") {\n      return false;\n    } else {\n      const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;\n      if (this.formMode == \"optin\") {\n        return submitterIsNavigatable && form.closest('[data-turbo=\"true\"]') != null;\n      } else {\n        return submitterIsNavigatable && this.elementIsNavigatable(form);\n      }\n    }\n  }\n  elementIsNavigatable(element) {\n    const container = findClosestRecursively(element, \"[data-turbo]\");\n    const withinFrame = findClosestRecursively(element, \"turbo-frame\");\n\n    // Check if Drive is enabled on the session or we're within a Frame.\n    if (this.drive || withinFrame) {\n      // Element is navigatable by default, unless `data-turbo=\"false\"`.\n      if (container) {\n        return container.getAttribute(\"data-turbo\") != \"false\";\n      } else {\n        return true;\n      }\n    } else {\n      // Element isn't navigatable by default, unless `data-turbo=\"true\"`.\n      if (container) {\n        return container.getAttribute(\"data-turbo\") == \"true\";\n      } else {\n        return false;\n      }\n    }\n  }\n\n  // Private\n\n  getActionForLink(link) {\n    return getVisitAction(link) || \"advance\";\n  }\n  get snapshot() {\n    return this.view.snapshot;\n  }\n}\n\n// Older versions of the Turbo Native adapters referenced the\n// `Location#absoluteURL` property in their implementations of\n// the `Adapter#visitProposedToLocation()` and `#visitStarted()`\n// methods. The Location class has since been removed in favor\n// of the DOM URL API, and accordingly all Adapter methods now\n// receive URL objects.\n//\n// We alias #absoluteURL to #toString() here to avoid crashing\n// older adapters which do not expect URL objects. We should\n// consider removing this support at some point in the future.\n\nfunction extendURLWithDeprecatedProperties(url) {\n  Object.defineProperties(url, deprecatedLocationPropertyDescriptors);\n}\nconst deprecatedLocationPropertyDescriptors = {\n  absoluteURL: {\n    get() {\n      return this.toString();\n    }\n  }\n};\nconst session = new Session(recentRequests);\nconst {\n  cache,\n  navigator: navigator$1\n} = session;\n\n/**\n * Starts the main session.\n * This initialises any necessary observers such as those to monitor\n * link interactions.\n */\nfunction start() {\n  session.start();\n}\n\n/**\n * Registers an adapter for the main session.\n *\n * @param adapter Adapter to register\n */\nfunction registerAdapter(adapter) {\n  session.registerAdapter(adapter);\n}\n\n/**\n * Performs an application visit to the given location.\n *\n * @param location Location to visit (a URL or path)\n * @param options Options to apply\n * @param options.action Type of history navigation to apply (\"restore\",\n * \"replace\" or \"advance\")\n * @param options.historyChanged Specifies whether the browser history has\n * already been changed for this visit or not\n * @param options.referrer Specifies the referrer of this visit such that\n * navigations to the same page will not result in a new history entry.\n * @param options.snapshotHTML Cached snapshot to render\n * @param options.response Response of the specified location\n */\nfunction visit(location, options) {\n  session.visit(location, options);\n}\n\n/**\n * Connects a stream source to the main session.\n *\n * @param source Stream source to connect\n */\nfunction connectStreamSource(source) {\n  session.connectStreamSource(source);\n}\n\n/**\n * Disconnects a stream source from the main session.\n *\n * @param source Stream source to disconnect\n */\nfunction disconnectStreamSource(source) {\n  session.disconnectStreamSource(source);\n}\n\n/**\n * Renders a stream message to the main session by appending it to the\n * current document.\n *\n * @param message Message to render\n */\nfunction renderStreamMessage(message) {\n  session.renderStreamMessage(message);\n}\n\n/**\n * Removes all entries from the Turbo Drive page cache.\n * Call this when state has changed on the server that may affect cached pages.\n *\n * @deprecated since version 7.2.0 in favor of `Turbo.cache.clear()`\n */\nfunction clearCache() {\n  console.warn(\"Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`\");\n  session.clearCache();\n}\n\n/**\n * Sets the delay after which the progress bar will appear during navigation.\n *\n * The progress bar appears after 500ms by default.\n *\n * Note that this method has no effect when used with the iOS or Android\n * adapters.\n *\n * @param delay Time to delay in milliseconds\n */\nfunction setProgressBarDelay(delay) {\n  session.setProgressBarDelay(delay);\n}\nfunction setConfirmMethod(confirmMethod) {\n  FormSubmission.confirmMethod = confirmMethod;\n}\nfunction setFormMode(mode) {\n  session.setFormMode(mode);\n}\nvar Turbo = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  navigator: navigator$1,\n  session: session,\n  cache: cache,\n  PageRenderer: PageRenderer,\n  PageSnapshot: PageSnapshot,\n  FrameRenderer: FrameRenderer,\n  fetch: fetchWithTurboHeaders,\n  start: start,\n  registerAdapter: registerAdapter,\n  visit: visit,\n  connectStreamSource: connectStreamSource,\n  disconnectStreamSource: disconnectStreamSource,\n  renderStreamMessage: renderStreamMessage,\n  clearCache: clearCache,\n  setProgressBarDelay: setProgressBarDelay,\n  setConfirmMethod: setConfirmMethod,\n  setFormMode: setFormMode\n});\nclass TurboFrameMissingError extends Error {}\nvar _currentFetchRequest = /*#__PURE__*/new WeakMap();\nvar _resolveVisitPromise = /*#__PURE__*/new WeakMap();\nvar _connected = /*#__PURE__*/new WeakMap();\nvar _hasBeenLoaded = /*#__PURE__*/new WeakMap();\nvar _ignoredAttributes = /*#__PURE__*/new WeakMap();\nvar _FrameController_brand = /*#__PURE__*/new WeakSet();\nclass FrameController {\n  constructor(_element3) {\n    _classPrivateMethodInitSpec(this, _FrameController_brand);\n    _defineProperty(this, \"fetchResponseLoaded\", _fetchResponse => Promise.resolve());\n    _classPrivateFieldInitSpec(this, _currentFetchRequest, null);\n    _classPrivateFieldInitSpec(this, _resolveVisitPromise, () => {});\n    _classPrivateFieldInitSpec(this, _connected, false);\n    _classPrivateFieldInitSpec(this, _hasBeenLoaded, false);\n    _classPrivateFieldInitSpec(this, _ignoredAttributes, new Set());\n    _defineProperty(this, \"action\", null);\n    _defineProperty(this, \"visitCachedSnapshot\", _ref7 => {\n      let {\n        element\n      } = _ref7;\n      const frame = element.querySelector(\"#\" + this.element.id);\n      if (frame && this.previousFrameElement) {\n        frame.replaceChildren(...this.previousFrameElement.children);\n      }\n      delete this.previousFrameElement;\n    });\n    this.element = _element3;\n    this.view = new FrameView(this, this.element);\n    this.appearanceObserver = new AppearanceObserver(this, this.element);\n    this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);\n    this.linkInterceptor = new LinkInterceptor(this, this.element);\n    this.restorationIdentifier = uuid();\n    this.formSubmitObserver = new FormSubmitObserver(this, this.element);\n  }\n\n  // Frame delegate\n\n  connect() {\n    if (!_classPrivateFieldGet(_connected, this)) {\n      _classPrivateFieldSet(_connected, this, true);\n      if (this.loadingStyle == FrameLoadingStyle.lazy) {\n        this.appearanceObserver.start();\n      } else {\n        _assertClassBrand(_FrameController_brand, this, _loadSourceURL).call(this);\n      }\n      this.formLinkClickObserver.start();\n      this.linkInterceptor.start();\n      this.formSubmitObserver.start();\n    }\n  }\n  disconnect() {\n    if (_classPrivateFieldGet(_connected, this)) {\n      _classPrivateFieldSet(_connected, this, false);\n      this.appearanceObserver.stop();\n      this.formLinkClickObserver.stop();\n      this.linkInterceptor.stop();\n      this.formSubmitObserver.stop();\n    }\n  }\n  disabledChanged() {\n    if (this.loadingStyle == FrameLoadingStyle.eager) {\n      _assertClassBrand(_FrameController_brand, this, _loadSourceURL).call(this);\n    }\n  }\n  sourceURLChanged() {\n    if (_assertClassBrand(_FrameController_brand, this, _isIgnoringChangesTo).call(this, \"src\")) return;\n    if (this.element.isConnected) {\n      this.complete = false;\n    }\n    if (this.loadingStyle == FrameLoadingStyle.eager || _classPrivateFieldGet(_hasBeenLoaded, this)) {\n      _assertClassBrand(_FrameController_brand, this, _loadSourceURL).call(this);\n    }\n  }\n  sourceURLReloaded() {\n    const {\n      src\n    } = this.element;\n    this.element.removeAttribute(\"complete\");\n    this.element.src = null;\n    this.element.src = src;\n    return this.element.loaded;\n  }\n  loadingStyleChanged() {\n    if (this.loadingStyle == FrameLoadingStyle.lazy) {\n      this.appearanceObserver.start();\n    } else {\n      this.appearanceObserver.stop();\n      _assertClassBrand(_FrameController_brand, this, _loadSourceURL).call(this);\n    }\n  }\n  async loadResponse(fetchResponse) {\n    if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {\n      this.sourceURL = fetchResponse.response.url;\n    }\n    try {\n      const html = await fetchResponse.responseHTML;\n      if (html) {\n        const document = parseHTMLDocument(html);\n        const pageSnapshot = PageSnapshot.fromDocument(document);\n        if (pageSnapshot.isVisitable) {\n          await _assertClassBrand(_FrameController_brand, this, _loadFrameResponse).call(this, fetchResponse, document);\n        } else {\n          await _assertClassBrand(_FrameController_brand, this, _handleUnvisitableFrameResponse).call(this, fetchResponse);\n        }\n      }\n    } finally {\n      this.fetchResponseLoaded = () => Promise.resolve();\n    }\n  }\n\n  // Appearance observer delegate\n\n  elementAppearedInViewport(element) {\n    this.proposeVisitIfNavigatedWithAction(element, getVisitAction(element));\n    _assertClassBrand(_FrameController_brand, this, _loadSourceURL).call(this);\n  }\n\n  // Form link click observer delegate\n\n  willSubmitFormLinkToLocation(link) {\n    return _assertClassBrand(_FrameController_brand, this, _shouldInterceptNavigation).call(this, link);\n  }\n  submittedFormLinkToLocation(link, _location, form) {\n    const frame = _assertClassBrand(_FrameController_brand, this, _findFrameElement2).call(this, link);\n    if (frame) form.setAttribute(\"data-turbo-frame\", frame.id);\n  }\n\n  // Link interceptor delegate\n\n  shouldInterceptLinkClick(element, _location, _event) {\n    return _assertClassBrand(_FrameController_brand, this, _shouldInterceptNavigation).call(this, element);\n  }\n  linkClickIntercepted(element, location) {\n    _assertClassBrand(_FrameController_brand, this, _navigateFrame).call(this, element, location);\n  }\n\n  // Form submit observer delegate\n\n  willSubmitForm(element, submitter) {\n    return element.closest(\"turbo-frame\") == this.element && _assertClassBrand(_FrameController_brand, this, _shouldInterceptNavigation).call(this, element, submitter);\n  }\n  formSubmitted(element, submitter) {\n    if (this.formSubmission) {\n      this.formSubmission.stop();\n    }\n    this.formSubmission = new FormSubmission(this, element, submitter);\n    const {\n      fetchRequest\n    } = this.formSubmission;\n    this.prepareRequest(fetchRequest);\n    this.formSubmission.start();\n  }\n\n  // Fetch request delegate\n\n  prepareRequest(request) {\n    var _this$currentNavigati;\n    request.headers[\"Turbo-Frame\"] = this.id;\n    if ((_this$currentNavigati = this.currentNavigationElement) !== null && _this$currentNavigati !== void 0 && _this$currentNavigati.hasAttribute(\"data-turbo-stream\")) {\n      request.acceptResponseType(StreamMessage.contentType);\n    }\n  }\n  requestStarted(_request) {\n    markAsBusy(this.element);\n  }\n  requestPreventedHandlingResponse(_request, _response) {\n    _classPrivateFieldGet(_resolveVisitPromise, this).call(this);\n  }\n  async requestSucceededWithResponse(request, response) {\n    await this.loadResponse(response);\n    _classPrivateFieldGet(_resolveVisitPromise, this).call(this);\n  }\n  async requestFailedWithResponse(request, response) {\n    await this.loadResponse(response);\n    _classPrivateFieldGet(_resolveVisitPromise, this).call(this);\n  }\n  requestErrored(request, error) {\n    console.error(error);\n    _classPrivateFieldGet(_resolveVisitPromise, this).call(this);\n  }\n  requestFinished(_request) {\n    clearBusyState(this.element);\n  }\n\n  // Form submission delegate\n\n  formSubmissionStarted(_ref8) {\n    let {\n      formElement\n    } = _ref8;\n    markAsBusy(formElement, _assertClassBrand(_FrameController_brand, this, _findFrameElement2).call(this, formElement));\n  }\n  formSubmissionSucceededWithResponse(formSubmission, response) {\n    const frame = _assertClassBrand(_FrameController_brand, this, _findFrameElement2).call(this, formSubmission.formElement, formSubmission.submitter);\n    frame.delegate.proposeVisitIfNavigatedWithAction(frame, getVisitAction(formSubmission.submitter, formSubmission.formElement, frame));\n    frame.delegate.loadResponse(response);\n    if (!formSubmission.isSafe) {\n      session.clearCache();\n    }\n  }\n  formSubmissionFailedWithResponse(formSubmission, fetchResponse) {\n    this.element.delegate.loadResponse(fetchResponse);\n    session.clearCache();\n  }\n  formSubmissionErrored(formSubmission, error) {\n    console.error(error);\n  }\n  formSubmissionFinished(_ref9) {\n    let {\n      formElement\n    } = _ref9;\n    clearBusyState(formElement, _assertClassBrand(_FrameController_brand, this, _findFrameElement2).call(this, formElement));\n  }\n\n  // View delegate\n\n  allowsImmediateRender(_ref10, options) {\n    let {\n      element: newFrame\n    } = _ref10;\n    const event = dispatch(\"turbo:before-frame-render\", {\n      target: this.element,\n      detail: {\n        newFrame,\n        ...options\n      },\n      cancelable: true\n    });\n    const {\n      defaultPrevented,\n      detail: {\n        render\n      }\n    } = event;\n    if (this.view.renderer && render) {\n      this.view.renderer.renderElement = render;\n    }\n    return !defaultPrevented;\n  }\n  viewRenderedSnapshot(_snapshot, _isPreview, _renderMethod) {}\n  preloadOnLoadLinksForView(element) {\n    session.preloadOnLoadLinksForView(element);\n  }\n  viewInvalidated() {}\n\n  // Frame renderer delegate\n\n  willRenderFrame(currentElement, _newElement) {\n    this.previousFrameElement = currentElement.cloneNode(true);\n  }\n  proposeVisitIfNavigatedWithAction(frame) {\n    let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.action = action;\n    if (this.action) {\n      const pageSnapshot = PageSnapshot.fromElement(frame).clone();\n      const {\n        visitCachedSnapshot\n      } = frame.delegate;\n      frame.delegate.fetchResponseLoaded = async fetchResponse => {\n        if (frame.src) {\n          const {\n            statusCode,\n            redirected\n          } = fetchResponse;\n          const responseHTML = await fetchResponse.responseHTML;\n          const response = {\n            statusCode,\n            redirected,\n            responseHTML\n          };\n          const options = {\n            response,\n            visitCachedSnapshot,\n            willRender: false,\n            updateHistory: false,\n            restorationIdentifier: this.restorationIdentifier,\n            snapshot: pageSnapshot\n          };\n          if (this.action) options.action = this.action;\n          session.visit(frame.src, options);\n        }\n      };\n    }\n  }\n  changeHistory() {\n    if (this.action) {\n      const method = getHistoryMethodForAction(this.action);\n      session.history.update(method, expandURL(this.element.src || \"\"), this.restorationIdentifier);\n    }\n  }\n  async extractForeignFrameElement(container) {\n    let element;\n    const id = CSS.escape(this.id);\n    try {\n      element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);\n      if (element) {\n        return element;\n      }\n      element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);\n      if (element) {\n        await element.loaded;\n        return await this.extractForeignFrameElement(element);\n      }\n    } catch (error) {\n      console.error(error);\n      return new FrameElement();\n    }\n    return null;\n  }\n  // Computed properties\n\n  get id() {\n    return this.element.id;\n  }\n  get enabled() {\n    return !this.element.disabled;\n  }\n  get sourceURL() {\n    if (this.element.src) {\n      return this.element.src;\n    }\n  }\n  set sourceURL(sourceURL) {\n    _assertClassBrand(_FrameController_brand, this, _ignoringChangesToAttribute).call(this, \"src\", () => {\n      this.element.src = sourceURL ?? null;\n    });\n  }\n  get loadingStyle() {\n    return this.element.loading;\n  }\n  get isLoading() {\n    return this.formSubmission !== undefined || _classPrivateFieldGet(_resolveVisitPromise, this).call(this) !== undefined;\n  }\n  get complete() {\n    return this.element.hasAttribute(\"complete\");\n  }\n  set complete(value) {\n    if (value) {\n      this.element.setAttribute(\"complete\", \"\");\n    } else {\n      this.element.removeAttribute(\"complete\");\n    }\n  }\n  get isActive() {\n    return this.element.isActive && _classPrivateFieldGet(_connected, this);\n  }\n  get rootLocation() {\n    const meta = this.element.ownerDocument.querySelector(`meta[name=\"turbo-root\"]`);\n    const root = (meta === null || meta === void 0 ? void 0 : meta.content) ?? \"/\";\n    return expandURL(root);\n  }\n}\nasync function _loadSourceURL() {\n  if (this.enabled && this.isActive && !this.complete && this.sourceURL) {\n    this.element.loaded = _assertClassBrand(_FrameController_brand, this, _visit2).call(this, expandURL(this.sourceURL));\n    this.appearanceObserver.stop();\n    await this.element.loaded;\n    _classPrivateFieldSet(_hasBeenLoaded, this, true);\n  }\n}\n// Private\nasync function _loadFrameResponse(fetchResponse, document) {\n  const newFrameElement = await this.extractForeignFrameElement(document.body);\n  if (newFrameElement) {\n    const snapshot = new Snapshot(newFrameElement);\n    const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);\n    if (this.view.renderPromise) await this.view.renderPromise;\n    this.changeHistory();\n    await this.view.render(renderer);\n    this.complete = true;\n    session.frameRendered(fetchResponse, this.element);\n    session.frameLoaded(this.element);\n    await this.fetchResponseLoaded(fetchResponse);\n  } else if (_assertClassBrand(_FrameController_brand, this, _willHandleFrameMissingFromResponse).call(this, fetchResponse)) {\n    _assertClassBrand(_FrameController_brand, this, _handleFrameMissingFromResponse).call(this, fetchResponse);\n  }\n}\nasync function _visit2(url) {\n  var _classPrivateFieldGet2;\n  const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);\n  (_classPrivateFieldGet2 = _classPrivateFieldGet(_currentFetchRequest, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.cancel();\n  _classPrivateFieldSet(_currentFetchRequest, this, request);\n  return new Promise(resolve => {\n    _classPrivateFieldSet(_resolveVisitPromise, this, () => {\n      _classPrivateFieldSet(_resolveVisitPromise, this, () => {});\n      _classPrivateFieldSet(_currentFetchRequest, this, null);\n      resolve();\n    });\n    request.perform();\n  });\n}\nfunction _navigateFrame(element, url, submitter) {\n  const frame = _assertClassBrand(_FrameController_brand, this, _findFrameElement2).call(this, element, submitter);\n  frame.delegate.proposeVisitIfNavigatedWithAction(frame, getVisitAction(submitter, element, frame));\n  _assertClassBrand(_FrameController_brand, this, _withCurrentNavigationElement).call(this, element, () => {\n    frame.src = url;\n  });\n}\nasync function _handleUnvisitableFrameResponse(fetchResponse) {\n  console.warn(`The response (${fetchResponse.statusCode}) from <turbo-frame id=\"${this.element.id}\"> is performing a full page visit due to turbo-visit-control.`);\n  await _assertClassBrand(_FrameController_brand, this, _visitResponse).call(this, fetchResponse.response);\n}\nfunction _willHandleFrameMissingFromResponse(fetchResponse) {\n  this.element.setAttribute(\"complete\", \"\");\n  const response = fetchResponse.response;\n  const visit = async (url, options) => {\n    if (url instanceof Response) {\n      _assertClassBrand(_FrameController_brand, this, _visitResponse).call(this, url);\n    } else {\n      session.visit(url, options);\n    }\n  };\n  const event = dispatch(\"turbo:frame-missing\", {\n    target: this.element,\n    detail: {\n      response,\n      visit\n    },\n    cancelable: true\n  });\n  return !event.defaultPrevented;\n}\nfunction _handleFrameMissingFromResponse(fetchResponse) {\n  this.view.missing();\n  _assertClassBrand(_FrameController_brand, this, _throwFrameMissingError).call(this, fetchResponse);\n}\nfunction _throwFrameMissingError(fetchResponse) {\n  const message = `The response (${fetchResponse.statusCode}) did not contain the expected <turbo-frame id=\"${this.element.id}\"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;\n  throw new TurboFrameMissingError(message);\n}\nasync function _visitResponse(response) {\n  const wrapped = new FetchResponse(response);\n  const responseHTML = await wrapped.responseHTML;\n  const {\n    location,\n    redirected,\n    statusCode\n  } = wrapped;\n  return session.visit(location, {\n    response: {\n      redirected,\n      statusCode,\n      responseHTML\n    }\n  });\n}\nfunction _findFrameElement2(element, submitter) {\n  const id = getAttribute(\"data-turbo-frame\", submitter, element) || this.element.getAttribute(\"target\");\n  return getFrameElementById(id) ?? this.element;\n}\nfunction _formActionIsVisitable(form, submitter) {\n  const action = getAction$1(form, submitter);\n  return locationIsVisitable(expandURL(action), this.rootLocation);\n}\nfunction _shouldInterceptNavigation(element, submitter) {\n  const id = getAttribute(\"data-turbo-frame\", submitter, element) || this.element.getAttribute(\"target\");\n  if (element instanceof HTMLFormElement && !_assertClassBrand(_FrameController_brand, this, _formActionIsVisitable).call(this, element, submitter)) {\n    return false;\n  }\n  if (!this.enabled || id == \"_top\") {\n    return false;\n  }\n  if (id) {\n    const frameElement = getFrameElementById(id);\n    if (frameElement) {\n      return !frameElement.disabled;\n    }\n  }\n  if (!session.elementIsNavigatable(element)) {\n    return false;\n  }\n  if (submitter && !session.elementIsNavigatable(submitter)) {\n    return false;\n  }\n  return true;\n}\nfunction _isIgnoringChangesTo(attributeName) {\n  return _classPrivateFieldGet(_ignoredAttributes, this).has(attributeName);\n}\nfunction _ignoringChangesToAttribute(attributeName, callback) {\n  _classPrivateFieldGet(_ignoredAttributes, this).add(attributeName);\n  callback();\n  _classPrivateFieldGet(_ignoredAttributes, this).delete(attributeName);\n}\nfunction _withCurrentNavigationElement(element, callback) {\n  this.currentNavigationElement = element;\n  callback();\n  delete this.currentNavigationElement;\n}\nfunction getFrameElementById(id) {\n  if (id != null) {\n    const element = document.getElementById(id);\n    if (element instanceof FrameElement) {\n      return element;\n    }\n  }\n}\nfunction activateElement(element, currentURL) {\n  if (element) {\n    const src = element.getAttribute(\"src\");\n    if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {\n      throw new Error(`Matching <turbo-frame id=\"${element.id}\"> element has a source URL which references itself`);\n    }\n    if (element.ownerDocument !== document) {\n      element = document.importNode(element, true);\n    }\n    if (element instanceof FrameElement) {\n      element.connectedCallback();\n      element.disconnectedCallback();\n      return element;\n    }\n  }\n}\nconst StreamActions = {\n  after() {\n    this.targetElements.forEach(e => {\n      var _e$parentElement;\n      return (_e$parentElement = e.parentElement) === null || _e$parentElement === void 0 ? void 0 : _e$parentElement.insertBefore(this.templateContent, e.nextSibling);\n    });\n  },\n  append() {\n    this.removeDuplicateTargetChildren();\n    this.targetElements.forEach(e => e.append(this.templateContent));\n  },\n  before() {\n    this.targetElements.forEach(e => {\n      var _e$parentElement2;\n      return (_e$parentElement2 = e.parentElement) === null || _e$parentElement2 === void 0 ? void 0 : _e$parentElement2.insertBefore(this.templateContent, e);\n    });\n  },\n  prepend() {\n    this.removeDuplicateTargetChildren();\n    this.targetElements.forEach(e => e.prepend(this.templateContent));\n  },\n  remove() {\n    this.targetElements.forEach(e => e.remove());\n  },\n  replace() {\n    this.targetElements.forEach(e => e.replaceWith(this.templateContent));\n  },\n  update() {\n    this.targetElements.forEach(targetElement => {\n      targetElement.innerHTML = \"\";\n      targetElement.append(this.templateContent);\n    });\n  },\n  refresh() {\n    session.refresh(this.baseURI, this.requestId);\n  }\n};\n\n// <turbo-stream action=replace target=id><template>...\n\n/**\n * Renders updates to the page from a stream of messages.\n *\n * Using the `action` attribute, this can be configured one of four ways:\n *\n * - `append` - appends the result to the container\n * - `prepend` - prepends the result to the container\n * - `replace` - replaces the contents of the container\n * - `remove` - removes the container\n * - `before` - inserts the result before the target\n * - `after` - inserts the result after the target\n *\n * @customElement turbo-stream\n * @example\n *   <turbo-stream action=\"append\" target=\"dom_id\">\n *     <template>\n *       Content to append to container designated with the dom_id.\n *     </template>\n *   </turbo-stream>\n */\nvar _StreamElement_brand = /*#__PURE__*/new WeakSet();\nclass StreamElement extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    _classPrivateMethodInitSpec(this, _StreamElement_brand);\n  }\n  static async renderElement(newElement) {\n    await newElement.performAction();\n  }\n  async connectedCallback() {\n    try {\n      await this.render();\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.disconnect();\n    }\n  }\n  async render() {\n    return this.renderPromise ??= (async () => {\n      const event = this.beforeRenderEvent;\n      if (this.dispatchEvent(event)) {\n        await nextRepaint();\n        await event.detail.render(this);\n      }\n    })();\n  }\n  disconnect() {\n    try {\n      this.remove();\n      // eslint-disable-next-line no-empty\n    } catch {}\n  }\n\n  /**\n   * Removes duplicate children (by ID)\n   */\n  removeDuplicateTargetChildren() {\n    this.duplicateChildren.forEach(c => c.remove());\n  }\n\n  /**\n   * Gets the list of duplicate children (i.e. those with the same ID)\n   */\n  get duplicateChildren() {\n    var _this$templateContent;\n    const existingChildren = this.targetElements.flatMap(e => [...e.children]).filter(c => !!c.id);\n    const newChildrenIds = [...(((_this$templateContent = this.templateContent) === null || _this$templateContent === void 0 ? void 0 : _this$templateContent.children) || [])].filter(c => !!c.id).map(c => c.id);\n    return existingChildren.filter(c => newChildrenIds.includes(c.id));\n  }\n\n  /**\n   * Gets the action function to be performed.\n   */\n  get performAction() {\n    if (this.action) {\n      const actionFunction = StreamActions[this.action];\n      if (actionFunction) {\n        return actionFunction;\n      }\n      _assertClassBrand(_StreamElement_brand, this, _raise).call(this, \"unknown action\");\n    }\n    _assertClassBrand(_StreamElement_brand, this, _raise).call(this, \"action attribute is missing\");\n  }\n\n  /**\n   * Gets the target elements which the template will be rendered to.\n   */\n  get targetElements() {\n    if (this.target) {\n      return this.targetElementsById;\n    } else if (this.targets) {\n      return this.targetElementsByQuery;\n    } else {\n      _assertClassBrand(_StreamElement_brand, this, _raise).call(this, \"target or targets attribute is missing\");\n    }\n  }\n\n  /**\n   * Gets the contents of the main `<template>`.\n   */\n  get templateContent() {\n    return this.templateElement.content.cloneNode(true);\n  }\n\n  /**\n   * Gets the main `<template>` used for rendering\n   */\n  get templateElement() {\n    if (this.firstElementChild === null) {\n      const template = this.ownerDocument.createElement(\"template\");\n      this.appendChild(template);\n      return template;\n    } else if (this.firstElementChild instanceof HTMLTemplateElement) {\n      return this.firstElementChild;\n    }\n    _assertClassBrand(_StreamElement_brand, this, _raise).call(this, \"first child element must be a <template> element\");\n  }\n\n  /**\n   * Gets the current action.\n   */\n  get action() {\n    return this.getAttribute(\"action\");\n  }\n\n  /**\n   * Gets the current target (an element ID) to which the result will\n   * be rendered.\n   */\n  get target() {\n    return this.getAttribute(\"target\");\n  }\n\n  /**\n   * Gets the current \"targets\" selector (a CSS selector)\n   */\n  get targets() {\n    return this.getAttribute(\"targets\");\n  }\n\n  /**\n   * Reads the request-id attribute\n   */\n  get requestId() {\n    return this.getAttribute(\"request-id\");\n  }\n  get description() {\n    return (this.outerHTML.match(/<[^>]+>/) ?? [])[0] ?? \"<turbo-stream>\";\n  }\n  get beforeRenderEvent() {\n    return new CustomEvent(\"turbo:before-stream-render\", {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        newStream: this,\n        render: StreamElement.renderElement\n      }\n    });\n  }\n  get targetElementsById() {\n    var _this$ownerDocument2;\n    const element = (_this$ownerDocument2 = this.ownerDocument) === null || _this$ownerDocument2 === void 0 ? void 0 : _this$ownerDocument2.getElementById(this.target);\n    if (element !== null) {\n      return [element];\n    } else {\n      return [];\n    }\n  }\n  get targetElementsByQuery() {\n    var _this$ownerDocument3;\n    const elements = (_this$ownerDocument3 = this.ownerDocument) === null || _this$ownerDocument3 === void 0 ? void 0 : _this$ownerDocument3.querySelectorAll(this.targets);\n    if (elements.length !== 0) {\n      return Array.prototype.slice.call(elements);\n    } else {\n      return [];\n    }\n  }\n}\nfunction _raise(message) {\n  throw new Error(`${this.description}: ${message}`);\n}\nclass StreamSourceElement extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"streamSource\", null);\n  }\n  connectedCallback() {\n    this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);\n    connectStreamSource(this.streamSource);\n  }\n  disconnectedCallback() {\n    if (this.streamSource) {\n      this.streamSource.close();\n      disconnectStreamSource(this.streamSource);\n    }\n  }\n  get src() {\n    return this.getAttribute(\"src\") || \"\";\n  }\n}\nFrameElement.delegateConstructor = FrameController;\nif (customElements.get(\"turbo-frame\") === undefined) {\n  customElements.define(\"turbo-frame\", FrameElement);\n}\nif (customElements.get(\"turbo-stream\") === undefined) {\n  customElements.define(\"turbo-stream\", StreamElement);\n}\nif (customElements.get(\"turbo-stream-source\") === undefined) {\n  customElements.define(\"turbo-stream-source\", StreamSourceElement);\n}\n(() => {\n  let element = document.currentScript;\n  if (!element) return;\n  if (element.hasAttribute(\"data-turbo-suppress-warning\")) return;\n  element = element.parentElement;\n  while (element) {\n    if (element == document.body) {\n      return console.warn(unindent`\n        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!\n\n        Load your applicationâs JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.\n\n        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements\n\n        ââ\n        Suppress this warning by adding a \"data-turbo-suppress-warning\" attribute to: %s\n      `, element.outerHTML);\n    }\n    element = element.parentElement;\n  }\n})();\nwindow.Turbo = {\n  ...Turbo,\n  StreamActions\n};\nstart();\nexport { FetchEnctype, FetchMethod, FetchRequest, FetchResponse, FrameElement, FrameLoadingStyle, FrameRenderer, PageRenderer, PageSnapshot, StreamActions, StreamElement, StreamSourceElement, cache, clearCache, connectStreamSource, disconnectStreamSource, fetchWithTurboHeaders as fetch, fetchEnctypeFromString, fetchMethodFromString, isSafe, navigator$1 as navigator, registerAdapter, renderStreamMessage, session, setConfirmMethod, setFormMode, setProgressBarDelay, start, visit };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}