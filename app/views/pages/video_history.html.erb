<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video History</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <!-- Updated CSS file to style input fields -->
    <style> 
        .video-title {
            font-weight: bold;
            cursor: pointer;
        }
        .video-title-input {
            display: none;
            width: 100%;
            font-size: 1.25rem;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="text-center">
            <h1 class="display-4">Video History</h1>
            <p>View the recorded videos from the livestreams</p>
            <div id="video-list" class="mt-4"></div>
        </div>
    </div>
    
    <!-- Modal for video playback -->
    <div class="modal fade" id="videoModal" tabindex="-1" role="dialog" aria-labelledby="videoModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="videoModalLabel">Video Playback</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <video id="videoPlayer" controls class="w-100"></video>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script>
        async function fetchVideos() {
            const response = await fetch('/api/videos');
            const videos = await response.json();
            const videoList = document.getElementById('video-list');

            videos.forEach(video => {
                const videoItem = document.createElement('div');
                videoItem.className = 'card mb-3';
                videoItem.innerHTML = `
                    <div class="card-body">
                        <h5 class="card-title">
                            <span class="video-title" onclick="editTitle(this)">${video.title}</span>
                            <input class="video-title-input" type="text" value="${video.title}" onblur="saveTitle(this, ${video.id})" onkeydown="handleKey(event, this, ${video.id})">
                        </h5>
                        <p class="card-text">Uploaded on: ${new Date(video.date).toLocaleDateString()} at ${new Date(video.date).toLocaleTimeString()}</p>
                    </div>
                `;
                videoList.appendChild(videoItem);
            });

            document.querySelectorAll('.video-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const videoPath = e.target.getAttribute('data-path');
                    const videoTitle = e.target.getAttribute('data-title');
                    document.getElementById('videoPlayer').src = videoPath;
                    document.getElementById('videoModalLabel').innerText = videoTitle;
                    $('#videoModal').modal('show');
                });
            });
        }
        // JS code to handle the inline editing of video title
        function editTitle(element) {
            const input = element.nextElementSibling;
            element.style.display = 'none';
            input.style.display = 'inline';
            input.focus();
        }

        function saveTitle(input, videoId) {
            const newTitle = input.value;
            input.style.display = 'none';
            const span = input.previousElementSibling;
            span.innerText = newTitle;
            span.style.display = 'inline';

            // Save the new title to the server
            fetch(`/api/videos/${videoId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title: newTitle })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }

        function handleKey(event, input, videoId) {
            if (event.key === 'Enter') {
                input.blur();
            }
        }

        fetchVideos();
    </script>
</body>
</html>
