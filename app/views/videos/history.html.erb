<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video History</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
  <%= csrf_meta_tags %>
  <style>
    .video-title {
      font-weight: bold;
      cursor: pointer;
    }
    .video-title-input {
      display: none;
      width: 100%;
      font-size: 1.25rem;
      text-align: center;
    }
    .edit-button, .delete-button, .save-button {
      cursor: pointer;
    }
    .save-button {
      display: none;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <div class="text-center">
        <h1 class="display-4">Video History</h1>
        <p>View the recorded videos from the livestreams</p>
        <div id="flash-messages">
            <% if flash[:error] %>
                <div class="card text-white bg-danger">
                    <div class="card-body">
                        <p class="card-text"><%= flash[:error] %></p>
                    </div>
                </div>
            <% end %>
        </div>
        <div class="sort-options mt-3">
            <button class="btn btn-secondary" onclick="sortVideos('created_at', 'asc')">Sort by Date Asc</button>
            <button class="btn btn-secondary" onclick="sortVideos('created_at', 'desc')">Sort by Date Desc</button>
            <button class="btn btn-secondary" onclick="sortVideos('title', 'asc')">Sort by Title Asc</button>
            <button class="btn btn-secondary" onclick="sortVideos('title', 'desc')">Sort by Title Desc</button>
            <button class="btn btn-secondary" onclick="sortVideos('duration', 'asc')">Sort by Duration Asc</button>
            <button class="btn btn-secondary" onclick="sortVideos('duration', 'desc')">Sort by Duration Desc</button>
        </div>
        <div id="video-list" class="mt-4">
            <% if @videos.empty? %>
                <% if flash[:error] %>
                    <div class="card text-white bg-danger">
                        <div class="card-body">
                            <p class="card-text"><%= flash[:error] %></p>
                        </div>
                    </div>
                <% else %>
                    <div class="card text-white bg-info">
                        <div class="card-body">
                            <p class="card-text">No crying snippets available</p>
                        </div>
                    </div>
                <% end %>
            <% else %>
                <% @videos.each do |video| %>
                    <div class="card mb-3">
                        <div class="card-body d-flex justify-content-center align-items-center">
                            <div>
                                <h5 class="card-title">
                                    <a href="<%= video.file_path %>" class="video-title" data-path="<%= video.file_path %>" data-title="<%= video.title %>" onclick="viewVideo(event, '<%= video.file_path %>', '<%= video.title %>')"><%= video.title %></a>
                                    <input class="video-title-input" type="text" value="<%= video.title %>" data-video-id="<%= video.id %>">
                                </h5>
                            </div>
                            <button class="btn btn-sm btn-primary edit-button ml-2">Edit Title</button>
                            <button class="btn btn-sm btn-success save-button ml-2" onclick="saveTitle(this)">Save</button>
                            <button class="btn btn-sm btn-danger delete-button ml-2" onclick="deleteVideo(<%= video.id %>, this)">Delete</button>
                        </div>
                        <p class="card-text text-center">Uploaded on: <%= video.created_at.to_date %> at <%= video.created_at.strftime("%I:%M %p") %></p>
                        <p class="card-text text-center">Duration: <%= video.duration %> seconds</p>
                    </div>
                <% end %>
            <% end %>
        </div>
    </div>
  </div>


  <!-- Modal for video playback -->
  <div class="modal fade" id="videoModal" tabindex="-1" role="dialog" aria-labelledby="videoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="videoModalLabel">Video Playback</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <video id="videoPlayer" controls class="w-100"></video>
                <div id="errorMessage" class="alert alert-warning mt-3" style="display: none;">
                    Video is unavailable
                </div>
            </div>
        </div>
    </div>
  </div>


  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

  <script>
    let currentSortBy = 'created_at';
    let currentOrder = 'asc';

    async function fetchVideos(sortBy = 'created_at', order = 'asc') {
      try {
        const response = await fetch(`/api/videos?sort_by=${sortBy}&order=${order}`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const videos = await response.json();
        const videoList = document.getElementById('video-list');
        videoList.innerHTML = '';

        if (videos.length === 0) {
          videoList.innerHTML = `
            <div class="card text-white bg-info">
              <div class="card-body">
                <p class="card-text">No crying snippets available</p>
              </div>
            </div>
          `;
        } else {
          videos.forEach(video => {
            const videoItem = document.createElement('div');
            videoItem.className = 'card mb-3';
            videoItem.innerHTML = `
              <div class="card-body d-flex justify-content-center align-items-center">
                <div>
                  <h5 class="card-title">
                    <a href="${video.file_path_url}" class="video-title" data-path="${video.file_path_url}" data-title="${video.title}" onclick="viewVideo(event, '${video.file_path_url}', '${video.title}')">${video.title}</a>
                    <input class="video-title-input" type="text" value="${video.title}" data-video-id="${video.id}">
                  </h5>
                </div>
                <button class="btn btn-sm btn-primary edit-button ml-2">Edit Title</button>
                <button class="btn btn-sm btn-success save-button ml-2" onclick="saveTitle(this)">Save</button>
                <button class="btn btn-sm btn-danger delete-button ml-2" onclick="deleteVideo(${video.id}, this)">Delete</button>
              </div>
              <p class="card-text text-center">Uploaded on: ${new Date(video.created_at).toLocaleDateString()} at ${new Date(video.created_at).toLocaleTimeString()}</p>
            `;
            videoList.appendChild(videoItem);
          });

          document.querySelectorAll('.edit-button').forEach(button => {
            button.addEventListener('click', () => editTitle(button));
          });

          document.querySelectorAll('.video-title-input').forEach(input => {
            input.addEventListener('blur', () => saveTitle(input, input.dataset.videoId));
            input.addEventListener('keydown', (event) => handleKey(event, input, input.dataset.videoId));
          });
        }
      } catch (error) {
        const videoList = document.getElementById('video-list');
        videoList.innerHTML = `
          <div class="card text-white bg-danger">
            <div class="card-body">
              <p class="card-text">Unable to fetch crying snippets. Please try again later.</p>
            </div>
          </div>
        `;
        console.error('Failed to fetch videos:', error);
      }
    }

    function sortVideos(sortBy, order) {
      currentSortBy = sortBy;
      currentOrder = order;
      fetchVideos(sortBy, order);
    }

    function viewVideo(event, path, title) {
      event.preventDefault();
      if (!path) {
        document.getElementById('videoPlayer').style.display = 'none';
        document.getElementById('errorMessage').style.display = 'block';
      } else {
        document.getElementById('videoPlayer').src = path;
        document.getElementById('videoPlayer').style.display = 'block';
        document.getElementById('errorMessage').style.display = 'none';
      }
      document.getElementById('videoModalLabel').innerText = title;
      $('#videoModal').modal('show');
    }

    function editTitle(button) {
      # const titleElement = button.previousElementSibling.querySelector('.video-title');
      # const input = button.previousElementSibling.querySelector('.video-title-input');
      # titleElement.style.display = 'none';
      # button.style.display = 'none';
      # input.style.display = 'inline';
      # input.focus();
      const cardBody = button.closest('.card-body');
      const titleElement = cardBody.querySelector('.video-title');
      const input = cardBody.querySelector('.video-title-input');
      const saveButton = cardBody.querySelector('.save-button');
    
      titleElement.style.display = 'none';
      button.style.display = 'none';
      input.style.display = 'inline';
      saveButton.style.display = 'inline';
      input.focus();
    }

    function saveTitle(input, videoId) {
      # const newTitle = input.value;
      # input.style.display = 'none';
      # const titleLink = input.previousElementSibling;
      # const button = input.parentElement.nextElementSibling;
      # titleLink.innerText = newTitle;
      # titleLink.style.display = 'inline';
      # button.style.display = 'inline';

      const cardBody = button.closest('.card-body');
      const input = cardBody.querySelector('.video-title-input');
      const titleLink = cardBody.querySelector('.video-title');
      const editButton = cardBody.querySelector('.edit-button');
    
      const newTitle = input.value;
      const videoId = input.dataset.videoId;

      console.log(`Saving title: ${newTitle} for video ID: ${videoId}`);
      fetch(`/api/videos/${videoId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ title: newTitle })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        console.log('Success:', data);
        // Update the title in the current video list
        const video = videos.find(v => v.id === videoId);
        if (video) {
          video.title = newTitle;
        }
      })
      .catch((error) => {
        console.error('Error:', error);
      });
    }

    function handleKey(event, input, videoId) {
      if (event.key === 'Enter') {
        saveTitle(input.closest('.card-body').querySelector('.save-button'));
      }
    }

    async function deleteVideo(videoId, button) {
      try {
        const response = await fetch(`/api/videos/${videoId}`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const videoCard = button.closest('.card');
        videoCard.remove();
        console.log(`Video ${videoId} deleted successfully.`);
      } catch (error) {
        console.error(`Failed to delete video ${videoId}:`, error);
      }
    }

    fetchVideos(currentSortBy, currentOrder);
  </script>
</body>
</html>
