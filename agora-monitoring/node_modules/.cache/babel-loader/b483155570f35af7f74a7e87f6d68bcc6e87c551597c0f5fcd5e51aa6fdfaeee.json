{"ast":null,"code":"var _jsxFileName = \"/Users/jingkaitan/Library/CloudStorage/OneDrive-SingaporeUniversityofTechnologyandDesign/GitHub-Cloud/1d-final-project-summer-2024-sds-2024-team-09/agora-monitoring/src/components/CameraPage.js\";\nimport React from 'react';\nimport AgoraRTC from 'agora-rtc-sdk-ng';\nimport { AudienceLatencyLevelType } from 'agora-rtc-sdk-ng';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraPage = () => {\n  let rtc = {\n    localAudioTrack: null,\n    localVideoTrack: null,\n    client: null\n  };\n  const APP_ID = process.env.REACT_APP_APP_ID;\n  const TOKEN = process.env.REACT_APP_TOKEN;\n  const CHANNEL = process.env.REACT_APP_CHANNEL;\n  const UID = process.env.REACT_APP_UID;\n  const handleJoinAsHost = async () => {\n    rtc.client = AgoraRTC.createClient({\n      mode: \"live\",\n      codec: \"vp8\",\n      clientRoleOptions: {\n        level: AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY\n      }\n    });\n    try {\n      rtc.client.setClientRole('host');\n      console.log(\"APP_ID\", APP_ID, \"CHANNEL\", CHANNEL);\n      await rtc.client.join(APP_ID, CHANNEL, TOKEN, UID);\n      // Create an audio track from the audio sampled by a microphone.\n      rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n      // Create a video track from the video captured by a camera.\n      rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n      // Publish the local audio and video tracks to the channel. \n      await rtc.client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\n      // Dynamically create a container in the form of a DIV element for playing the remote video track.\n      const localPlayerContainer = document.createElement('div');\n      // Specify the ID of the DIV container. You can use the uid of the local user.\n      localPlayerContainer.id = UID;\n      localPlayerContainer.textContent = 'Local user ' + UID;\n      localPlayerContainer.style.width = '640px';\n      localPlayerContainer.style.height = '480px';\n      document.body.append(localPlayerContainer);\n      rtc.localVideoTrack.play(localPlayerContainer);\n      console.log('Host joined successfully!');\n    } catch (error) {\n      console.error('Failed to join as host:', error);\n    }\n  };\n  const endStream = async () => {\n    try {\n      if (rtc.localAudioTrack) {\n        rtc.localAudioTrack.close();\n      }\n      if (rtc.localVideoTrack) {\n        rtc.localVideoTrack.close();\n      }\n\n      // Remove the container for the local video track.\n      const localPlayerContainer = document.getElementById(UID);\n      if (localPlayerContainer) {\n        localPlayerContainer.remove();\n      }\n\n      // Traverse all remote users to remove remote containers\n      if (rtc.client && rtc.client.remoteUsers) {\n        rtc.client.remoteUsers.forEach(user => {\n          const playerContainer = document.getElementById(user.uid);\n          if (playerContainer) {\n            playerContainer.remove();\n          }\n        });\n      }\n\n      // Leave the channel.\n      if (rtc.client) {\n        await rtc.client.leave();\n      }\n      console.log('Stream ended successfully!');\n    } catch (error) {\n      console.error('Failed to end the stream:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Camera Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleJoinAsHost,\n      children: \"Join as Host\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: endStream,\n      children: \"Leave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_c = CameraPage;\nexport default CameraPage;\nvar _c;\n$RefreshReg$(_c, \"CameraPage\");","map":{"version":3,"names":["React","AgoraRTC","AudienceLatencyLevelType","jsxDEV","_jsxDEV","CameraPage","rtc","localAudioTrack","localVideoTrack","client","APP_ID","process","env","REACT_APP_APP_ID","TOKEN","REACT_APP_TOKEN","CHANNEL","REACT_APP_CHANNEL","UID","REACT_APP_UID","handleJoinAsHost","createClient","mode","codec","clientRoleOptions","level","AUDIENCE_LEVEL_LOW_LATENCY","setClientRole","console","log","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","localPlayerContainer","document","createElement","id","textContent","style","width","height","body","append","play","error","endStream","close","getElementById","remove","remoteUsers","forEach","user","playerContainer","uid","leave","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jingkaitan/Library/CloudStorage/OneDrive-SingaporeUniversityofTechnologyandDesign/GitHub-Cloud/1d-final-project-summer-2024-sds-2024-team-09/agora-monitoring/src/components/CameraPage.js"],"sourcesContent":["import React from 'react';\nimport AgoraRTC from 'agora-rtc-sdk-ng';\nimport { AudienceLatencyLevelType } from 'agora-rtc-sdk-ng';\n\n\nconst CameraPage = () => {\n\n    let rtc = {\n        localAudioTrack: null,\n        localVideoTrack: null,\n        client: null,\n    };\n\n    const APP_ID = process.env.REACT_APP_APP_ID;\n    const TOKEN = process.env.REACT_APP_TOKEN;\n    const CHANNEL = process.env.REACT_APP_CHANNEL;\n    const UID = process.env.REACT_APP_UID;\n\n    const handleJoinAsHost = async () => {\n        rtc.client = AgoraRTC.createClient({\n            mode: \"live\",\n            codec: \"vp8\",\n            clientRoleOptions: {\n                level: AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY\n            }\n        });\n        try {\n            rtc.client.setClientRole('host');\n            console.log(\"APP_ID\", APP_ID, \"CHANNEL\", CHANNEL,)\n            await rtc.client.join(APP_ID, CHANNEL, TOKEN, UID);\n            // Create an audio track from the audio sampled by a microphone.\n            rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n            // Create a video track from the video captured by a camera.\n            rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n            // Publish the local audio and video tracks to the channel. \n            await rtc.client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\n            // Dynamically create a container in the form of a DIV element for playing the remote video track.\n            const localPlayerContainer = document.createElement('div');\n            // Specify the ID of the DIV container. You can use the uid of the local user.\n            localPlayerContainer.id = UID;\n            localPlayerContainer.textContent = 'Local user ' + UID;\n            localPlayerContainer.style.width = '640px';\n            localPlayerContainer.style.height = '480px';\n            document.body.append(localPlayerContainer);\n\n            rtc.localVideoTrack.play(localPlayerContainer);\n\n            console.log('Host joined successfully!');\n        } catch (error) {\n            console.error('Failed to join as host:', error);\n        }\n    };\n\n    const endStream = async () => {\n        try {\n            if (rtc.localAudioTrack) {\n                rtc.localAudioTrack.close();\n            }\n            if (rtc.localVideoTrack) {\n                rtc.localVideoTrack.close();\n            }\n\n            // Remove the container for the local video track.\n            const localPlayerContainer = document.getElementById(UID);\n            if (localPlayerContainer) {\n                localPlayerContainer.remove();\n            }\n\n            // Traverse all remote users to remove remote containers\n            if (rtc.client && rtc.client.remoteUsers) {\n                rtc.client.remoteUsers.forEach(user => {\n                    const playerContainer = document.getElementById(user.uid);\n                    if (playerContainer) {\n                        playerContainer.remove();\n                    }\n                });\n            }\n\n            // Leave the channel.\n            if (rtc.client) {\n                await rtc.client.leave();\n            }\n\n            console.log('Stream ended successfully!');\n        } catch (error) {\n            console.error('Failed to end the stream:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Camera Page</h1>\n            <button onClick={handleJoinAsHost}>Join as Host</button>\n            <button onClick={endStream}>Leave</button>\n        </div>\n    );\n};\n\nexport default CameraPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}