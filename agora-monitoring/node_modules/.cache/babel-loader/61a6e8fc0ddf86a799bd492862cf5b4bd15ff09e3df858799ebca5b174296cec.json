{"ast":null,"code":"import React from'react';import AgoraRTC from'agora-rtc-sdk-ng';import{AudienceLatencyLevelType}from'agora-rtc-sdk-ng';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CameraPage=()=>{let rtc={localAudioTrack:null,localVideoTrack:null,client:null};let APP_ID=process.env.REACT_APP_APP_ID;let TOKEN=process.env.REACT_APP_TOKEN;let CHANNEL=process.env.REACT_APP_CHANNEL;let UID=process.env.REACT_APP_UID;const handleJoinAsHost=async()=>{rtc.client=AgoraRTC.createClient({mode:\"live\",codec:\"vp8\",clientRoleOptions:{level:AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY}});try{rtc.client.setClientRole('host');console.log(\"APP_ID\",APP_ID,\"CHANNEL\",CHANNEL);await rtc.client.join(APP_ID,CHANNEL,TOKEN,UID);// Create an audio track from the audio sampled by a microphone.\nrtc.localAudioTrack=await AgoraRTC.createMicrophoneAudioTrack();// Create a video track from the video captured by a camera.\nrtc.localVideoTrack=await AgoraRTC.createCameraVideoTrack();// Publish the local audio and video tracks to the channel. \nawait rtc.client.publish([rtc.localAudioTrack,rtc.localVideoTrack]);// Dynamically create a container in the form of a DIV element for playing the remote video track.\nconst localPlayerContainer=document.createElement('div');// Specify the ID of the DIV container. You can use the uid of the local user.\nlocalPlayerContainer.id=UID;localPlayerContainer.textContent='Local user '+UID;localPlayerContainer.style.width='640px';localPlayerContainer.style.height='480px';document.body.append(localPlayerContainer);rtc.localVideoTrack.play(localPlayerContainer);console.log('Host joined successfully!');}catch(error){console.error('Failed to join as host:',error);}};const endStream=async()=>{try{if(rtc.localAudioTrack){rtc.localAudioTrack.close();}if(rtc.localVideoTrack){rtc.localVideoTrack.close();}// Remove the container for the local video track.\nconst localPlayerContainer=document.getElementById(UID);if(localPlayerContainer){localPlayerContainer.remove();}// Traverse all remote users to remove remote containers\nif(rtc.client&&rtc.client.remoteUsers){rtc.client.remoteUsers.forEach(user=>{const playerContainer=document.getElementById(user.uid);if(playerContainer){playerContainer.remove();}});}// Leave the channel.\nif(rtc.client){await rtc.client.leave();}console.log('Stream ended successfully!');}catch(error){console.error('Failed to end the stream:',error);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Camera Page\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleJoinAsHost,children:\"Join as Host\"}),/*#__PURE__*/_jsx(\"button\",{onClick:endStream,children:\"Leave\"})]});};export default CameraPage;","map":{"version":3,"names":["React","AgoraRTC","AudienceLatencyLevelType","jsx","_jsx","jsxs","_jsxs","CameraPage","rtc","localAudioTrack","localVideoTrack","client","APP_ID","process","env","REACT_APP_APP_ID","TOKEN","REACT_APP_TOKEN","CHANNEL","REACT_APP_CHANNEL","UID","REACT_APP_UID","handleJoinAsHost","createClient","mode","codec","clientRoleOptions","level","AUDIENCE_LEVEL_LOW_LATENCY","setClientRole","console","log","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","localPlayerContainer","document","createElement","id","textContent","style","width","height","body","append","play","error","endStream","close","getElementById","remove","remoteUsers","forEach","user","playerContainer","uid","leave","children","onClick"],"sources":["/Users/jingkaitan/Library/CloudStorage/OneDrive-SingaporeUniversityofTechnologyandDesign/GitHub-Cloud/1d-final-project-summer-2024-sds-2024-team-09/agora-monitoring/src/components/CameraPage.js"],"sourcesContent":["import React from 'react';\nimport AgoraRTC from 'agora-rtc-sdk-ng';\nimport { AudienceLatencyLevelType } from 'agora-rtc-sdk-ng';\n\nconst CameraPage = () => {\n\n    let rtc = {\n        localAudioTrack: null,\n        localVideoTrack: null,\n        client: null,\n    };\n\n    let APP_ID = process.env.REACT_APP_APP_ID;\n    let TOKEN = process.env.REACT_APP_TOKEN;\n    let CHANNEL = process.env.REACT_APP_CHANNEL;\n    let UID = process.env.REACT_APP_UID;\n\n    const handleJoinAsHost = async () => {\n        rtc.client = AgoraRTC.createClient({\n            mode: \"live\",\n            codec: \"vp8\",\n            clientRoleOptions: {\n                level: AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY\n            }\n        });\n        try {\n            rtc.client.setClientRole('host');\n            console.log(\"APP_ID\", APP_ID, \"CHANNEL\", CHANNEL,)\n            await rtc.client.join(APP_ID, CHANNEL, TOKEN, UID);\n            // Create an audio track from the audio sampled by a microphone.\n            rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n            // Create a video track from the video captured by a camera.\n            rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n            // Publish the local audio and video tracks to the channel. \n            await rtc.client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\n            // Dynamically create a container in the form of a DIV element for playing the remote video track.\n            const localPlayerContainer = document.createElement('div');\n            // Specify the ID of the DIV container. You can use the uid of the local user.\n            localPlayerContainer.id = UID;\n            localPlayerContainer.textContent = 'Local user ' + UID;\n            localPlayerContainer.style.width = '640px';\n            localPlayerContainer.style.height = '480px';\n            document.body.append(localPlayerContainer);\n\n            rtc.localVideoTrack.play(localPlayerContainer);\n\n            console.log('Host joined successfully!');\n        } catch (error) {\n            console.error('Failed to join as host:', error);\n        }\n    };\n\n    const endStream = async () => {\n        try {\n            if (rtc.localAudioTrack) {\n                rtc.localAudioTrack.close();\n            }\n            if (rtc.localVideoTrack) {\n                rtc.localVideoTrack.close();\n            }\n\n            // Remove the container for the local video track.\n            const localPlayerContainer = document.getElementById(UID);\n            if (localPlayerContainer) {\n                localPlayerContainer.remove();\n            }\n\n            // Traverse all remote users to remove remote containers\n            if (rtc.client && rtc.client.remoteUsers) {\n                rtc.client.remoteUsers.forEach(user => {\n                    const playerContainer = document.getElementById(user.uid);\n                    if (playerContainer) {\n                        playerContainer.remove();\n                    }\n                });\n            }\n\n            // Leave the channel.\n            if (rtc.client) {\n                await rtc.client.leave();\n            }\n\n            console.log('Stream ended successfully!');\n        } catch (error) {\n            console.error('Failed to end the stream:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Camera Page</h1>\n            <button onClick={handleJoinAsHost}>Join as Host</button>\n            <button onClick={endStream}>Leave</button>\n        </div>\n    );\n};\n\nexport default CameraPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}