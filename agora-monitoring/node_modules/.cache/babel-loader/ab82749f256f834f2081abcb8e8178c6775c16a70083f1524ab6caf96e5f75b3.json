{"ast":null,"code":"import React,{useEffect,useState}from'react';import AgoraRTC,{AudienceLatencyLevelType}from'agora-rtc-sdk-ng';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CameraBroadcastPage=()=>{const[rtc,setRtc]=useState({localAudioTrack:null,localVideoTrack:null,client:null});const[remotePlayerContainer,setRemotePlayerContainer]=useState(null);useEffect(()=>{const APP_ID=process.env.REACT_APP_APP_ID;const TOKEN=process.env.REACT_APP_TOKEN;const CHANNEL=process.env.REACT_APP_CHANNEL;const joinChannel=async()=>{const client=AgoraRTC.createClient({mode:\"live\",codec:\"vp8\"});try{client.setClientRole(\"audience\",{level:AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY});console.log(\"APP_ID\",APP_ID,\"CHANNEL\",CHANNEL);const new_id=Math.floor(Math.random()*1000000);console.log(\"new_id\",new_id);await client.join(APP_ID,CHANNEL,TOKEN,new_id);client.on(\"user-published\",async(user,mediaType)=>{console.log(\"user-published\",user,mediaType);await client.subscribe(user,mediaType);console.log(\"subscribe success\");if(mediaType===\"video\"){const remoteVideoTrack=user.videoTrack;// Remove existing container if it exists\nif(remotePlayerContainer){remotePlayerContainer.remove();}// Create a new container\nconst newRemotePlayerContainer=document.createElement(\"div\");newRemotePlayerContainer.id=user.uid.toString();newRemotePlayerContainer.textContent=\"Remote user \"+user.uid.toString();newRemotePlayerContainer.style.width=\"640px\";newRemotePlayerContainer.style.height=\"480px\";document.body.append(newRemotePlayerContainer);// Play the remote video track\nremoteVideoTrack.play(newRemotePlayerContainer);// Update state with the new container\nsetRemotePlayerContainer(newRemotePlayerContainer);}if(mediaType===\"audio\"){const remoteAudioTrack=user.audioTrack;remoteAudioTrack.play();}});client.on(\"user-unpublished\",user=>{console.log(\"user-unpublished\",user);if(remotePlayerContainer&&remotePlayerContainer.id===user.uid.toString()){remotePlayerContainer.remove();setRemotePlayerContainer(null);}});setRtc({...rtc,client});}catch(error){console.error('Failed to join as audience:',error);}};const leaveChannel=async()=>{if(rtc.client){await rtc.client.leave();rtc.client.removeAllListeners();// Remove the remote player container if it exists\nif(remotePlayerContainer){remotePlayerContainer.remove();setRemotePlayerContainer(null);}setRtc({...rtc,client:null});console.log(\"Left the channel successfully\");}};// Ensure the functions are available in the component scope\nwindow.joinChannel=joinChannel;window.leaveChannel=leaveChannel;},[rtc,remotePlayerContainer]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Camera Broadcast Page\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.joinChannel(),children:\"Watch the broadcast\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.leaveChannel(),children:\"Leave the broadcast\"})]});};export default CameraBroadcastPage;","map":{"version":3,"names":["React","useEffect","useState","AgoraRTC","AudienceLatencyLevelType","jsx","_jsx","jsxs","_jsxs","CameraBroadcastPage","rtc","setRtc","localAudioTrack","localVideoTrack","client","remotePlayerContainer","setRemotePlayerContainer","APP_ID","process","env","REACT_APP_APP_ID","TOKEN","REACT_APP_TOKEN","CHANNEL","REACT_APP_CHANNEL","joinChannel","createClient","mode","codec","setClientRole","level","AUDIENCE_LEVEL_LOW_LATENCY","console","log","new_id","Math","floor","random","join","on","user","mediaType","subscribe","remoteVideoTrack","videoTrack","remove","newRemotePlayerContainer","document","createElement","id","uid","toString","textContent","style","width","height","body","append","play","remoteAudioTrack","audioTrack","error","leaveChannel","leave","removeAllListeners","window","children","onClick"],"sources":["/Users/jingkaitan/Library/CloudStorage/OneDrive-SingaporeUniversityofTechnologyandDesign/GitHub-Cloud/1d-final-project-summer-2024-sds-2024-team-09/agora-monitoring/src/components/CameraBroadcastPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AgoraRTC, { AudienceLatencyLevelType } from 'agora-rtc-sdk-ng';\n\nconst CameraBroadcastPage = () => {\n    const [rtc, setRtc] = useState({\n        localAudioTrack: null,\n        localVideoTrack: null,\n        client: null,\n    });\n\n    const [remotePlayerContainer, setRemotePlayerContainer] = useState(null);\n\n    useEffect(() => {\n        const APP_ID = process.env.REACT_APP_APP_ID;\n        const TOKEN = process.env.REACT_APP_TOKEN;\n        const CHANNEL = process.env.REACT_APP_CHANNEL;\n\n        const joinChannel = async () => {\n            const client = AgoraRTC.createClient({\n                mode: \"live\",\n                codec: \"vp8\",\n            });\n\n            try {\n                client.setClientRole(\"audience\", {\n                    level: AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY,\n                });\n\n                console.log(\"APP_ID\", APP_ID, \"CHANNEL\", CHANNEL);\n                const new_id = Math.floor(Math.random() * 1000000);\n                console.log(\"new_id\", new_id);\n                await client.join(APP_ID, CHANNEL, TOKEN, new_id);\n\n                client.on(\"user-published\", async (user, mediaType) => {\n                    console.log(\"user-published\", user, mediaType);\n                    await client.subscribe(user, mediaType);\n                    console.log(\"subscribe success\");\n\n                    if (mediaType === \"video\") {\n                        const remoteVideoTrack = user.videoTrack;\n\n                        // Remove existing container if it exists\n                        if (remotePlayerContainer) {\n                            remotePlayerContainer.remove();\n                        }\n\n                        // Create a new container\n                        const newRemotePlayerContainer = document.createElement(\"div\");\n                        newRemotePlayerContainer.id = user.uid.toString();\n                        newRemotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\n                        newRemotePlayerContainer.style.width = \"640px\";\n                        newRemotePlayerContainer.style.height = \"480px\";\n                        document.body.append(newRemotePlayerContainer);\n\n                        // Play the remote video track\n                        remoteVideoTrack.play(newRemotePlayerContainer);\n\n                        // Update state with the new container\n                        setRemotePlayerContainer(newRemotePlayerContainer);\n                    }\n\n                    if (mediaType === \"audio\") {\n                        const remoteAudioTrack = user.audioTrack;\n                        remoteAudioTrack.play();\n                    }\n                });\n\n                client.on(\"user-unpublished\", (user) => {\n                    console.log(\"user-unpublished\", user);\n                    if (remotePlayerContainer && remotePlayerContainer.id === user.uid.toString()) {\n                        remotePlayerContainer.remove();\n                        setRemotePlayerContainer(null);\n                    }\n                });\n\n                setRtc({ ...rtc, client });\n            } catch (error) {\n                console.error('Failed to join as audience:', error);\n            }\n        };\n\n        const leaveChannel = async () => {\n            if (rtc.client) {\n                await rtc.client.leave();\n                rtc.client.removeAllListeners();\n\n                // Remove the remote player container if it exists\n                if (remotePlayerContainer) {\n                    remotePlayerContainer.remove();\n                    setRemotePlayerContainer(null);\n                }\n\n                setRtc({ ...rtc, client: null });\n\n                console.log(\"Left the channel successfully\");\n            }\n        };\n\n        // Ensure the functions are available in the component scope\n        window.joinChannel = joinChannel;\n        window.leaveChannel = leaveChannel;\n    }, [rtc, remotePlayerContainer]);\n\n    return (\n        <div>\n            <h1>Camera Broadcast Page</h1>\n            <button onClick={() => window.joinChannel()}>Watch the broadcast</button>\n            <button onClick={() => window.leaveChannel()}>Leave the broadcast</button>\n        </div>\n    );\n};\n\nexport default CameraBroadcastPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}