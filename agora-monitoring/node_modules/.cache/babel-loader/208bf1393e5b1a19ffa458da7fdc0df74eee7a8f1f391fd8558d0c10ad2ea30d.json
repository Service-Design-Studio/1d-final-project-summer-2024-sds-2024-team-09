{"ast":null,"code":"var _jsxFileName = \"/Users/jingkaitan/Library/CloudStorage/OneDrive-SingaporeUniversityofTechnologyandDesign/GitHub-Cloud/1d-final-project-summer-2024-sds-2024-team-09/agora-monitoring/src/components/CameraBroadcastPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport AgoraRTC, { AudienceLatencyLevelType } from 'agora-rtc-sdk-ng';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraBroadcastPage = () => {\n  _s();\n  const [rtc, setRtc] = useState({\n    localAudioTrack: null,\n    localVideoTrack: null,\n    client: null\n  });\n  const [remotePlayerContainer, setRemotePlayerContainer] = useState(null);\n  useEffect(() => {\n    const APP_ID = process.env.REACT_APP_APP_ID;\n    const TOKEN = process.env.REACT_APP_TOKEN;\n    const CHANNEL = process.env.REACT_APP_CHANNEL;\n    const joinChannel = async () => {\n      const client = AgoraRTC.createClient({\n        mode: \"live\",\n        codec: \"vp8\"\n      });\n      try {\n        client.setClientRole(\"audience\", {\n          level: AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY\n        });\n        console.log(\"APP_ID\", APP_ID, \"CHANNEL\", CHANNEL);\n        const new_id = Math.floor(Math.random() * 1000000);\n        console.log(\"new_id\", new_id);\n        await client.join(APP_ID, CHANNEL, TOKEN, new_id);\n        client.on(\"user-published\", async (user, mediaType) => {\n          console.log(\"user-published\", user, mediaType);\n          await client.subscribe(user, mediaType);\n          console.log(\"subscribe success\");\n          if (mediaType === \"video\") {\n            const remoteVideoTrack = user.videoTrack;\n\n            // Remove existing container if it exists\n            if (remotePlayerContainer) {\n              remotePlayerContainer.remove();\n            }\n\n            // Create a new container\n            const newRemotePlayerContainer = document.createElement(\"div\");\n            newRemotePlayerContainer.id = user.uid.toString();\n            newRemotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\n            newRemotePlayerContainer.style.width = \"640px\";\n            newRemotePlayerContainer.style.height = \"480px\";\n            document.body.append(newRemotePlayerContainer);\n\n            // Play the remote video track\n            remoteVideoTrack.play(newRemotePlayerContainer);\n\n            // Update state with the new container\n            setRemotePlayerContainer(newRemotePlayerContainer);\n          }\n          if (mediaType === \"audio\") {\n            const remoteAudioTrack = user.audioTrack;\n            remoteAudioTrack.play();\n          }\n        });\n        client.on(\"user-unpublished\", user => {\n          console.log(\"user-unpublished\", user);\n          if (remotePlayerContainer && remotePlayerContainer.id === user.uid.toString()) {\n            remotePlayerContainer.remove();\n            setRemotePlayerContainer(null);\n          }\n        });\n        setRtc({\n          ...rtc,\n          client\n        });\n      } catch (error) {\n        console.error('Failed to join as audience:', error);\n      }\n    };\n    const leaveChannel = async () => {\n      if (rtc.client) {\n        await rtc.client.leave();\n        rtc.client.removeAllListeners();\n\n        // Remove the remote player container if it exists\n        if (remotePlayerContainer) {\n          remotePlayerContainer.remove();\n          setRemotePlayerContainer(null);\n        }\n        setRtc({\n          ...rtc,\n          client: null\n        });\n        console.log(\"Left the channel successfully\");\n      }\n    };\n\n    // Ensure the functions are available in the component scope\n    window.joinChannel = joinChannel;\n    window.leaveChannel = leaveChannel;\n  }, [rtc, remotePlayerContainer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Camera Broadcast Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.joinChannel(),\n      children: \"Watch the broadcast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.leaveChannel(),\n      children: \"Leave the broadcast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraBroadcastPage, \"Q6hh4mQqBxXSocgPrJidhnnO5rM=\");\n_c = CameraBroadcastPage;\nexport default CameraBroadcastPage;\nvar _c;\n$RefreshReg$(_c, \"CameraBroadcastPage\");","map":{"version":3,"names":["React","useEffect","useState","AgoraRTC","AudienceLatencyLevelType","jsxDEV","_jsxDEV","CameraBroadcastPage","_s","rtc","setRtc","localAudioTrack","localVideoTrack","client","remotePlayerContainer","setRemotePlayerContainer","APP_ID","process","env","REACT_APP_APP_ID","TOKEN","REACT_APP_TOKEN","CHANNEL","REACT_APP_CHANNEL","joinChannel","createClient","mode","codec","setClientRole","level","AUDIENCE_LEVEL_LOW_LATENCY","console","log","new_id","Math","floor","random","join","on","user","mediaType","subscribe","remoteVideoTrack","videoTrack","remove","newRemotePlayerContainer","document","createElement","id","uid","toString","textContent","style","width","height","body","append","play","remoteAudioTrack","audioTrack","error","leaveChannel","leave","removeAllListeners","window","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jingkaitan/Library/CloudStorage/OneDrive-SingaporeUniversityofTechnologyandDesign/GitHub-Cloud/1d-final-project-summer-2024-sds-2024-team-09/agora-monitoring/src/components/CameraBroadcastPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AgoraRTC, { AudienceLatencyLevelType } from 'agora-rtc-sdk-ng';\n\nconst CameraBroadcastPage = () => {\n    const [rtc, setRtc] = useState({\n        localAudioTrack: null,\n        localVideoTrack: null,\n        client: null,\n    });\n\n    const [remotePlayerContainer, setRemotePlayerContainer] = useState(null);\n\n    useEffect(() => {\n        const APP_ID = process.env.REACT_APP_APP_ID;\n        const TOKEN = process.env.REACT_APP_TOKEN;\n        const CHANNEL = process.env.REACT_APP_CHANNEL;\n\n        const joinChannel = async () => {\n            const client = AgoraRTC.createClient({\n                mode: \"live\",\n                codec: \"vp8\",\n            });\n\n            try {\n                client.setClientRole(\"audience\", {\n                    level: AudienceLatencyLevelType.AUDIENCE_LEVEL_LOW_LATENCY,\n                });\n\n                console.log(\"APP_ID\", APP_ID, \"CHANNEL\", CHANNEL);\n                const new_id = Math.floor(Math.random() * 1000000);\n                console.log(\"new_id\", new_id);\n                await client.join(APP_ID, CHANNEL, TOKEN, new_id);\n\n                client.on(\"user-published\", async (user, mediaType) => {\n                    console.log(\"user-published\", user, mediaType);\n                    await client.subscribe(user, mediaType);\n                    console.log(\"subscribe success\");\n\n                    if (mediaType === \"video\") {\n                        const remoteVideoTrack = user.videoTrack;\n\n                        // Remove existing container if it exists\n                        if (remotePlayerContainer) {\n                            remotePlayerContainer.remove();\n                        }\n\n                        // Create a new container\n                        const newRemotePlayerContainer = document.createElement(\"div\");\n                        newRemotePlayerContainer.id = user.uid.toString();\n                        newRemotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\n                        newRemotePlayerContainer.style.width = \"640px\";\n                        newRemotePlayerContainer.style.height = \"480px\";\n                        document.body.append(newRemotePlayerContainer);\n\n                        // Play the remote video track\n                        remoteVideoTrack.play(newRemotePlayerContainer);\n\n                        // Update state with the new container\n                        setRemotePlayerContainer(newRemotePlayerContainer);\n                    }\n\n                    if (mediaType === \"audio\") {\n                        const remoteAudioTrack = user.audioTrack;\n                        remoteAudioTrack.play();\n                    }\n                });\n\n                client.on(\"user-unpublished\", (user) => {\n                    console.log(\"user-unpublished\", user);\n                    if (remotePlayerContainer && remotePlayerContainer.id === user.uid.toString()) {\n                        remotePlayerContainer.remove();\n                        setRemotePlayerContainer(null);\n                    }\n                });\n\n                setRtc({ ...rtc, client });\n            } catch (error) {\n                console.error('Failed to join as audience:', error);\n            }\n        };\n\n        const leaveChannel = async () => {\n            if (rtc.client) {\n                await rtc.client.leave();\n                rtc.client.removeAllListeners();\n\n                // Remove the remote player container if it exists\n                if (remotePlayerContainer) {\n                    remotePlayerContainer.remove();\n                    setRemotePlayerContainer(null);\n                }\n\n                setRtc({ ...rtc, client: null });\n\n                console.log(\"Left the channel successfully\");\n            }\n        };\n\n        // Ensure the functions are available in the component scope\n        window.joinChannel = joinChannel;\n        window.leaveChannel = leaveChannel;\n    }, [rtc, remotePlayerContainer]);\n\n    return (\n        <div>\n            <h1>Camera Broadcast Page</h1>\n            <button onClick={() => window.joinChannel()}>Watch the broadcast</button>\n            <button onClick={() => window.leaveChannel()}>Leave the broadcast</button>\n        </div>\n    );\n};\n\nexport default CameraBroadcastPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}